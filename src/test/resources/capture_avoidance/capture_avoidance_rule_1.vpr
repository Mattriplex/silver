// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

// Rules for capture-avoiding substitution with bound variables:
//
// 1) (forall x : e)[x -> e’] = (forall x : e), where:
//
//   x is a bound variable in e, therefore there isn’t any free variable in e named ‘x’.
//   So the substitution x -> e’ does not change e.
//
// 2a) (forall x : e)[y -> e’] = (forall z : e[x -> z][y -> e’]), where:
//   x != y
//   x belongs to FV(e’), where FV(e) is the set of free variables in an expression e.
//   z does not belong to vars(e’) U vars(e) U {x, y} U scope, effectively z is said to be “fresh”.
//
// 2b) (forall x : e)[y -> e’] = (forall x : e[y -> e’[z/x]]), where:
//   x != y
//   x does not belong to FV(e') but does belong to BV(e’), where BV(e) is the set of bound variables in an expression e.
//   z does not belong to vars(e’) U vars(e) U {x, y} U scope, effectively z is said to be “fresh”.
//   e[z/x] denotes the replacement *even of bound* occurrences of x in e with z; a different operation to capture-avoiding substition.
//
// 3) (forall x : e)[y -> e’] = (forall x : e[y -> e’]), where:
//   x != y
//   x does not belong to vars(e’)

// Tests to enforce rule 1: (forall x : e)[x -> e’] = (forall x : e)

// Remark: Viper does not allow name clashes or variable hiding via scope and therefore attempting
// to perform the replacement stated in rule number 1 will cause a "duplicate identifier x" error.
// A solution was proposed in method Sanitizer.sanitizeBoundVariables, consisting in renaming
// bound variables should they collide with existing names in scope. This solution wasn't
// deployed because conceptually name clashes are forbidden in Viper, but the code remains
// as a suggestion to how this problem could be addressed.

// The code bellow is a regression test of Sanitizer.sanitizeBoundVariables for documentation
// purposes. Since the feature is not officially supported, the regression test bellow is commented.

// function function1(x: Int): Bool
//   requires forall x: Int :: x == x
//         // forall x$0: Int :: x$0 == x$0
//
// function function2(): Bool
//   requires forall x: Int :: (x == x && forall x: Int :: x == x)
//         // forall x: Int :: x == x && forall x$0: Int :: x$0 == x$0
//
// function function3(): Bool
//            (forall x: Int :: x == x) && (forall x: Int :: x == x) // No renaming needed
//
// function function4(x: Ref): Bool
//   requires forall x: Int :: x == x && forall x: Int :: x == x
//         // forall x$0: Int :: x$0 == x$0 && forall x$1: Int :: x$1 == x$1
//
// function function5(x: Ref): Bool
//   requires (forall x: Int :: x == x) && (forall x: Int :: x == x) // Two independent renaming
//         // (forall x$0: Int :: x$0 == x$0) && (forall x$0: Int :: x$0 == x$0)
//
// function function6(x: Ref, y: Ref): Bool
//   requires forall x: Int :: x == x && forall y: Int :: x == y // Two independent renaming
//         // forall x$0: Int :: x$0 == x$0 && forall y$0: Int :: x$0 == y$0
//
// function func7(x: Ref): Bool
//   //:: ExpectedOutput(consistency.error)
//   requires forall x: Int, x: Int :: x == x         // Although renaming occur still there's a repeated declaration of same variable,
//         // forall x$0: Int, x$0: Int :: x$0 == x$0 // so the error message should report the names of the variables prior to renaming.



//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}
}
