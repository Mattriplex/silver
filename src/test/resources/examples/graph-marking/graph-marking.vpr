// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field left: Ref
field right: Ref
field is_marked: Bool

/* Automatically chosen triggers are not always ideal, using hand-picked triggers can improve
 * performance noticeably, as witnessed by this example.
 */

define INV(nodes)
	   !(null in nodes)
	&& (forall n: Ref :: n in nodes ==> acc(n.left))
	&& (forall n: Ref :: n in nodes ==> acc(n.right))
	&& (forall n: Ref :: n in nodes ==> acc(n.is_marked))
	&& (forall n: Ref :: {n.left in nodes}{n in nodes, n.left}
			 	n in nodes && n.left  != null ==> n.left  in nodes)
	&& (forall n: Ref :: {n.right in nodes}{n in nodes, n.right}
				n in nodes && n.right != null ==> n.right in nodes)

method trav_rec(nodes: Set[Ref], node: Ref)
	requires node in nodes && INV(nodes)
	requires !node.is_marked

	ensures node in nodes && INV(nodes)

	/* We do not unmark nodes. This allows us to prove that the current node will be marked. */
	/* Used to fail in Silicon, see issue #374. */
	ensures forall n: Ref :: {n in nodes, n.is_marked} n in nodes ==> (old(n.is_marked) ==> n.is_marked)
	ensures node.is_marked

	/* The nodes are not being modified. */
	ensures forall n: Ref :: {n in nodes, n.left} n in nodes ==> (n.left == old(n.left))
	ensures forall n: Ref :: {n in nodes, n.right} n in nodes ==> (n.right == old(n.right))

	/* Propagation of the marker. */
	ensures forall n: Ref :: {n in nodes, n.is_marked}{n in nodes, n.left.is_marked}
            n in nodes ==> (old(!n.is_marked) && n.is_marked ==> (n.left == null || n.left.is_marked))
	ensures forall n: Ref :: {n in nodes, n.is_marked}{n in nodes, n.right.is_marked}
	          n in nodes ==> (old(!n.is_marked) && n.is_marked ==> (n.right == null || n.right.is_marked))
{
	node.is_marked := true

	if (node.left != null && !node.left.is_marked) {
		trav_rec(nodes, node.left)
	}

	if (node.right != null && !node.right.is_marked) {
		trav_rec(nodes, node.right)
	}
}

method client_success() {
	var a: Ref; a := new(*); a.is_marked := false
	var b: Ref; b := new(*); b.is_marked := false

	a.left := b;    a.right := null
	b.left := null; b.right := a

	var nodes: Set[Ref] := Set(a, b)

	assert forall n: Ref :: n in nodes ==> !n.is_marked

	trav_rec(nodes, a)

	assert forall n: Ref :: n in nodes ==> n.is_marked
}

method client_failure() {
	var a: Ref; a := new(*); a.is_marked := false
	var b: Ref; b := new(*); b.is_marked := false

	a.left := a; a.right := a;
	b.left := a; b.right := a;

	var nodes: Set[Ref] := Set(a, b)

	assert forall n: Ref :: n in nodes ==> !n.is_marked

	trav_rec(nodes, a)

	/* The assertion is expected to fail because b is in nodes, but b is not reachable from a */
  //:: ExpectedOutput(assert.failed:assertion.false)
	assert forall n: Ref :: n in nodes ==> n.is_marked
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axUnitJoinable { forall p: Perm :: {joinable(p, unit())} joinable(p, unit())}
    axiom axJoinableComm { forall p: Perm, q: Perm :: {joinable(p, q)} joinable(p, q) == joinable(q, p)}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}

    axiom axGeqPlus { forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(a, x)}
    axiom axGeqMinus {forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) <==> geq(minus(a, y), x)}

}
