// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field left: Ref
field right: Ref
field is_marked: Bool

/* Automatically chosen triggers are not always ideal, using hand-picked triggers can improve
 * performance noticeably, as witnessed by this example.
 */

define INV(nodes)
	   !(null in nodes)
	&& (forall n: Ref :: n in nodes ==> acc(n.left))
	&& (forall n: Ref :: n in nodes ==> acc(n.right))
	&& (forall n: Ref :: n in nodes ==> acc(n.is_marked))
	&& (forall n: Ref :: {n.left in nodes}{n in nodes, n.left}
			 	n in nodes && n.left  != null ==> n.left  in nodes)
	&& (forall n: Ref :: {n.right in nodes}{n in nodes, n.right}
				n in nodes && n.right != null ==> n.right in nodes)

method trav_rec(nodes: Set[Ref], node: Ref)
	requires node in nodes && INV(nodes)
	requires !node.is_marked

	ensures node in nodes && INV(nodes)

	/* We do not unmark nodes. This allows us to prove that the current node will be marked. */
	/* Used to fail in Silicon, see issue #374. */
	ensures forall n: Ref :: {n in nodes, n.is_marked} n in nodes ==> (old(n.is_marked) ==> n.is_marked)
	ensures node.is_marked

	/* The nodes are not being modified. */
	ensures forall n: Ref :: {n in nodes, n.left} n in nodes ==> (n.left == old(n.left))
	ensures forall n: Ref :: {n in nodes, n.right} n in nodes ==> (n.right == old(n.right))

	/* Propagation of the marker. */
	ensures forall n: Ref :: {n in nodes, n.is_marked}{n in nodes, n.left.is_marked}
            n in nodes ==> (old(!n.is_marked) && n.is_marked ==> (n.left == null || n.left.is_marked))
	ensures forall n: Ref :: {n in nodes, n.is_marked}{n in nodes, n.right.is_marked}
	          n in nodes ==> (old(!n.is_marked) && n.is_marked ==> (n.right == null || n.right.is_marked))
{
	node.is_marked := true

	if (node.left != null && !node.left.is_marked) {
		trav_rec(nodes, node.left)
	}

	if (node.right != null && !node.right.is_marked) {
		trav_rec(nodes, node.right)
	}
}

method client_success() {
	var a: Ref; a := new(*); a.is_marked := false
	var b: Ref; b := new(*); b.is_marked := false

	a.left := b;    a.right := null
	b.left := null; b.right := a

	var nodes: Set[Ref] := Set(a, b)

	assert forall n: Ref :: n in nodes ==> !n.is_marked

	trav_rec(nodes, a)

	assert forall n: Ref :: n in nodes ==> n.is_marked
}

method client_failure() {
	var a: Ref; a := new(*); a.is_marked := false
	var b: Ref; b := new(*); b.is_marked := false

	a.left := a; a.right := a;
	b.left := a; b.right := a;

	var nodes: Set[Ref] := Set(a, b)

	assert forall n: Ref :: n in nodes ==> !n.is_marked

	trav_rec(nodes, a)

	/* The assertion is expected to fail because b is in nodes, but b is not reachable from a */
  //:: ExpectedOutput(assert.failed:assertion.false)
	assert forall n: Ref :: n in nodes ==> n.is_marked
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(_x: Perm, _y: Perm): Perm
    function minus(_x: Perm, _y: Perm): Perm
    function geq(_x: Perm, _y: Perm): Bool
    function joinable(_x: Perm, _y: Perm): Bool

    function times(_x: Perm, _y: Perm): Perm

    //Auxiliary functions
    function share(_x: Rational): Perm
    function valid_share(_x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall _a: Int, _b: Int :: {biConstr(_a, _b)} biConstr(_a, _b) == share(_a/_b)}


    axiom axValid { forall _x: Rational :: {valid_share(_x)}
        valid_share(_x) <==> (_x >= 0/1 && _x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall _a: Rational, _b: Rational :: { share(_a), share(_b) }
        share(_a) == share(_b) ==> _a == _b
    }
    axiom axPlus { forall _a: Rational, _b: Rational :: { plus(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) ==> plus(share(_a), share(_b)) == share(_a + _b)
    }
    axiom axMinus { forall _a: Rational, _b: Rational :: { minus(share(_a), share(_b)) }
        geq(share(_a), share(_b)) ==> minus(share(_a), share(_b)) == share(_a - _b)
    }
    axiom axCanJoin { forall _a: Rational, _b: Rational :: { joinable(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) <==> valid_share(_a) && valid_share(_b) && valid_share(_a + _b)
    }
    axiom axGeq { forall _a: Rational, _b: Rational :: { geq(share(_a), share(_b)) }
        geq(share(_a), share(_b)) <==> valid_share(_a) && valid_share(_b) && valid_share(_a - _b)
    }
    axiom axMul { forall _a: Rational, _b: Rational :: {times(share(_a), share(_b))} times(share(_a), share(_b)) == share(_a * _b)}

    axiom axJoinComm {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == plus(_q, _p)}
    axiom axJoinAssoc {forall _p: Perm, _q: Perm, _r: Perm :: {plus(plus(_p, _q), _r)} plus(plus(_p, _q), _r) == plus(_p, plus(_q, _r))}
    axiom axJoinCancel { forall _p: Perm, _q: Perm, _x: Perm :: {plus(_p, _x), plus(_q, _x)} plus(_p, _x) == plus(_q, _x) ==> _p == _q}

    axiom axUnitGeq { forall _p: Perm :: {geq(_p, unit())} geq(_p, unit())}
    axiom axUnitGeq2 { forall _p: Perm :: {geq(unit(),_p)} geq(unit(),_p) <==> _p == unit()}
    axiom axFullGeq { forall _p: Perm :: {geq(full(),_p)} geq(full(),_p)}
    axiom axFullGeq2 { forall _p: Perm :: {geq(_p, full())} geq(_p, full()) <==> _p == full()}
    axiom axGeqId { forall _p: Perm :: {geq(_p, _p)} geq(_p, _p)}
    axiom axMinusId { forall _p: Perm :: {minus(_p, _p)} minus(_p, _p) == unit()}


    axiom axUnitJoin { forall _p: Perm :: {plus(unit(),_p)} plus(unit(),_p) == _p}
    axiom axUnitJoinable { forall _p: Perm :: {joinable(_p, unit())} joinable(_p, unit())}
    axiom axJoinableComm { forall _p: Perm, _q: Perm :: {joinable(_p, _q)} joinable(_p, _q) == joinable(_q,_p)}
    axiom axTimes0 { forall _p: Perm :: {times(unit(),_p)} times(unit(),_p) == unit()}
    axiom axTimes1 { forall _p: Perm :: {times(full(),_p)} times(full(),_p) == _p}

    axiom axGeqPlus { forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(_a, _x)}
    axiom axGeqMinus {forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(minus(_a, _y), _x)}
    axiom axMinusUneq { forall _p: Perm, _q: Perm :: {geq(_p, _q)} geq(_p, _q) && _p != _q ==> minus(_p, _q) != unit()}

    axiom axPositive {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == unit() ==> _p == unit() && _q == unit()}
    axiom axPlusGeq {forall _p: Perm, _q: Perm :: {geq(plus(_p, _q), _p)} joinable(_p, _q) ==> geq(plus(_p, _q), _p)}
    axiom axMinusCancel {forall _p: Perm, _q: Perm :: {minus(plus(_p, _q), _q)} minus(plus(_p, _q), _q) == _p}

}
