// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

/* This example demonstrates how algebraic data types, in this case a
 * Haskell-style Nil-Cons list
 *
 *   data List = Nil | Cons Int List
 *
 * could be encoded in Silver, and how
 * properties of functions over such a data type can proved.
 */

//:: IgnoreFile(/carbon/issue/280/)

domain list {

  /* Constructors */

  function Nil(): list
  function Cons(head: Int, tail: list): list

  /* Deconstructors */

  function head_Cons(xs: list): Int  // requires is_Cons(xs)
  function tail_Cons(xs: list): list // requires is_Cons(xs)

  /* Constructor types */

  function type(xs: list): Int
  unique function type_Nil(): Int
  unique function type_Cons(): Int

  function is_Nil(xs: list): Bool
  function is_Cons(xs: list): Bool

  /* Axioms */

  axiom destruct_over_construct_Cons {
    forall head: Int, tail: list :: {Cons(head, tail)}
         head_Cons(Cons(head, tail)) == head
      && tail_Cons(Cons(head, tail)) == tail
  }

  axiom construct_over_destruct_Cons {
    forall xs: list :: {head_Cons(xs)} {tail_Cons(xs)}
      is_Cons(xs) ==> xs == Cons(head_Cons(xs), tail_Cons(xs))
  }

  axiom type_of_Nil {
    type(Nil()) == type_Nil()
  }

  axiom type_of_Cons {
    forall head: Int, tail: list :: type(Cons(head, tail)) == type_Cons()
  }

  axiom type_existence {
    forall xs: list ::
         type(xs) == type_Nil()
      || type(xs) == type_Cons()
  }

  axiom type_is_Nil {
    forall xs: list :: type(xs) == type_Nil() <==> is_Nil(xs)
  }

  axiom type_IsElem {
    forall xs: list :: type(xs) == type_Cons() <==> is_Cons(xs)
  }
}

/* Datatype constructors are mutually exclusive */
method test_types(x: list) {
  assert is_Nil(x) <==> !is_Cons(x)
}

/* Prove some properties of lists */
method test_quantifiers() {
    /* The elements of a deconstructed Cons are equivalent to the corresponding arguments of Cons */
    assert forall head: Int, tail: list, xs: list ::
      is_Cons(xs) ==> (head == head_Cons(xs) && tail == tail_Cons(xs) <==> Cons(head, tail) == xs)

    /* Two Cons are equal iff their constructors' arguments are equal */
    assert forall head1: Int, head2: Int, tail1: list, tail2: list ::
      Cons(head1, tail1) == Cons(head2, tail2) <==> head1 == head2 && tail1 == tail2
}

method pattern_match_exhaustiveness_test(xs: list) {
  /* Consider the following Haskel function over Nil-Cons lists:
   *
   *   foo :: List -> Bool
   *
   *   foo Nil = True
   *   foo (Cons _ Nil) = False
   *   foo (Cons _ (Cons _ _)) = True
   *
   * The following assertion, consisting of negations of the matching patterns
   * that define the 'foo' function (on the left of the implication) holds
   * because the 'foo' function is total, i.e. it matching patterns
   * exhaustively cover all possible inputs.
   */

   assert    !(is_Nil(xs))
          && !(is_Cons(xs) && let ys == (tail_Cons(xs)) in is_Nil(ys))
          && !(is_Cons(xs) && let y  == (head_Cons(xs)) in let ys == (tail_Cons(xs)) in is_Cons(ys))
      ==>
          false

  /* However, if we changed the last pattern to
   *
   *   foo (Cons y (Cons z _)) | y < z = True
   *
   * then the corresponding pattern match exhaustiveness check *fails as expected*:
   */
   //:: ExpectedOutput(assert.failed:assertion.false)
   assert    !(is_Nil(xs))
          && !(is_Cons(xs) && let ys == (tail_Cons(xs)) in is_Nil(ys))
          && !(   is_Cons(xs) && let y  == (head_Cons(xs)) in let ys == (tail_Cons(xs)) in is_Cons(ys)
               && let z == (head_Cons(ys)) in y < z)
      ==>
          false
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axUnitJoinable { forall p: Perm :: {joinable(p, unit())} joinable(p, unit())}
    axiom axJoinableComm { forall p: Perm, q: Perm :: {joinable(p, q)} joinable(p, q) == joinable(q, p)}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}

    axiom axGeqPlus { forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(a, x)}
    axiom axGeqMinus {forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) <==> geq(minus(a, y), x)}

}
