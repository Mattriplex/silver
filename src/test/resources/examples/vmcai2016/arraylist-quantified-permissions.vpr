// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

//:: IgnoreFile(/carbon/issue/280/)

domain Pair[T1,T2] {
  function first(p : Pair[T1,T2]): T1
  function second(p: Pair[T1,T2]): T2
}

domain Array {
  function loc(a: Array, i: Int): Ref
  function len(a: Array): Int
  function inv_loc(r:Ref) : Pair[Array,Int]

  axiom loc_injective {
    forall a: Array, i: Int :: {loc(a, i)}
      0 <= i && i < len(a) ==>
      first(inv_loc(loc(a, i))) == a && second(inv_loc(loc(a, i))) == i
  }

  axiom length_nonneg {
    forall a: Array :: len(a) >= 0
  }
}

field val: Int // value of array slots - loc(this.elems,i).val
field elems: Array
field size : Int // how many array slots have been used

predicate AList(this: Ref)
{
     acc(this.elems) && acc(this.size) && 0 <= this.size && this.size <= len(this.elems)
  && 0 < len(this.elems)
  && (forall i:Int :: 0 <= i && i < len(this.elems) ==> acc(loc(this.elems,i).val))
}

function length(this: Ref): Int
  requires acc(AList(this))
  ensures result >= 0
{
  unfolding acc(AList(this)) in this.size
}

function itemAt(this: Ref, index: Int): Int
  requires acc(AList(this))
  requires 0 <= index && index < length(this)
{
  unfolding acc(AList(this)) in loc(this.elems,index).val
}


method create() returns (this: Ref)
  ensures acc(AList(this))
  ensures length(this) == 0
{
  this := new(elems,size)
  // new array of size 10
  var a : Array
  inhale len(a) == 10
  inhale forall i:Int :: 0 <= i && i < len(a) ==> acc(loc(a,i).val)

  this.size := 0
  this.elems := a

  fold acc(AList(this))
}


method addAtEnd(this: Ref, elem: Int)
  requires acc(AList(this))
  requires 0 < length(this) ==> itemAt(this, length(this) - 1) <= elem
  ensures acc(AList(this))
  ensures length(this) == old(length(this)) + 1
  ensures itemAt(this, length(this) - 1) == elem
  ensures forall i: Int :: 0 <= i && i < old(length(this)) ==> itemAt(this, i) == old(itemAt(this, i))
  ensures itemAt(this, old(length(this))) == elem
{
  unfold acc(AList(this))

  if (this.size == len(this.elems)) { // out of space - allocate double array size
    var a: Array // allocate fresh array of double size:
    inhale len(a) == len(this.elems) * 2 && forall i: Int :: 0 <= i && i < len(a) ==> acc(loc(a,i).val)
    // simulate memcpy from old array to new
    inhale forall i:Int :: 0 <= i && i < len(this.elems) ==> loc(a,i).val == loc(this.elems,i).val
    this.elems := a
  }

  loc(this.elems, this.size).val := elem
  this.size := this.size + 1

  fold acc(AList(this))
}



method insert(this: Ref, elem: Int) returns (j: Int)
  requires acc(AList(this))
  ensures acc(AList(this))
  ensures 0 <= j && j < length(this)
  ensures length(this) == old(length(this)) + 1
  ensures forall k: Int :: 0 <= k && k < j ==> itemAt(this, k) == old(itemAt(this, k))
  ensures itemAt(this, j) == elem
  ensures forall k: Int :: j < k && k < length(this) ==> itemAt(this, k) == old(itemAt(this, k - 1))
{
  j := 0
  while (j < length(this) && itemAt(this,j) < elem)
    invariant acc(AList(this))
    invariant 0 <= j && j <= length(this)
    invariant j > 0 ==> itemAt(this,j-1) <= elem
    invariant length(this) == old(length(this))
    invariant forall k: Int :: {itemAt(this,k)} 0 <= k && k < length(this) ==> itemAt(this,k) == old(itemAt(this,k))
  {
    unfold acc(AList(this))
    j := j + 1
    fold acc(AList(this))
  }
  unfold acc(AList(this))

  if(this.size == len(this.elems)) { // out of space - allocate double array size
    var a : Array // allocate fresh array of double size:
    inhale len(a) == len(this.elems) * 2 && forall i:Int :: 0 <= i && i < len(a) ==> acc(loc(a,i).val)
    // simulate memcpy from old array to new
    inhale forall i:Int :: {loc(a,i).val} 0 <= i && i < len(this.elems) ==> loc(a,i).val == loc(this.elems,i).val
    this.elems := a
  }

  var t : Int := this.size

  // shuffle the later elements forward
  while (t > j)
    invariant acc(this.elems,1/2) && acc(this.size,1/2) && acc(loc(this.elems,j).val, 1/2)
    invariant (forall i:Int :: j < i && i <= this.size ==> acc(loc(this.elems,i).val))
    invariant j <= t && t <= this.size
    invariant this.size == old(length(this))
    invariant forall i: Int :: {loc(this.elems,i)} j <= i && i <= this.size ==> (i < t ==> loc(this.elems,i).val == old(itemAt(this,i)))
    invariant forall i: Int :: {loc(this.elems,i)} j < i && i <= this.size ==> (i > t ==> loc(this.elems,i).val == old(itemAt(this,i-1)))
  {
    loc(this.elems,t).val := loc(this.elems,t-1).val
    t := t - 1
  }

  loc(this.elems,j).val := elem
  this.size := this.size + 1

  fold acc(AList(this))
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(_x: Perm, _y: Perm): Perm
    function minus(_x: Perm, _y: Perm): Perm
    function geq(_x: Perm, _y: Perm): Bool
    function joinable(_x: Perm, _y: Perm): Bool

    function times(_x: Perm, _y: Perm): Perm

    //Auxiliary functions
    function share(_x: Rational): Perm
    function valid_share(_x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall _a: Int, _b: Int :: {biConstr(_a, _b)} biConstr(_a, _b) == share(_a/_b)}


    axiom axValid { forall _x: Rational :: {valid_share(_x)}
        valid_share(_x) <==> (_x >= 0/1 && _x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall _a: Rational, _b: Rational :: { share(_a), share(_b) }
        share(_a) == share(_b) ==> _a == _b
    }
    axiom axPlus { forall _a: Rational, _b: Rational :: { plus(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) ==> plus(share(_a), share(_b)) == share(_a + _b)
    }
    axiom axMinus { forall _a: Rational, _b: Rational :: { minus(share(_a), share(_b)) }
        geq(share(_a), share(_b)) ==> minus(share(_a), share(_b)) == share(_a - _b)
    }
    axiom axCanJoin { forall _a: Rational, _b: Rational :: { joinable(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) <==> valid_share(_a) && valid_share(_b) && valid_share(_a + _b)
    }
    axiom axGeq { forall _a: Rational, _b: Rational :: { geq(share(_a), share(_b)) }
        geq(share(_a), share(_b)) <==> valid_share(_a) && valid_share(_b) && valid_share(_a - _b)
    }
    axiom axMul { forall _a: Rational, _b: Rational :: {times(share(_a), share(_b))} times(share(_a), share(_b)) == share(_a * _b)}

    axiom axJoinComm {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == plus(_q, _p)}
    axiom axJoinAssoc {forall _p: Perm, _q: Perm, _r: Perm :: {plus(plus(_p, _q), _r)} plus(plus(_p, _q), _r) == plus(_p, plus(_q, _r))}
    axiom axJoinCancel { forall _p: Perm, _q: Perm, _x: Perm :: {plus(_p, _x), plus(_q, _x)} plus(_p, _x) == plus(_q, _x) ==> _p == _q}

    axiom axUnitGeq { forall _p: Perm :: {geq(_p, unit())} geq(_p, unit())}
    axiom axUnitGeq2 { forall _p: Perm :: {geq(unit(),_p)} geq(unit(),_p) <==> _p == unit()}
    axiom axFullGeq { forall _p: Perm :: {geq(full(),_p)} geq(full(),_p)}
    axiom axFullGeq2 { forall _p: Perm :: {geq(_p, full())} geq(_p, full()) <==> _p == full()}

    axiom axUnitJoin { forall _p: Perm :: {plus(unit(),_p)} plus(unit(),_p) == _p}
    axiom axUnitJoinable { forall _p: Perm :: {joinable(_p, unit())} joinable(_p, unit())}
    axiom axJoinableComm { forall _p: Perm, _q: Perm :: {joinable(_p, _q)} joinable(_p, _q) == joinable(_q,_p)}
    axiom axTimes0 { forall _p: Perm :: {times(unit(),_p)} times(unit(),_p) == unit()}
    axiom axTimes1 { forall _p: Perm :: {times(full(),_p)} times(unit(),_p) == _p}

    axiom axGeqPlus { forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(_a, _x)}
    axiom axGeqMinus {forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(minus(_a, _y), _x)}
    axiom axMinusUneq { forall _p: Perm, _q: Perm :: {geq(_p, _q)} geq(_p, _q) && _p != _q ==> minus(_p, _q) != unit()}

}
