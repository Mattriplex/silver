// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

//:: IgnoreFile(/carbon/issue/102/)
//:: IgnoreFile(/silicon/issue/208/)

/*****************************************************************
 * List Nodes
 *****************************************************************/

field data: Int
field next: Ref

predicate lseg(this: Ref, end: Ref)
{
  this != end ==>
  acc(this.data) && acc(this.next) && acc(lseg(this.next, end)) &&
  unfolding acc(lseg(this.next, end)) in this.next != end ==> this.data <= this.next.data
}

function contentNodes(this: Ref, end: Ref): Seq[Int]
  requires acc(lseg(this, end))
  ensures  this == end ==> result == Seq[Int]()
  ensures  this != end ==> result[0] == unfolding acc(lseg(this, end)) in this.data
  ensures  forall i: Int, j: Int :: 0 <= i && i < j && j < |result| ==> result[i] <= result[j]
{
  this == end ? Seq[Int]() :
                unfolding acc(lseg(this, end)) in (
                    Seq(this.data) ++ contentNodes(this.next, end)
                )
}

function lengthNodes(this: Ref, end: Ref): Int
  requires acc(lseg(this, end))
  ensures  result == |contentNodes(this, end)|
{
  unfolding acc(lseg(this, end)) in
  this == end ? 0 :
                1 + lengthNodes(this.next, end)
}


/*****************************************************************
 * Lists
 *****************************************************************/

field head: Ref

predicate List(this: Ref)
{
  acc(this.head) && acc(lseg(this.head, null))
}

function content(this: Ref): Seq[Int]
  requires acc(List(this))
  ensures  forall i: Int, j: Int :: 0 <= i && i < j && j < |result| ==> result[i] <= result[j]
{
  unfolding acc(List(this)) in contentNodes(this.head, null)
}

function length(this: Ref): Int
  requires acc(List(this))
  ensures result == |content(this)|
{
  unfolding acc(List(this)) in lengthNodes(this.head, null)
}

function peek(this: Ref): Int
  requires acc(List(this))
  requires 0 < length(this)
  ensures result == content(this)[0]
{
  unfolding acc(List(this)) in unfolding acc(lseg(this.head, null)) in this.head.data
}

method create() returns (this: Ref)
  ensures acc(List(this))
  ensures content(this) == Seq[Int]()
{
  this := new(*)
  this.head := null
  fold acc(lseg(this.head, null))
  fold acc(List(this))
}

method insert(this: Ref, elem: Int) returns (index: Int)
  requires acc(List(this))
  ensures acc(List(this))
  ensures 0 <= index && index <= |old(content(this))|
  ensures content(this) == old(content(this))[0..index] ++ Seq(elem) ++ old(content(this))[index..]
{
  var tmp: Ref
  index := 0

  unfold acc(List(this))

  if(this.head != null) {
    unfold acc(lseg(this.head, null))
  }

  if(this.head == null || elem <= this.head.data) {
    tmp := new(*)
    tmp.data := elem
    tmp.next := this.head
    fold acc(lseg(this.head, null))
    fold acc(lseg(tmp, null))
    this.head := tmp
  } else {
    var hd: Ref := this.head
    var ptr: Ref := hd
    fold acc(lseg(this.head, ptr))
    index := index + 1

    define A acc(lseg(ptr, null)) && contentNodes(ptr, null)[0] == old(content(this))[index-1]
    define B acc(lseg(hd, null)) && contentNodes(hd, null) == old(content(this))[0..index-1] ++ old[lhs](contentNodes(ptr, null))
      /* In a wand such as
       *   A --* ... lhs(e)
       * lhs(e) means that expression e is evaluated in the state in which the wand will have
       * been applied, i.e. in which A held.
       * In the above wand
       *   acc(lseg(ptr, null)) ... --* ... ++ lhs(contentNodes(ptr, null))
       * this means that the nodes that are provided when the wand is applied are appended
       * to those that make up the footprint of the wand. In effect, the already traversed
       * prefix of the list (the wand's footprint) and the (potentially) yet to traverse
       * suffix of the list (lseg(ptr, null)) will be concatenated, yielding the final
       * result list.
       */

    package A --* B

    while(ptr.next != null && unfolding acc(lseg(ptr.next, null)) in ptr.next.data < elem)
      invariant acc(ptr.next) && acc(ptr.data) && acc(lseg(ptr.next, null))
      invariant 1 <= index && index <= |old(content(this))|
      invariant ptr.next == null ==> index == |old(content(this))|
      invariant ptr.data == old(content(this))[index-1]
      invariant ptr.next != null ==> contentNodes(ptr.next, null) == old(content(this))[index..]
      invariant ptr.data < elem
      invariant ptr.next != null ==> ptr.data <= unfolding acc(lseg(ptr.next, null)) in ptr.next.data
      invariant A --* B
    {
      var prev: Ref := ptr

      unfold acc(lseg(ptr.next, null))
      index := index + 1
      ptr := ptr.next

      package (A) --* B {
          fold acc(lseg(prev, null))
          apply acc(lseg(prev, null)) && contentNodes(prev, null)[0] == old(content(this))[index-1] --* B
      }
    }

    tmp := new(*)
    tmp.data := elem
    tmp.next := ptr.next
    ptr.next := tmp

    // apply the wand to obtain the full list
    fold acc(lseg(ptr.next, null))
    fold acc(lseg(ptr, null))

    apply A --* B
  }

  fold acc(List(this))
}

method dequeue(this: Ref) returns (res: Int)
  requires acc(List(this))
  requires 0 < length(this)
  ensures acc(List(this))
  ensures res == old(content(this)[0])
  ensures content(this) == old(content(this)[1..])
{
  unfold acc(List(this))
  unfold acc(lseg(this.head, null))
  res := this.head.data
  this.head := this.head.next
  fold acc(List(this))
}



/*****************************************************************
 * CLIENT
 *****************************************************************/

/* Monitor invariant:
 *      acc(List(lock)) && acc(lock.held) && acc(lock.changed)
 *   && (old[acq](content(lock)) == content(lock) || lock.changed)
 */

field held: Int
field changed: Bool

method test(lock: Ref)
  ensures [true, forperm[held] r :: false]
{
  /* Acquire lock (without deadlock checking) */
  inhale acc(List(lock)) && acc(lock.held) && acc(lock.changed)
label acq

  if(2 <= length(lock)) {
    var r1: Int
    r1 := dequeue(lock)

    assert r1 <= peek(lock)

    lock.changed := true
  }

  /* Release lock */
  exhale    acc(List(lock)) && acc(lock.held) && acc(lock.changed)
         && (old[acq](content(lock)) == content(lock) || lock.changed)
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axUnitJoinable { forall p: Perm :: {joinable(p, unit())} joinable(p, unit())}
    axiom axJoinableComm { forall p: Perm, q: Perm :: {joinable(p, q)} joinable(p, q) == joinable(q, p)}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}

    axiom axGeqPlus { forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(a, x)}
    axiom axGeqMinus {forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) <==> geq(minus(a, y), x)}

}
