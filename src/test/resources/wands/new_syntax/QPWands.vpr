// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

//:: IgnoreFile(/carbon/issue/216/)
field f: Int

define injectiveSeq(xs) forall i: Int, j: Int :: 0 <= i && 0 <= j && i < |xs| && j < |xs| && i != j ==> xs[i] != xs[j]

method test0(xs: Seq[Ref], y: Ref)
requires forall x: Ref :: x in xs ==> acc(x.f)
requires injectiveSeq(xs)
requires |xs| >= 1
requires acc(y.f) {
    xs[0].f := 0
    y.f := 1
    label setupComplete
    var toGo: Seq[Ref] := xs
    var completed: Seq[Ref] := Seq()
    while (|toGo| != 0) 
    invariant forall x: Ref :: x in completed ==> acc(y.f) --* acc(x.f) && acc(y.f) && y.f == old[lhs](y.f)
    invariant forall i: Int, j: Int :: 0 <= i && 0 <= j && i < |toGo| && j < |toGo| && i != j ==> toGo[i] != toGo[j]
    invariant forall x: Ref :: x in toGo ==> acc(x.f)
    invariant xs == completed ++ toGo
    invariant forall x: Ref :: x in toGo ==> x.f == old[setupComplete](x.f)
    invariant acc(y.f) && y.f == 1
    //:: UnexpectedOutput(invariant.not.preserved:assertion.false, /silicon/issue/311/)
    invariant forall x: Ref :: x in completed ==>
      applying (acc(y.f) --* acc(x.f) && acc(y.f) && y.f == old[lhs](y.f)) in
      x.f == old[setupComplete](x.f) {
        var localX: Ref := toGo[0]
        package acc(y.f) --* acc(localX.f) && acc(y.f) && y.f == old[lhs](y.f)
        completed := completed ++ Seq(localX)
        toGo := toGo[1..]
    }
    assert forall x: Ref :: x in xs ==> acc(y.f) --* acc(x.f) && acc(y.f) && y.f == old[lhs](y.f)
    var some: Ref := xs[0]
    apply acc(y.f) --* acc(some.f) && acc(y.f) && y.f == old[lhs](y.f)
    assert some.f == 0
    assert y.f == 1
}

method test1(x: Ref)
requires forall i: Int :: true ==> acc(x.f) && x.f == i --* acc(x.f) {
    exhale forall i: Int :: true ==> acc(x.f) && x.f == i-1 --* acc(x.f)

    //:: ExpectedOutput(assert.failed:wand.not.found)
    assert forall i: Int :: true ==> acc(x.f) && x.f == i --* acc(x.f)
}

method test2(xs: Seq[Ref], y: Ref)
requires forall x: Ref :: x in xs ==> acc(y.f) --* acc(x.f) && acc(y.f) {

    //:: ExpectedOutput(assert.failed:wand.not.found)
    assert forall x: Ref :: x in xs ==> acc(y.f) --* acc(y.f) && acc(x.f)
}

method test3(xs: Seq[Ref], y: Ref)
requires forall x: Ref :: x in xs ==> acc(y.f) --* acc(x.f) && acc(y.f)
requires injectiveSeq(xs)
requires |xs| > 0
requires acc(y.f) {
    var some: Ref := xs[0]
    package true --* acc(some.f) && acc(y.f) {
        apply acc(y.f) --* acc(some.f) && acc(y.f)
    }
    assert forall x: Ref :: x in xs[1..] ==> acc(y.f) --* acc(x.f) && acc(y.f)

    //:: ExpectedOutput(assert.failed:wand.not.found)
    assert forall x: Ref :: x in xs ==> acc(y.f) --* acc(x.f) && acc(y.f)
}

method test4(x: Ref)
requires forall i: Int, j: Int :: true ==> acc(x.f) && x.f == i + j --* acc(x.f) {
    exhale acc(x.f) && x.f == 5 --* acc(x.f)
    assert forall i: Int :: i != 5 ==> acc(x.f) && x.f == i --* acc(x.f)

    //:: ExpectedOutput(assert.failed:wand.not.found)
    assert forall i: Int :: true ==> acc(x.f) && x.f == i --* acc(x.f)
}

method test5(xs: Seq[Ref], y: Ref)
requires forall x: Ref :: x in xs ==> acc(x.f)
requires injectiveSeq(xs)
requires |xs| >= 1
requires acc(y.f) {
    xs[0].f := 0
    y.f := 1
    var some: Ref := xs[0]
    package acc(y.f) --* acc(some.f) && acc(y.f)
    var completed: Seq[Ref] := Seq(some)
    assert forall x: Ref :: x in completed ==> acc(y.f) --* acc(x.f) && acc(y.f)
    assert applying (acc(y.f) --* acc(some.f) && acc(y.f)) in some.f == 0
    assert applying (acc(y.f) --* acc(some.f) && acc(y.f)) in y.f == 1
    assert forall x: Ref :: x in xs[1..] ==> acc(x.f)

    //:: ExpectedOutput(assert.failed:insufficient.permission)
    assert forall x: Ref :: x in xs ==> acc(x.f)
}

method test6(xs: Seq[Ref])
requires forall x: Ref :: x in xs ==> true --* acc(x.f)
requires |xs| > 0 {
    assume applying (true --* acc(xs[0].f)) in xs[0].f == 0
    package true --* (forall x: Ref :: x in xs ==> true --* acc(x.f))
    apply true --* (forall x: Ref :: x in xs ==> true --* acc(x.f))
    apply true --* acc(xs[0].f)
    assert xs[0].f == 0

    //:: ExpectedOutput(assert.failed:assertion.false)
    assert false
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axUnitJoinable { forall p: Perm :: {joinable(p, unit())} joinable(p, unit())}
    axiom axJoinableComm { forall p: Perm, q: Perm :: {joinable(p, q)} joinable(p, q) == joinable(q, p)}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}

    axiom axGeqPlus { forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(a, x)}
    axiom axGeqMinus {forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) && joinable(x, y) <==> geq(minus(a, y), x) && geq(a, y)}

}
