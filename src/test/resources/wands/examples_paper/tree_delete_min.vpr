// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

//:: IgnoreFile(/carbon/issue/280/)

/* This example shows how magic wands can be used to specify the
 * imperative version of challenge 3 from the VerifyThis@FM2012
 * verification competition. Method tree_delete_min below is an
 * iterative implementation of the removal of the minimal element
 * in a binary search tree.
 *
 * The example contains two assertions (marked with "TODO") that
 * help overcoming an incompleteness with respect to sequences.
 */

field v: Int
field l: Ref
field r: Ref

predicate Tree(x: Ref) {
  x == null
    ? true
    :    acc(x.v)
      && acc(x.l) && acc(Tree(x.l))
      && acc(x.r) && acc(Tree(x.r))
}

function val(x: Ref): Int
  requires x != null && acc(Tree(x))
{ unfolding acc(Tree(x)) in x.v }

function vals(x: Ref): Seq[Int]
  requires acc(Tree(x))
{ x == null ? Seq[Int]() : unfolding acc(Tree(x)) in vals(x.l) ++ Seq(x.v) ++ vals(x.r) }

/* Deletes the minimal element of a binary tree, assuming that the
 * tree is a binary search tree (which, for simplicity, is not made
 * explicit in the definition of predicate Tree).
 */
method tree_delete_min(x: Ref) returns (z: Ref)
  requires x != null && acc(Tree(x))
  ensures acc(Tree(z))                  /* POST1 */
  ensures vals(z) == old(vals(x))[1..]  /* POST2 */
{
  var p: Ref := x
  var plvs: Seq[Int]

  define A acc(p.l) && acc(Tree(p.l)) && vals(p.l) == plvs[1..]
  define B acc(Tree(x)) && vals(x) == old(vals(x))[1..]

  unfold acc(Tree(p))
  plvs := vals(p.l)

  if (p.l == null) {
    z := p.r

    assert vals(x.l) == Seq[Int]() /* TODO: Required by Silicon for POST2 */
  } else {
    package (A) --* B {
        fold acc(Tree(p))
    }

    while (unfolding acc(Tree(p.l)) in p.l.l != null)
      invariant p != null && acc(p.l) && acc(Tree(p.l)) && p.l != null
      invariant plvs == vals(p.l)
      invariant A --* B
    {
      var oldP: Ref := p
      var oldPlvs: Seq[Int] := plvs

      unfold acc(Tree(p.l))
      p := p.l
      plvs := vals(p.l)

      package (A) --* B {
          fold Tree(p)
          apply acc(oldP.l) && acc(Tree(oldP.l)) && vals(oldP.l) == oldPlvs[1..] --*
          acc(Tree(x)) && vals(x) == old(vals(x))[1..]
      }
    }

    unfold acc(Tree(p.l))
    assert vals(p.l.l) == Seq[Int]() /* TODO: Required by Silicon for POST2 */

    p.l := p.l.r

    apply A --* B

    z := x
  }
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}
}
