// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

/* This example encodes and specifies an iterative computation of the
 * sum of a recursively defined linked-list. Magic wands are used to
 * book-keep permissions in the loop.
 */

field val: Int
field next: Ref

/* Linked-list abstract predicate. Contains access to the fields of the current
 * node ys, and transitively, to the fields of all nodes in the tail.
 */
predicate List(ys: Ref) {
  acc(ys.val) && acc(ys.next) && (ys.next != null ==> acc(List(ys.next)))
}

/* Pure function that computes the sum in a straight-forward, recursive way. */
function sum_rec(ys: Ref): Int
  requires acc(List(ys))
{ unfolding List(ys) in ys.val + (ys.next == null ? 0 : sum_rec(ys.next)) }

/* Iterative computation of the sum over the linked-list ys. The postcondition
 * states that the iterative computation yields the same result as the
 * recursive one.
 */
method sum_it(ys: Ref) returns (sum: Int)
  requires ys != null
  requires acc(List(ys))
  ensures acc(List(ys))
  ensures sum == old(sum_rec(ys))
{
  var xs: Ref := ys /* Pointer to the current node in the list */
  sum := 0          /* Sum computed so far*/

  var old_sum_xs : Int /* used to store sum of list from xs, when wand is packaged */

  /* Short-hands to keep the specifications concise */
  define A xs != null ==> acc(List(xs)) && sum_rec(xs) == old_sum_xs
  define B acc(List(ys)) && sum_rec(ys) == old(sum_rec(ys))

  /* (Trivially) establish the promise that giving up the list starting from
   * the current node xs - which at this point is the head of the list - in a
   * shape s.t. its sum is the same as it is at this point (sum_rec(xs) == old_sum_xs),
   * yields a list that starts at the old head node (ys) and whose sum is the
   * sum of the original list (sum_rec(ys) == old(sum_rec(ys))).
   */
  old_sum_xs := sum_rec(xs)

  package A --* B

  /* Iteratively compute the sum.
   * The loop invariant states that
   *  1. we have permissions to the list starting at the current node xs (if
   *     not null)
   *  2. the computed sum is the sum of the original list minus the sum of the
   *     nodes still to visit, i.e., the sum of the list starting at the
   *     current node xs.
   *  3. the previously described promise holds
   */
  while (xs != null)
    invariant xs != null ==> acc(List(xs))
    invariant old_sum_xs == (xs == null ? 0 : sum_rec(xs))
    invariant sum == old(sum_rec(ys)) - old_sum_xs;
    invariant A --* B
  {
    var oldXs: Ref := xs
    var oldOld_sum_xs: Int := old_sum_xs

    /* Let zs point to the *current* current node, update the sum and advance
     * the current node pointer.
     */
    var zs: Ref := xs
    unfold List(xs)
    sum := sum + xs.val
    xs := xs.next

    /* Update the promise. This exhales access to the fields of the *previous*
     * current node zs, and the magic wand instance w, since they belong to the
     * footprint of the packaged magic wand instance.
     */
    old_sum_xs := (xs == null ? 0 : sum_rec(xs))

    package (A) --* B {
        fold List(zs)
        apply (oldXs != null ==> acc(List(oldXs)) && sum_rec(oldXs) == oldOld_sum_xs) --*
        (acc(List(ys)) && sum_rec(ys) == old(sum_rec(ys)))
    }
  }

  /* Use the promise to get back the unchanged list starting at ys.
   * xs is null, so nothing is given up, but that is correct because
   * intuitively, the permissions to each node in the list has been
   * packaged into the wand while the loop executed.
   */
  apply A --* B
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(_x: Perm, _y: Perm): Perm
    function minus(_x: Perm, _y: Perm): Perm
    function geq(_x: Perm, _y: Perm): Bool
    function joinable(_x: Perm, _y: Perm): Bool

    function times(_x: Perm, _y: Perm): Perm

    //Auxiliary functions
    function share(_x: Rational): Perm
    function valid_share(_x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall _a: Int, _b: Int :: {biConstr(_a, _b)} biConstr(_a, _b) == share(_a/_b)}


    axiom axValid { forall _x: Rational :: {valid_share(_x)}
        valid_share(_x) <==> (_x >= 0/1 && _x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall _a: Rational, _b: Rational :: { share(_a), share(_b) }
        share(_a) == share(_b) ==> _a == _b
    }
    axiom axPlus { forall _a: Rational, _b: Rational :: { plus(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) ==> plus(share(_a), share(_b)) == share(_a + _b)
    }
    axiom axMinus { forall _a: Rational, _b: Rational :: { minus(share(_a), share(_b)) }
        geq(share(_a), share(_b)) ==> minus(share(_a), share(_b)) == share(_a - _b)
    }
    axiom axCanJoin { forall _a: Rational, _b: Rational :: { joinable(share(_a), share(_b)) }
        valid_share(_a) && valid_share(_b) ==> (joinable(share(_a), share(_b)) == valid_share(_a + _b))
    }
    axiom axGeq { forall _a: Rational, _b: Rational :: { geq(share(_a), share(_b)) }
        valid_share(_a) && valid_share(_b) ==> (geq(share(_a), share(_b)) <==> valid_share(_a - _b))
    }
    axiom axMul { forall _a: Rational, _b: Rational :: {times(share(_a), share(_b))} times(share(_a), share(_b)) == share(_a * _b)}

    axiom axJoinComm {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == plus(_q, _p)}
    axiom axJoinAssoc {forall _p: Perm, _q: Perm, _r: Perm :: {plus(plus(_p, _q), _r)} plus(plus(_p, _q), _r) == plus(_p, plus(_q, _r))}
    axiom axJoinCancel { forall _p: Perm, _q: Perm, _x: Perm :: {plus(_p, _x), plus(_q, _x)} plus(_p, _x) == plus(_q, _x) ==> _p == _q}

    axiom axUnitGeq { forall _p: Perm :: {geq(_p, unit())} geq(_p, unit())}
    axiom axUnitGeq2 { forall _p: Perm :: {geq(unit(),_p)} geq(unit(),_p) <==> _p == unit()}
    axiom axFullGeq { forall _p: Perm :: {geq(full(),_p)} geq(full(),_p)}
    axiom axFullGeq2 { forall _p: Perm :: {geq(_p, full())} geq(_p, full()) <==> _p == full()}
    axiom axGeqId { forall _p: Perm :: {geq(_p, _p)} geq(_p, _p)}
    axiom axMinusId { forall _p: Perm :: {minus(_p, _p)} minus(_p, _p) == unit()}


    axiom axUnitJoin { forall _p: Perm :: {plus(unit(),_p)} plus(unit(),_p) == _p}
    axiom axUnitJoinable { forall _p: Perm :: {joinable(_p, unit())} joinable(_p, unit())}
    axiom axJoinableComm { forall _p: Perm, _q: Perm :: {joinable(_p, _q)} joinable(_p, _q) == joinable(_q,_p)}
    axiom axTimes0 { forall _p: Perm :: {times(unit(),_p)} times(unit(),_p) == unit()}
    axiom axTimes1 { forall _p: Perm :: {times(full(),_p)} times(full(),_p) == _p}

    axiom axGeqPlus { forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(_a, _x)}
    axiom axGeqMinus {forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(minus(_a, _y), _x)}
    axiom axMinusUneq { forall _p: Perm, _q: Perm :: {geq(_p, _q)} geq(_p, _q) && _p != _q ==> minus(_p, _q) != unit()}

    axiom axPositive {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == unit() ==> _p == unit() && _q == unit()}
    axiom axPlusGeq {forall _p: Perm, _q: Perm :: {geq(plus(_p, _q), _p)} /*joinable(_p, _q) ==>*/ geq(plus(_p, _q), _p)}
    axiom axMinusCancel {forall _p: Perm, _q: Perm :: {minus(plus(_p, _q), _q)} minus(plus(_p, _q), _q) == _p}

}
