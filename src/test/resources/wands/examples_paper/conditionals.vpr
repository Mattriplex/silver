// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

/* This example illustrates the behaviour of conditionals on the RHS
 * of a wand, in particular, which uncertainties are caused when the
 * footprint of a wand is affected by locations to which permissions
 * are provided by the LHS.
 */

field f: Bool
field g: Int
field h: Ref

method conditionals01(x: Ref)
  requires acc(x.f) && acc(x.g)
{
  define A acc(x.f)
  define B acc(x.f) && (x.f ==> acc(x.g))

    // The current state holds permissions to x.f and x.g, and x.f has some
    // unknown value b (the value of x.g is irrelevant). The current state
    // thus satisfies the assertion:
    //
    //   acc(x.f) * x.f == b * acc(x.g)

  package A --* B
    // The LHS provides a hypothetical state in which x.f has some value b'.
    // Since the value of b' is unknown, acc(x.g) is effectively part of the
    // footprint of the wand. The current state now satisfies:
    //
    //   acc(x.f) * x.f == b * (!b' ==> acc(x.g)) * (A --* B)

  apply A --* B
    // Applying the wand instance requires giving up permissions to x.f, but
    // we gain them back right away. x.f has an unknown value b'' (in 
    // principle, this should be the same unknown value b as before the 
    // apply; see regression/issue024.vpr for a discussion of this issue).
    // Depending on b'' (i.e. the value of x.f), we potentially also got 
    // permissions to x.g from the apply. The current state thus satisfies:
    //
    //   acc(x.f) * x.f == b'' * (!b' ==> acc(x.g)) * (b'' ==> acc(x.g))
    //
    // The third conjunct is essentially garbage since we will not be able to
    // deduce anything about b'.

  if (x.f) {
    // We gained clarity about the value b'' that x.f has, resulting in:
    //
    //   acc(x.f) * x.f == true * acc(x.g)
    assert acc(x.g)
  }

  // assert acc(x.g) // Will (and must) fail
}

method conditionals02(x: Ref)
  requires acc(x.f) && acc(x.g, write) && acc(x.h, write)
{
  define A acc(x.f)
  define B acc(x.f) && (x.f ? acc(x.g) : acc(x.h))

    // The current state holds permissions to x.f, x.g and x.h, and x.f has 
    // some unknown value b (the other values are irrelevant).
    // The current state thus satisfies the assertion:
    //
    //   acc(x.f) * x.f == b * acc(x.g) * acc(x.h)

  package A --* B
    // The LHS provides a hypothetical state in which x.f has some value b'.
    // Since the value of b' is unknown, both acc(x.g) and acc(x.h) must be 
    // part of the footprint of the wand. The current state thus satisfies:
    //
    //   acc(x.f) * x.f == b * (!b' ? acc(x.g) : acc(x.h)) * (A --* B)
    
  apply A --* B
    // After applying the wand, x.f has an unknown value b'' (resulting from an
    // incompleteness in our implementation, as explained above).
    // Depending on b'', we either got (back) permissions to x.g or to x.h.
    // The current state thus satisfies:
    //
    //   acc(x.f) * x.f == b'' * (!b' ? acc(x.g) : acc(x.h)) *
    //     (b'' ? acc(x.g) : acc(x.h))
    //
    // In contrast to the situation above, however, this time we are (and the
    // verifier is, too) able to deduce that we are now back in a state that
    // satisfies the following assertion:
    //
    //   acc(x.f) * acc(x.g) * acc(x.h)
    //
    // The reason for this is the separating conjunction, in particular, the
    // fact that acc(x.f) * acc(x.f) is equivalent to false. Let us consider
    // the truth table for b' and b'' (where t/f stand for true/false), and 
    // the implications of the their values on the assertion from above (the 
    // one after the apply statement; ignoring x.f):
    //    
    //     b' | b'' | assertion
    //   -----------------------------------
    //     t  |  t  | acc(x.h) * acc(x.g)
    //     t  |  f  | acc(x.h) * acc(x.h)
    //     f  |  t  | acc(x.g) * acc(x.g)
    //     f  |  f  | acc(x.g) * acc(x.h)
    //   -----------------------------------
    //
    // Hence, we now know that the footprint of the wand we packaged and
    // applied either comprised acc(x.g) or acc(x.h), but not both, and that
    // we are now again in a state where we hold permissions to all three
    // fields.
    
  assert acc(x.f) && acc(x.g) && acc(x.h)
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axUnitJoinable { forall p: Perm :: {joinable(p, unit())} joinable(p, unit())}
    axiom axJoinableComm { forall p: Perm, q: Perm :: {joinable(p, q)} joinable(p, q) == joinable(q, p)}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}

    axiom axGeqPlus { forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(a, x)}
    axiom axGeqMinus {forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) && joinable(x, y) <==> geq(minus(a, y), x) && geq(a, y)}

}
