// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

/* This example illustrates the behaviour of conditionals on the RHS
 * of a wand, in particular, which uncertainties are caused when the
 * footprint of a wand is affected by locations to which permissions
 * are provided by the LHS.
 */

field f: Bool
field g: Int
field h: Ref

method conditionals01(x: Ref)
  requires acc(x.f) && acc(x.g)
{
  define A acc(x.f)
  define B acc(x.f) && (x.f ==> acc(x.g))

    // The current state holds permissions to x.f and x.g, and x.f has some
    // unknown value b (the value of x.g is irrelevant). The current state
    // thus satisfies the assertion:
    //
    //   acc(x.f) * x.f == b * acc(x.g)

  package A --* B
    // The LHS provides a hypothetical state in which x.f has some value b'.
    // Since the value of b' is unknown, acc(x.g) is effectively part of the
    // footprint of the wand. The current state now satisfies:
    //
    //   acc(x.f) * x.f == b * (!b' ==> acc(x.g)) * (A --* B)

  apply A --* B
    // Applying the wand instance requires giving up permissions to x.f, but
    // we gain them back right away. x.f has an unknown value b'' (in 
    // principle, this should be the same unknown value b as before the 
    // apply; see regression/issue024.vpr for a discussion of this issue).
    // Depending on b'' (i.e. the value of x.f), we potentially also got 
    // permissions to x.g from the apply. The current state thus satisfies:
    //
    //   acc(x.f) * x.f == b'' * (!b' ==> acc(x.g)) * (b'' ==> acc(x.g))
    //
    // The third conjunct is essentially garbage since we will not be able to
    // deduce anything about b'.

  if (x.f) {
    // We gained clarity about the value b'' that x.f has, resulting in:
    //
    //   acc(x.f) * x.f == true * acc(x.g)
    assert acc(x.g)
  }

  // assert acc(x.g) // Will (and must) fail
}

method conditionals02(x: Ref)
  requires acc(x.f) && acc(x.g, write) && acc(x.h, write)
{
  define A acc(x.f)
  define B acc(x.f) && (x.f ? acc(x.g) : acc(x.h))

    // The current state holds permissions to x.f, x.g and x.h, and x.f has 
    // some unknown value b (the other values are irrelevant).
    // The current state thus satisfies the assertion:
    //
    //   acc(x.f) * x.f == b * acc(x.g) * acc(x.h)

  package A --* B
    // The LHS provides a hypothetical state in which x.f has some value b'.
    // Since the value of b' is unknown, both acc(x.g) and acc(x.h) must be 
    // part of the footprint of the wand. The current state thus satisfies:
    //
    //   acc(x.f) * x.f == b * (!b' ? acc(x.g) : acc(x.h)) * (A --* B)
    
  apply A --* B
    // After applying the wand, x.f has an unknown value b'' (resulting from an
    // incompleteness in our implementation, as explained above).
    // Depending on b'', we either got (back) permissions to x.g or to x.h.
    // The current state thus satisfies:
    //
    //   acc(x.f) * x.f == b'' * (!b' ? acc(x.g) : acc(x.h)) *
    //     (b'' ? acc(x.g) : acc(x.h))
    //
    // In contrast to the situation above, however, this time we are (and the
    // verifier is, too) able to deduce that we are now back in a state that
    // satisfies the following assertion:
    //
    //   acc(x.f) * acc(x.g) * acc(x.h)
    //
    // The reason for this is the separating conjunction, in particular, the
    // fact that acc(x.f) * acc(x.f) is equivalent to false. Let us consider
    // the truth table for b' and b'' (where t/f stand for true/false), and 
    // the implications of the their values on the assertion from above (the 
    // one after the apply statement; ignoring x.f):
    //    
    //     b' | b'' | assertion
    //   -----------------------------------
    //     t  |  t  | acc(x.h) * acc(x.g)
    //     t  |  f  | acc(x.h) * acc(x.h)
    //     f  |  t  | acc(x.g) * acc(x.g)
    //     f  |  f  | acc(x.g) * acc(x.h)
    //   -----------------------------------
    //
    // Hence, we now know that the footprint of the wand we packaged and
    // applied either comprised acc(x.g) or acc(x.h), but not both, and that
    // we are now again in a state where we hold permissions to all three
    // fields.
    
  assert acc(x.f) && acc(x.g) && acc(x.h)
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(_x: Perm, _y: Perm): Perm
    function minus(_x: Perm, _y: Perm): Perm
    function geq(_x: Perm, _y: Perm): Bool
    function joinable(_x: Perm, _y: Perm): Bool

    function times(_x: Perm, _y: Perm): Perm

    //Auxiliary functions
    function share(_x: Rational): Perm
    function valid_share(_x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall _a: Int, _b: Int :: {biConstr(_a, _b)} biConstr(_a, _b) == share(_a/_b)}


    axiom axValid { forall _x: Rational :: {valid_share(_x)}
        valid_share(_x) <==> (_x >= 0/1 && _x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall _a: Rational, _b: Rational :: { share(_a), share(_b) }
        share(_a) == share(_b) ==> _a == _b
    }
    axiom axPlus { forall _a: Rational, _b: Rational :: { plus(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) ==> plus(share(_a), share(_b)) == share(_a + _b)
    }
    axiom axMinus { forall _a: Rational, _b: Rational :: { minus(share(_a), share(_b)) }
        geq(share(_a), share(_b)) ==> minus(share(_a), share(_b)) == share(_a - _b)
    }
    axiom axCanJoin { forall _a: Rational, _b: Rational :: { joinable(share(_a), share(_b)) }
        valid_share(_a) && valid_share(_b) ==> (joinable(share(_a), share(_b)) == valid_share(_a + _b))
    }
    axiom axGeq { forall _a: Rational, _b: Rational :: { geq(share(_a), share(_b)) }
        valid_share(_a) && valid_share(_b) ==> (geq(share(_a), share(_b)) <==> valid_share(_a - _b))
    }
    axiom axMul { forall _a: Rational, _b: Rational :: {times(share(_a), share(_b))} times(share(_a), share(_b)) == share(_a * _b)}

    axiom axJoinComm {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == plus(_q, _p)}
    axiom axJoinAssoc {forall _p: Perm, _q: Perm, _r: Perm :: {plus(plus(_p, _q), _r)} plus(plus(_p, _q), _r) == plus(_p, plus(_q, _r))}
    axiom axJoinCancel { forall _p: Perm, _q: Perm, _x: Perm :: {plus(_p, _x), plus(_q, _x)} plus(_p, _x) == plus(_q, _x) ==> _p == _q}

    axiom axUnitGeq { forall _p: Perm :: {geq(_p, unit())} geq(_p, unit())}
    axiom axUnitGeq2 { forall _p: Perm :: {geq(unit(),_p)} geq(unit(),_p) <==> _p == unit()}
    axiom axFullGeq { forall _p: Perm :: {geq(full(),_p)} geq(full(),_p)}
    axiom axFullGeq2 { forall _p: Perm :: {geq(_p, full())} geq(_p, full()) <==> _p == full()}
    axiom axGeqId { forall _p: Perm :: {geq(_p, _p)} geq(_p, _p)}
    axiom axMinusId { forall _p: Perm :: {minus(_p, _p)} minus(_p, _p) == unit()}


    axiom axUnitJoin { forall _p: Perm :: {plus(unit(),_p)} plus(unit(),_p) == _p}
    axiom axUnitJoinable { forall _p: Perm :: {joinable(_p, unit())} joinable(_p, unit())}
    axiom axJoinableComm { forall _p: Perm, _q: Perm :: {joinable(_p, _q)} joinable(_p, _q) == joinable(_q,_p)}
    axiom axTimes0 { forall _p: Perm :: {times(unit(),_p)} times(unit(),_p) == unit()}
    axiom axTimes1 { forall _p: Perm :: {times(full(),_p)} times(full(),_p) == _p}

    axiom axGeqPlus { forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(_a, _x)}
    axiom axGeqMinus {forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(minus(_a, _y), _x)}
    axiom axMinusUneq { forall _p: Perm, _q: Perm :: {geq(_p, _q)} geq(_p, _q) && _p != _q ==> minus(_p, _q) != unit()}

    axiom axPositive {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == unit() ==> _p == unit() && _q == unit()}
    axiom axPlusGeq {forall _p: Perm, _q: Perm :: {geq(plus(_p, _q), _p)} /*joinable(_p, _q) ==>*/ geq(plus(_p, _q), _p)}
    axiom axMinusCancel {forall _p: Perm, _q: Perm :: {minus(plus(_p, _q), _q)} minus(plus(_p, _q), _q) == _p}

}


domain _Scalar { //Fractional scalars
    function zeroS(): Scalar 
    function oneS(): Scalar
    function plusS(_x: Scalar, _y: Scalar): Scalar
    function minusS(_x: Scalar, _y: Scalar): Scalar
    function geqS(_x: Scalar, _y: Scalar): Bool
    //function joinable(_x: Perm, _y: Perm): Bool //not needed, joinability depends on perms' joinable predicate

    function timesS(_x: Scalar, _y: Scalar): Scalar
    function applyS(_x: Scalar, _y: Perm): Perm
    //Auxiliary functions
//Integer scalars
    function stack(_r: Rational) : Scalar
    axiom axStack0 { stack(0/1) == zeroS()}
    axiom axStack1 { stack(1/1) == oneS() }
    axiom axPlusStack { forall _n: Rational, _m: Rational :: {plusS(stack(_n), stack(_m))} _m >= 0/1 ==> _n >= 0/1 ==> plusS(stack(_n), stack(_m)) == stack(_m + _n)}
    axiom axGeqStack { forall _n: Rational, _m: Rational :: {geqS(stack(_n), stack(_m))} _m >= 0/1 ==> _n >= 0/1 ==> geqS(stack(_n), stack(_m)) <==> _n >= _m}
    axiom axMinusStack { forall _n: Rational, _m: Rational ::{minusS(stack(_n), stack(_m))} _m >= 0/1 ==> _n >= 0/1 ==> geqS(stack(_n), stack(_m)) ==> minusS(stack(_n), stack(_m)) == stack(_n - _m)}
    axiom axStackApply { forall _p: Rational, _n: Rational :: {applyS(stack(_n), share(_p))} valid_share(_n * _p) ==> applyS(stack(_n), share(_p)) == share(_n * _p)}
    axiom axStackTimes { forall _n: Rational, _m: Rational :: {timesS(stack(_n), stack(_m))} _m >= 0/1 ==> _n >= 0/1 ==> timesS(stack(_n), stack(_m)) == stack(_m * _n)}

//PLUS
    axiom axPlusZero{ forall _s: Scalar :: {plusS(zeroS(),_s)} plusS(zeroS(),_s) == _s}
    axiom axPlusComm {forall _s: Scalar, _t: Scalar :: {plusS(_s, _t)} plusS(_s, _t) == plusS(_t, _s)}

//APPLY
//one = identity function, zero = constant unit() function
    axiom applyZero { forall _p: Perm :: {applyS(zeroS(), _p)} applyS(zeroS(), _p) == unit() }
    axiom applyOne { forall _p: Perm :: {applyS(oneS(), _p)} applyS(oneS(), _p) == _p }


//TIMES

    axiom axTimes0S { forall _s: Scalar :: {timesS(zeroS(), _s)} timesS(zeroS(),_s) == zeroS()}
    axiom axTimes1S { forall _s: Scalar :: {timesS(oneS(),_s)} timesS(oneS(),_s) == _s}
    axiom axTimesComm {forall _s: Scalar, _t: Scalar :: {timesS(_s, _t)} timesS(_s, _t) == timesS(_t, _s)}

//GEQ
    axiom axGeqZero { forall _s: Scalar :: {geqS(_s, zeroS())} geqS(_s, zeroS())}
//MINUS
    axiom axMinusZero { forall _s: Scalar :: {geqS(_s, zeroS())} geqS(_s, zeroS())}

    //additional axioms
    axiom axGeqPlusS { forall _a: Scalar, _x: Scalar, _y: Scalar :: {geqS(_a, plusS(_x, _y))} geqS(_a, plusS(_x, _y)) ==> geqS(_a, _x)}
    axiom axgeqSMinusS {forall _a: Scalar, _x: Scalar, _y: Scalar :: {geqS(_a, plusS(_x, _y))} geqS(_a, plusS(_x, _y)) ==> geqS(minusS(_a, _y), _x)}
    axiom axMinusUneqS { forall _p: Scalar, _q: Scalar :: {geqS(_p, _q)} geqS(_p, _q) && _p != _q ==> minusS(_p, _q) != zeroS()}

    axiom axPositiveS {forall _p: Scalar, _q: Scalar :: {plusS(_p, _q)} plusS(_p, _q) == zeroS() ==> _p == zeroS() && _q == zeroS()}
    axiom axPlusgeqS {forall _p: Scalar, _q: Scalar :: {geqS(plusS(_p, _q), _p)}geqS(plusS(_p, _q), _p)}
    axiom axMinusCancelS {forall _p: Scalar, _q: Scalar :: {minusS(plusS(_p, _q), _q)} minusS(plusS(_p, _q), _q) == _p}

}