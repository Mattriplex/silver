// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field f: Bool
field g: Int
field h: Ref

predicate P(x: Ref, b: Bool) { b ? acc(x.f, 5/10) : acc(x.g, 5/10) }

method test01(x: Ref, b1: Bool, b2: Bool) {
  inhale acc(x.f) && acc(x.g)

  package (b1 ? acc(x.f, 1/10) : acc(x.g, 1/10)) --* true
}

method test03(x: Ref, b1: Bool, b2: Bool) {
  inhale acc(x.f) && acc(x.g)

  package
    true
      --*
    (b1 ==> acc(x.g, 1/10) && acc(x.g, 1/10))

  assert perm(x.g) >= (!b1 ? write : 8/10)
  //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/104/)
  assert perm(x.g) == (!b1 ? write : 8/10)
}

method test05(x: Ref, b: Bool) {
  inhale acc(x.f) && acc(x.g)

  package true --*    acc(x.f, 1/10)
                   && acc(x.g, 1/10)
                   && acc(x.f, 1/10)
                   && (b ==> acc(x.g, 1/10))
                   && acc(x.f, 1/10)

  assert perm(x.f) >= 7/10
  assert perm(x.g) >=(b ? 8/10 : 9/10)
  //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/104/)
  assert perm(x.f) == 7/10
  assert perm(x.g) ==(b ? 8/10 : 9/10)
}

method test02(x: Ref, b1: Bool, b2: Bool) {
  inhale acc(x.f) && acc(x.g)

  package
    (b1 ? acc(x.f, 1/10) : acc(x.g, 1/10))
      --*
       (!b1 ? (acc(x.f, 1/10) && acc(x.f, 1/10))
            : (acc(x.g, 1/10) && acc(x.g, 1/10)))
    && ( b2 ? acc(x.f, 2/10)
            : acc(x.g, 2/10))

  assert  b1 &&  b2 ==> perm(x.f) >=  9/10 && perm(x.g) >=  8/10
  assert  b1 && !b2 ==> perm(x.f) >= 10/10 && perm(x.g) >=  6/10
  assert !b1 &&  b2 ==> perm(x.f) >=  6/10 && perm(x.g) >= 10/10
  assert !b1 && !b2 ==> perm(x.f) >=  8/10 && perm(x.g) >=  9/10
  //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/104/)
  assert  b1 &&  b2 ==> perm(x.f) ==  9/10 && perm(x.g) ==  8/10
  //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/104/)
  assert  b1 && !b2 ==> perm(x.f) == 10/10 && perm(x.g) ==  6/10
  //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/104/)
  assert !b1 &&  b2 ==> perm(x.f) ==  6/10 && perm(x.g) == 10/10
  //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/104/)
  assert !b1 && !b2 ==> perm(x.f) ==  8/10 && perm(x.g) ==  9/10

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}

method test04(x: Ref, b1: Bool, b2: Bool, b3: Bool) {
  inhale acc(x.f, 5/10) && acc(x.g, 5/10)
  inhale acc(P(x, b2))

  package
    (b1 ? acc(x.f, 1/10) : acc(x.g, 1/10))
      --* acc(x.f, 2/10)
          && acc(x.g, 2/10)
          && (b3 ? acc(x.f, 3/10) : acc(x.g, 3/10)) {
            unfold P(x, b2)
          }

  assert  b1 &&  b2 &&  b3 ==> perm(x.f) >= 5/10 && perm(x.g) >= 3/10
  assert  b1 &&  b2 && !b3 ==> perm(x.f) >= 5/10 && perm(x.g) >= none
  assert  b1 && !b2 &&  b3 ==> perm(x.f) >= 1/10 && perm(x.g) >= 5/10
  assert  b1 && !b2 && !b3 ==> perm(x.f) >= 4/10 && perm(x.g) >= 5/10

  assert !b1 &&  b2 &&  b3 ==> perm(x.f) >= 5/10 && perm(x.g) >= 4/10
  assert !b1 &&  b2 && !b3 ==> perm(x.f) >= 5/10 && perm(x.g) >= 1/10
  assert !b1 && !b2 &&  b3 ==> perm(x.f) >= none && perm(x.g) >= 5/10
  assert !b1 && !b2 && !b3 ==> perm(x.f) >= 3/10 && perm(x.g) >= 5/10

  //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/266/)
  assert  b1 &&  b2 &&  b3 ==> perm(x.f) == 5/10 && perm(x.g) == 3/10
  //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/266/)
  assert  b1 &&  b2 && !b3 ==> perm(x.f) == 5/10 && perm(x.g) == none
  //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/104/)
  assert  b1 && !b2 &&  b3 ==> perm(x.f) == 1/10 && perm(x.g) == 5/10
  //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/104/)
  assert  b1 && !b2 && !b3 ==> perm(x.f) == 4/10 && perm(x.g) == 5/10

  //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/266/)
  assert !b1 &&  b2 &&  b3 ==> perm(x.f) == 5/10 && perm(x.g) == 4/10
  //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/266/)
  assert !b1 &&  b2 && !b3 ==> perm(x.f) == 5/10 && perm(x.g) == 1/10
  //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/104/)
  assert !b1 && !b2 &&  b3 ==> perm(x.f) == none && perm(x.g) == 5/10
  //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/104/)
  assert !b1 && !b2 && !b3 ==> perm(x.f) == 3/10 && perm(x.g) == 5/10

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert !b1 && !b2 && !b3 ==> false
}

method test08(x: Ref, b: Bool) {
  inhale acc(x.f, 5/10)
  inhale acc(P(x, b))

  package
    true
      --*
    b ==> acc(x.f, 8/10) {
      unfold acc(P(x, b))
    }

  assert b ==> perm(x.f) >= 2/10
  assert perm(x.g) >= none
  //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/104/)
  assert b ==> perm(x.f) == 2/10
  assert perm(x.g) == none
}

method test09(x: Ref, b: Bool) {
  inhale acc(x.f, 5/10)

  package
    true
      --*
    true {
      package true --* acc(x.f, 2/10)
    }

  assert perm(x.f) >= 3/10
  //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/104/)
  assert perm(x.f) == 3/10
}

method test10(x: Ref) {
  inhale acc(x.f, 5/10)

  package
    acc(x.f, 5/10)
      --*
    true {
      package true --* acc(x.f, 2/10)
    }

  assert perm(x.f) >= 5/10
  assert perm(x.f) == 5/10
}

method test07(x: Ref, b1: Bool, b2: Bool) {
  inhale acc(x.f, 5/10)
  inhale acc(P(x, b1))

  package
    true
      --*
    b1 ==> acc(x.f, 8/10) {
      unfold acc(P(x, b1))
      package true --* b2 ==> acc(x.f, 2/10)
    }

  assert  b1 &&  b2 ==> perm(x.f) >= none
  assert  b1 && !b2 ==> perm(x.f) >= 2/10
  assert !b1 &&  b2 ==> perm(x.f) >= 3/10
  assert !b1 && !b2 ==> perm(x.f) >= 5/10
  //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/104/)
  assert  b1 &&  b2 ==> perm(x.f) == none
  //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/104/)
  assert  b1 && !b2 ==> perm(x.f) == 2/10
  //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/104/)
  assert !b1 &&  b2 ==> perm(x.f) == 3/10
  assert !b1 && !b2 ==> perm(x.f) == 5/10
}

method curry_test03(x: Ref) {
  define C acc(x.f)

  inhale C
  inhale true --* C

  package true --* true {
    package true --* C {
      apply true --* C
    }
  }

  exhale true --* true
  exhale C

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}


method test06(x: Ref, b1: Bool, b2: Bool, b3: Bool) {
  inhale acc(x.f, 5/10) && acc(x.g, 5/10)
  inhale acc(P(x, b2))

  package
    (b1 ? acc(x.f, 1/10) : acc(x.g, 1/10))
      --*
    (b1 && b2) ? acc(x.f, 8/10) : acc(x.g, 3/10) {
      unfold acc(P(x, b2))
      package (b2 ==> acc(x.g, 1/10)) --* (b3 ? acc(x.f, 2/10) : acc(x.g, 1/10))
    }

  assert  b1 &&  b2 &&  b3 ==> perm(x.f) >= 1/10 && perm(x.g) >= 5/10
  assert  b1 &&  b2 && !b3 ==> perm(x.f) >= 3/10 && perm(x.g) >= 5/10
  assert  b1 && !b2 &&  b3 ==> perm(x.f) >= 4/10 && perm(x.g) >= 5/10
  assert  b1 && !b2 && !b3 ==> perm(x.f) >= 5/10 && perm(x.g) >= 5/10

  assert !b1 &&  b2 &&  b3 ==> perm(x.f) >= 5/10 && perm(x.g) >= 3/10
  assert !b1 &&  b2 && !b3 ==> perm(x.f) >= 5/10 && perm(x.g) >= 3/10
  assert !b1 && !b2 &&  b3 ==> perm(x.f) >= 3/10 && perm(x.g) >= 5/10
  assert !b1 && !b2 && !b3 ==> perm(x.f) >= 5/10 && perm(x.g) >= 5/10

  assert perm(P(x, b2)) >= none
  
  //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/104/)
  assert  b1 &&  b2 &&  b3 ==> perm(x.f) == 1/10 && perm(x.g) == 5/10
  //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/266/)
  assert  b1 &&  b2 && !b3 ==> perm(x.f) == 3/10 && perm(x.g) == 5/10
  //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/104/)
  assert  b1 && !b2 &&  b3 ==> perm(x.f) == 4/10 && perm(x.g) == 5/10
  assert  b1 && !b2 && !b3 ==> perm(x.f) == 5/10 && perm(x.g) == 5/10

  //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/104/)
  assert !b1 &&  b2 &&  b3 ==> perm(x.f) == 5/10 && perm(x.g) == 3/10
  //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/266/)
  assert !b1 &&  b2 && !b3 ==> perm(x.f) == 5/10 && perm(x.g) == 3/10
  //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/104/)
  assert !b1 && !b2 &&  b3 ==> perm(x.f) == 3/10 && perm(x.g) == 5/10
  assert !b1 && !b2 && !b3 ==> perm(x.f) == 5/10 && perm(x.g) == 5/10

  //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/104/)
  assert perm(P(x, b2)) == none
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(_x: Perm, _y: Perm): Perm
    function minus(_x: Perm, _y: Perm): Perm
    function geq(_x: Perm, _y: Perm): Bool
    function joinable(_x: Perm, _y: Perm): Bool

    function times(_x: Perm, _y: Perm): Perm

    //Auxiliary functions
    function share(_x: Rational): Perm
    function valid_share(_x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall _a: Int, _b: Int :: {biConstr(_a, _b)} biConstr(_a, _b) == share(_a/_b)}


    axiom axValid { forall _x: Rational :: {valid_share(_x)}
        valid_share(_x) <==> (_x >= 0/1 && _x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall _a: Rational, _b: Rational :: { share(_a), share(_b) }
        share(_a) == share(_b) ==> _a == _b
    }
    axiom axPlus { forall _a: Rational, _b: Rational :: { plus(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) ==> plus(share(_a), share(_b)) == share(_a + _b)
    }
    axiom axMinus { forall _a: Rational, _b: Rational :: { minus(share(_a), share(_b)) }
        geq(share(_a), share(_b)) ==> minus(share(_a), share(_b)) == share(_a - _b)
    }
    axiom axCanJoin { forall _a: Rational, _b: Rational :: { joinable(share(_a), share(_b)) }
        valid_share(_a) && valid_share(_b) ==> (joinable(share(_a), share(_b)) == valid_share(_a + _b))
    }
    axiom axGeq { forall _a: Rational, _b: Rational :: { geq(share(_a), share(_b)) }
        valid_share(_a) && valid_share(_b) ==> (geq(share(_a), share(_b)) <==> valid_share(_a - _b))
    }
    axiom axMul { forall _a: Rational, _b: Rational :: {times(share(_a), share(_b))} times(share(_a), share(_b)) == share(_a * _b)}

    axiom axJoinComm {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == plus(_q, _p)}
    axiom axJoinAssoc {forall _p: Perm, _q: Perm, _r: Perm :: {plus(plus(_p, _q), _r)} plus(plus(_p, _q), _r) == plus(_p, plus(_q, _r))}
    axiom axJoinCancel { forall _p: Perm, _q: Perm, _x: Perm :: {plus(_p, _x), plus(_q, _x)} plus(_p, _x) == plus(_q, _x) ==> _p == _q}

    axiom axUnitGeq { forall _p: Perm :: {geq(_p, unit())} geq(_p, unit())}
    axiom axUnitGeq2 { forall _p: Perm :: {geq(unit(),_p)} geq(unit(),_p) <==> _p == unit()}
    axiom axFullGeq { forall _p: Perm :: {geq(full(),_p)} geq(full(),_p)}
    axiom axFullGeq2 { forall _p: Perm :: {geq(_p, full())} geq(_p, full()) <==> _p == full()}
    axiom axGeqId { forall _p: Perm :: {geq(_p, _p)} geq(_p, _p)}
    axiom axMinusId { forall _p: Perm :: {minus(_p, _p)} minus(_p, _p) == unit()}


    axiom axUnitJoin { forall _p: Perm :: {plus(unit(),_p)} plus(unit(),_p) == _p}
    axiom axUnitJoinable { forall _p: Perm :: {joinable(_p, unit())} joinable(_p, unit())}
    axiom axJoinableComm { forall _p: Perm, _q: Perm :: {joinable(_p, _q)} joinable(_p, _q) == joinable(_q,_p)}
    axiom axTimes0 { forall _p: Perm :: {times(unit(),_p)} times(unit(),_p) == unit()}
    axiom axTimes1 { forall _p: Perm :: {times(full(),_p)} times(full(),_p) == _p}

    axiom axGeqPlus { forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(_a, _x)}
    axiom axGeqMinus {forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(minus(_a, _y), _x)}
    axiom axMinusUneq { forall _p: Perm, _q: Perm :: {geq(_p, _q)} geq(_p, _q) && _p != _q ==> minus(_p, _q) != unit()}

    axiom axPositive {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == unit() ==> _p == unit() && _q == unit()}
    axiom axPlusGeq {forall _p: Perm, _q: Perm :: {geq(plus(_p, _q), _p)} /*joinable(_p, _q) ==>*/ geq(plus(_p, _q), _p)}
    axiom axMinusCancel {forall _p: Perm, _q: Perm :: {minus(plus(_p, _q), _q)} minus(plus(_p, _q), _q) == _p}

}
