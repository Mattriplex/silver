// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field f: Bool
field g: Int
field h: Ref

predicate P(x: Ref, b: Bool) { b ? acc(x.f, 5/10) : acc(x.g, 5/10) }

method test01(x: Ref, b1: Bool, b2: Bool) {
  inhale acc(x.f) && acc(x.g)

  package (b1 ? acc(x.f, 1/10) : acc(x.g, 1/10)) --* true
}

method test03(x: Ref, b1: Bool, b2: Bool) {
  inhale acc(x.f) && acc(x.g)

  package
    true
      --*
    (b1 ==> acc(x.g, 1/10) && acc(x.g, 1/10))

  assert perm(x.g) >= (!b1 ? write : 8/10)
  //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/104/)
  assert perm(x.g) == (!b1 ? write : 8/10)
}

method test05(x: Ref, b: Bool) {
  inhale acc(x.f) && acc(x.g)

  package true --*    acc(x.f, 1/10)
                   && acc(x.g, 1/10)
                   && acc(x.f, 1/10)
                   && (b ==> acc(x.g, 1/10))
                   && acc(x.f, 1/10)

  assert perm(x.f) >= 7/10
  assert perm(x.g) >=(b ? 8/10 : 9/10)
  //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/104/)
  assert perm(x.f) == 7/10
  assert perm(x.g) ==(b ? 8/10 : 9/10)
}

method test02(x: Ref, b1: Bool, b2: Bool) {
  inhale acc(x.f) && acc(x.g)

  package
    (b1 ? acc(x.f, 1/10) : acc(x.g, 1/10))
      --*
       (!b1 ? (acc(x.f, 1/10) && acc(x.f, 1/10))
            : (acc(x.g, 1/10) && acc(x.g, 1/10)))
    && ( b2 ? acc(x.f, 2/10)
            : acc(x.g, 2/10))

  assert  b1 &&  b2 ==> perm(x.f) >=  9/10 && perm(x.g) >=  8/10
  assert  b1 && !b2 ==> perm(x.f) >= 10/10 && perm(x.g) >=  6/10
  assert !b1 &&  b2 ==> perm(x.f) >=  6/10 && perm(x.g) >= 10/10
  assert !b1 && !b2 ==> perm(x.f) >=  8/10 && perm(x.g) >=  9/10
  //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/104/)
  assert  b1 &&  b2 ==> perm(x.f) ==  9/10 && perm(x.g) ==  8/10
  //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/104/)
  assert  b1 && !b2 ==> perm(x.f) == 10/10 && perm(x.g) ==  6/10
  //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/104/)
  assert !b1 &&  b2 ==> perm(x.f) ==  6/10 && perm(x.g) == 10/10
  //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/104/)
  assert !b1 && !b2 ==> perm(x.f) ==  8/10 && perm(x.g) ==  9/10

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}

method test04(x: Ref, b1: Bool, b2: Bool, b3: Bool) {
  inhale acc(x.f, 5/10) && acc(x.g, 5/10)
  inhale acc(P(x, b2))

  package
    (b1 ? acc(x.f, 1/10) : acc(x.g, 1/10))
      --* acc(x.f, 2/10)
          && acc(x.g, 2/10)
          && (b3 ? acc(x.f, 3/10) : acc(x.g, 3/10)) {
            unfold P(x, b2)
          }

  assert  b1 &&  b2 &&  b3 ==> perm(x.f) >= 5/10 && perm(x.g) >= 3/10
  assert  b1 &&  b2 && !b3 ==> perm(x.f) >= 5/10 && perm(x.g) >= none
  assert  b1 && !b2 &&  b3 ==> perm(x.f) >= 1/10 && perm(x.g) >= 5/10
  assert  b1 && !b2 && !b3 ==> perm(x.f) >= 4/10 && perm(x.g) >= 5/10

  assert !b1 &&  b2 &&  b3 ==> perm(x.f) >= 5/10 && perm(x.g) >= 4/10
  assert !b1 &&  b2 && !b3 ==> perm(x.f) >= 5/10 && perm(x.g) >= 1/10
  assert !b1 && !b2 &&  b3 ==> perm(x.f) >= none && perm(x.g) >= 5/10
  assert !b1 && !b2 && !b3 ==> perm(x.f) >= 3/10 && perm(x.g) >= 5/10

  //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/266/)
  assert  b1 &&  b2 &&  b3 ==> perm(x.f) == 5/10 && perm(x.g) == 3/10
  //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/266/)
  assert  b1 &&  b2 && !b3 ==> perm(x.f) == 5/10 && perm(x.g) == none
  //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/104/)
  assert  b1 && !b2 &&  b3 ==> perm(x.f) == 1/10 && perm(x.g) == 5/10
  //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/104/)
  assert  b1 && !b2 && !b3 ==> perm(x.f) == 4/10 && perm(x.g) == 5/10

  //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/266/)
  assert !b1 &&  b2 &&  b3 ==> perm(x.f) == 5/10 && perm(x.g) == 4/10
  //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/266/)
  assert !b1 &&  b2 && !b3 ==> perm(x.f) == 5/10 && perm(x.g) == 1/10
  //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/104/)
  assert !b1 && !b2 &&  b3 ==> perm(x.f) == none && perm(x.g) == 5/10
  //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/104/)
  assert !b1 && !b2 && !b3 ==> perm(x.f) == 3/10 && perm(x.g) == 5/10

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert !b1 && !b2 && !b3 ==> false
}

method test08(x: Ref, b: Bool) {
  inhale acc(x.f, 5/10)
  inhale acc(P(x, b))

  package
    true
      --*
    b ==> acc(x.f, 8/10) {
      unfold acc(P(x, b))
    }

  assert b ==> perm(x.f) >= 2/10
  assert perm(x.g) >= none
  //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/104/)
  assert b ==> perm(x.f) == 2/10
  assert perm(x.g) == none
}

method test09(x: Ref, b: Bool) {
  inhale acc(x.f, 5/10)

  package
    true
      --*
    true {
      package true --* acc(x.f, 2/10)
    }

  assert perm(x.f) >= 3/10
  //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/104/)
  assert perm(x.f) == 3/10
}

method test10(x: Ref) {
  inhale acc(x.f, 5/10)

  package
    acc(x.f, 5/10)
      --*
    true {
      package true --* acc(x.f, 2/10)
    }

  assert perm(x.f) >= 5/10
  assert perm(x.f) == 5/10
}

method test07(x: Ref, b1: Bool, b2: Bool) {
  inhale acc(x.f, 5/10)
  inhale acc(P(x, b1))

  package
    true
      --*
    b1 ==> acc(x.f, 8/10) {
      unfold acc(P(x, b1))
      package true --* b2 ==> acc(x.f, 2/10)
    }

  assert  b1 &&  b2 ==> perm(x.f) >= none
  assert  b1 && !b2 ==> perm(x.f) >= 2/10
  assert !b1 &&  b2 ==> perm(x.f) >= 3/10
  assert !b1 && !b2 ==> perm(x.f) >= 5/10
  //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/104/)
  assert  b1 &&  b2 ==> perm(x.f) == none
  //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/104/)
  assert  b1 && !b2 ==> perm(x.f) == 2/10
  //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/104/)
  assert !b1 &&  b2 ==> perm(x.f) == 3/10
  assert !b1 && !b2 ==> perm(x.f) == 5/10
}

method curry_test03(x: Ref) {
  define C acc(x.f)

  inhale C
  inhale true --* C

  package true --* true {
    package true --* C {
      apply true --* C
    }
  }

  exhale true --* true
  exhale C

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}


method test06(x: Ref, b1: Bool, b2: Bool, b3: Bool) {
  inhale acc(x.f, 5/10) && acc(x.g, 5/10)
  inhale acc(P(x, b2))

  package
    (b1 ? acc(x.f, 1/10) : acc(x.g, 1/10))
      --*
    (b1 && b2) ? acc(x.f, 8/10) : acc(x.g, 3/10) {
      unfold acc(P(x, b2))
      package (b2 ==> acc(x.g, 1/10)) --* (b3 ? acc(x.f, 2/10) : acc(x.g, 1/10))
    }

  assert  b1 &&  b2 &&  b3 ==> perm(x.f) >= 1/10 && perm(x.g) >= 5/10
  assert  b1 &&  b2 && !b3 ==> perm(x.f) >= 3/10 && perm(x.g) >= 5/10
  assert  b1 && !b2 &&  b3 ==> perm(x.f) >= 4/10 && perm(x.g) >= 5/10
  assert  b1 && !b2 && !b3 ==> perm(x.f) >= 5/10 && perm(x.g) >= 5/10

  assert !b1 &&  b2 &&  b3 ==> perm(x.f) >= 5/10 && perm(x.g) >= 3/10
  assert !b1 &&  b2 && !b3 ==> perm(x.f) >= 5/10 && perm(x.g) >= 3/10
  assert !b1 && !b2 &&  b3 ==> perm(x.f) >= 3/10 && perm(x.g) >= 5/10
  assert !b1 && !b2 && !b3 ==> perm(x.f) >= 5/10 && perm(x.g) >= 5/10

  assert perm(P(x, b2)) >= none
  
  //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/104/)
  assert  b1 &&  b2 &&  b3 ==> perm(x.f) == 1/10 && perm(x.g) == 5/10
  //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/266/)
  assert  b1 &&  b2 && !b3 ==> perm(x.f) == 3/10 && perm(x.g) == 5/10
  //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/104/)
  assert  b1 && !b2 &&  b3 ==> perm(x.f) == 4/10 && perm(x.g) == 5/10
  assert  b1 && !b2 && !b3 ==> perm(x.f) == 5/10 && perm(x.g) == 5/10

  //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/104/)
  assert !b1 &&  b2 &&  b3 ==> perm(x.f) == 5/10 && perm(x.g) == 3/10
  //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/266/)
  assert !b1 &&  b2 && !b3 ==> perm(x.f) == 5/10 && perm(x.g) == 3/10
  //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/104/)
  assert !b1 && !b2 &&  b3 ==> perm(x.f) == 3/10 && perm(x.g) == 5/10
  assert !b1 && !b2 && !b3 ==> perm(x.f) == 5/10 && perm(x.g) == 5/10

  //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/104/)
  assert perm(P(x, b2)) == none
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}
}
