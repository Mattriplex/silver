// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

predicate P()
predicate Q(b: Bool) { b ==> acc(P()) }

field val: Int
field next: Ref

method test01(b: Bool) {
  package (acc(Q(b)) && unfolding Q(b) in true) --* true
}

predicate LL(x: Ref) {
     acc(x.val)
  && acc(x.next)
  && (x.next != null ==> acc(LL(x.next)))
}

define A1
     acc(LL(x))
  && (unfolding LL(x) in x.val == 10)
  && (unfolding LL(x) in x.next != null ==> unfolding LL(x.next) in x.next.val == 20)

define B1 acc(LL(x))

method test04(x: Ref) {
  inhale acc(LL(x))
  package A1 --* B1

  //:: ExpectedOutput(apply.failed:assertion.false)
  apply A1 --* B1
}

method test05() {
  var x: Ref; var y: Ref
  x := new (*)
  y := new (*)
  x.next := y
  x.val := 10
  x.next.val := 20
  x.next.next := null
  fold LL(x.next)
  fold LL(x)

  package A1 --* B1
  apply A1 --* B1
}

method test06(x: Ref) {
  inhale A1
  inhale A1 --* B1
  apply A1 --* B1

  //:: UnexpectedOutput(assert.failed:assertion.false, /silicon/issue/304/)
  assert unfolding LL(x) in x.next != null ==> unfolding LL(x.next) in x.next.val == 2 * x.val
}

define B2
     acc(LL(x))
  && unfolding LL(x) in x.next != null ==> unfolding LL(x.next) in x.val < x.next.val

method test07(x: Ref) {
  package A1 --* B2

}

method test08(x: Ref) {
  inhale A1
  inhale A1 --* B2
  apply A1 --* B2

  assert unfolding LL(x) in x.next != null ==> unfolding LL(x.next) in x.val <= x.next.val
}

/*
 * Pure unfoldings that branched also crashed Silicon when they occurred on the right.
 */

method test02(b: Bool) {
  inhale acc(P())
  package (true) --* acc(Q(b)) {
      fold Q(b)
  }

  assert !b ==> acc(P())

  apply true --* acc(Q(b))
  assert acc(Q(b))

  //:: ExpectedOutput(assert.failed:insufficient.permission)
  assert acc(P())
}

predicate LLC(x: Ref, i: Int) {
     acc(x.val) && x.val == i
  && acc(x.next)
  && (x.next != null ==> acc(LLC(x.next, i + 1)))
}

method test03(x: Ref) {
  define X acc(LLC(x, 0))

  define Y
       acc(LLC(x, 0))
    && unfolding acc(LLC(x, 0)) in
       (x.next != null ==> unfolding acc(LLC(x.next, 1)) in
                           x.next.val == 1)

  package X --* Y

  inhale acc(LLC(x, 0))
  apply X --* Y

  assert acc(LLC(x, 0))

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axUnitJoinable { forall p: Perm :: {joinable(p, unit())} joinable(p, unit())}
    axiom axJoinableComm { forall p: Perm, q: Perm :: {joinable(p, q)} joinable(p, q) == joinable(q, p)}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}

    axiom axGeqPlus { forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(a, x)}
    axiom axGeqMinus {forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) <==> geq(minus(a, y), x)}

}
