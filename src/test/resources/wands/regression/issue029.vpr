// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

predicate P()
predicate Q(b: Bool) { b ==> acc(P()) }

field val: Int
field next: Ref

method test01(b: Bool) {
  package (acc(Q(b)) && unfolding Q(b) in true) --* true
}

predicate LL(x: Ref) {
     acc(x.val)
  && acc(x.next)
  && (x.next != null ==> acc(LL(x.next)))
}

define A1
     acc(LL(x))
  && (unfolding LL(x) in x.val == 10)
  && (unfolding LL(x) in x.next != null ==> unfolding LL(x.next) in x.next.val == 20)

define B1 acc(LL(x))

method test04(x: Ref) {
  inhale acc(LL(x))
  package A1 --* B1

  //:: ExpectedOutput(apply.failed:assertion.false)
  apply A1 --* B1
}

method test05() {
  var x: Ref; var y: Ref
  x := new (*)
  y := new (*)
  x.next := y
  x.val := 10
  x.next.val := 20
  x.next.next := null
  fold LL(x.next)
  fold LL(x)

  package A1 --* B1
  apply A1 --* B1
}

method test06(x: Ref) {
  inhale A1
  inhale A1 --* B1
  apply A1 --* B1

  //:: UnexpectedOutput(assert.failed:assertion.false, /silicon/issue/304/)
  assert unfolding LL(x) in x.next != null ==> unfolding LL(x.next) in x.next.val == 2 * x.val
}

define B2
     acc(LL(x))
  && unfolding LL(x) in x.next != null ==> unfolding LL(x.next) in x.val < x.next.val

method test07(x: Ref) {
  package A1 --* B2

}

method test08(x: Ref) {
  inhale A1
  inhale A1 --* B2
  apply A1 --* B2

  assert unfolding LL(x) in x.next != null ==> unfolding LL(x.next) in x.val <= x.next.val
}

/*
 * Pure unfoldings that branched also crashed Silicon when they occurred on the right.
 */

method test02(b: Bool) {
  inhale acc(P())
  package (true) --* acc(Q(b)) {
      fold Q(b)
  }

  assert !b ==> acc(P())

  apply true --* acc(Q(b))
  assert acc(Q(b))

  //:: ExpectedOutput(assert.failed:insufficient.permission)
  assert acc(P())
}

predicate LLC(x: Ref, i: Int) {
     acc(x.val) && x.val == i
  && acc(x.next)
  && (x.next != null ==> acc(LLC(x.next, i + 1)))
}

method test03(x: Ref) {
  define X acc(LLC(x, 0))

  define Y
       acc(LLC(x, 0))
    && unfolding acc(LLC(x, 0)) in
       (x.next != null ==> unfolding acc(LLC(x.next, 1)) in
                           x.next.val == 1)

  package X --* Y

  inhale acc(LLC(x, 0))
  apply X --* Y

  assert acc(LLC(x, 0))

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(_x: Perm, _y: Perm): Perm
    function minus(_x: Perm, _y: Perm): Perm
    function geq(_x: Perm, _y: Perm): Bool
    function joinable(_x: Perm, _y: Perm): Bool

    function times(_x: Perm, _y: Perm): Perm

    //Auxiliary functions
    function share(_x: Rational): Perm
    function valid_share(_x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall _a: Int, _b: Int :: {biConstr(_a, _b)} biConstr(_a, _b) == share(_a/_b)}


    axiom axValid { forall _x: Rational :: {valid_share(_x)}
        valid_share(_x) <==> (_x >= 0/1 && _x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall _a: Rational, _b: Rational :: { share(_a), share(_b) }
        share(_a) == share(_b) ==> _a == _b
    }
    axiom axPlus { forall _a: Rational, _b: Rational :: { plus(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) ==> plus(share(_a), share(_b)) == share(_a + _b)
    }
    axiom axMinus { forall _a: Rational, _b: Rational :: { minus(share(_a), share(_b)) }
        geq(share(_a), share(_b)) ==> minus(share(_a), share(_b)) == share(_a - _b)
    }
    axiom axCanJoin { forall _a: Rational, _b: Rational :: { joinable(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) <==> valid_share(_a) && valid_share(_b) && valid_share(_a + _b)
    }
    axiom axGeq { forall _a: Rational, _b: Rational :: { geq(share(_a), share(_b)) }
        geq(share(_a), share(_b)) <==> valid_share(_a) && valid_share(_b) && valid_share(_a - _b)
    }
    axiom axMul { forall _a: Rational, _b: Rational :: {times(share(_a), share(_b))} times(share(_a), share(_b)) == share(_a * _b)}

    axiom axJoinComm {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == plus(_q, _p)}
    axiom axJoinAssoc {forall _p: Perm, _q: Perm, _r: Perm :: {plus(plus(_p, _q), _r)} plus(plus(_p, _q), _r) == plus(_p, plus(_q, _r))}
    axiom axJoinCancel { forall _p: Perm, _q: Perm, _x: Perm :: {plus(_p, _x), plus(_q, _x)} plus(_p, _x) == plus(_q, _x) ==> _p == _q}

    axiom axUnitGeq { forall _p: Perm :: {geq(_p, unit())} geq(_p, unit())}
    axiom axUnitGeq2 { forall _p: Perm :: {geq(unit(),_p)} geq(unit(),_p) <==> _p == unit()}
    axiom axFullGeq { forall _p: Perm :: {geq(full(),_p)} geq(full(),_p)}
    axiom axFullGeq2 { forall _p: Perm :: {geq(_p, full())} geq(_p, full()) <==> _p == full()}
    axiom axGeqId { forall _p: Perm :: {geq(_p, _p)} geq(_p, _p)}
    axiom axMinusId { forall _p: Perm :: {minus(_p, _p)} minus(_p, _p) == unit()}


    axiom axUnitJoin { forall _p: Perm :: {plus(unit(),_p)} plus(unit(),_p) == _p}
    axiom axUnitJoinable { forall _p: Perm :: {joinable(_p, unit())} joinable(_p, unit())}
    axiom axJoinableComm { forall _p: Perm, _q: Perm :: {joinable(_p, _q)} joinable(_p, _q) == joinable(_q,_p)}
    axiom axTimes0 { forall _p: Perm :: {times(unit(),_p)} times(unit(),_p) == unit()}
    axiom axTimes1 { forall _p: Perm :: {times(full(),_p)} times(full(),_p) == _p}

    axiom axGeqPlus { forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(_a, _x)}
    axiom axGeqMinus {forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(minus(_a, _y), _x)}
    axiom axMinusUneq { forall _p: Perm, _q: Perm :: {geq(_p, _q)} geq(_p, _q) && _p != _q ==> minus(_p, _q) != unit()}

    axiom axPositive {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == unit() ==> _p == unit() && _q == unit()}
    axiom axPlusGeq {forall _p: Perm, _q: Perm :: {geq(plus(_p, _q), _p)} joinable(_p, _q) ==> geq(plus(_p, _q), _p)}
    axiom axMinusCancel {forall _p: Perm, _q: Perm :: {minus(plus(_p, _q), _q)} minus(plus(_p, _q), _q) == _p}

}
