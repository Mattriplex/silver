// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

//:: IgnoreFile(/carbon/issue/103/)

field __CONFIG_HEURISTICS: Bool

field f: Ref
field g: Int
field h: Int

method test01(x: Ref) {
  inhale true --* acc(x.f)

  inhale x != null /* TODO: Without it, the subsequent exhale fails because x
                    *       might be null, which doesn't trigger applying the
                    *       wand (which would yield the assumption that x != null)
                    */

  exhale acc(x.f)
}

method test02(x: Ref)
  requires true --* acc(x.f)
  requires x != null /* TODO: Try to make redundant */
{
  //:: ExpectedOutput(exhale.failed:insufficient.permission)
  exhale acc(x.f)
  exhale true --* acc(x.f) // This assertion fails after the heuristic applied the wand
}

//method test03(x: Ref, y: Ref)
//  requires true --* x == y
//{
//  exhale x == y
//  exhale true --* x == y /* Packaging-heuristics should take care of this */
//  //:: ExpectedOutput(assert.failed:assertion.false)
//  assert false
//}

method test04(x: Ref)
  requires x != null
  requires acc(x.f) --* acc(x.g) --* acc(x.h)
  requires acc(x.f) && acc(x.g)
{
//  apply acc(x.f) --* acc(x.g) --* acc(x.h)
//  apply acc(x.g) --* acc(x.h)

  exhale acc(x.h)
}

/* Currying-Uncurrying Example */

predicate P() { true }
predicate Q() { true }
predicate R() { true }

define A acc(P())
define B acc(Q())
define C acc(R())

/* A * B --* C  ==>  A --* B --* C */
method curry() {
  inhale A && B --* C

//  package A --* packaging (B --* applying (A && B --* C) in C) in B --* C

  /* Requires three nested levels of heuristics (package -> packaging -> applying) */
  exhale A --* (B --* C)
}

/* A --* B --* C  ==>  A * B --* C */
method uncurry(x: Ref) {
  inhale A --* (B --* C)

//  package A && B --* applying (A --* (B --* C)) in applying (B --* C) in C

  exhale A && B --* C
}

/* Regression tests related to curry/uncurry */

method test05 () {
  inhale true --* B
  exhale A --* B
}

method test06 (x: Ref) {
  inhale true --* (true --* C)
  exhale true --* C
}

method test07(x: Ref) {
  inhale A --* (true --* C)
  exhale A --* C
}

method test08(x: Ref) {
  inhale true --* (B --* true)

  package (B) --* true {
      apply B --* true
  }

  exhale B --* true
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(_x: Perm, _y: Perm): Perm
    function minus(_x: Perm, _y: Perm): Perm
    function geq(_x: Perm, _y: Perm): Bool
    function joinable(_x: Perm, _y: Perm): Bool

    function times(_x: Perm, _y: Perm): Perm

    //Auxiliary functions
    function share(_x: Rational): Perm
    function valid_share(_x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall _a: Int, _b: Int :: {biConstr(_a, _b)} biConstr(_a, _b) == share(_a/_b)}


    axiom axValid { forall _x: Rational :: {valid_share(_x)}
        valid_share(_x) <==> (_x >= 0/1 && _x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall _a: Rational, _b: Rational :: { share(_a), share(_b) }
        share(_a) == share(_b) ==> _a == _b
    }
    axiom axPlus { forall _a: Rational, _b: Rational :: { plus(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) ==> plus(share(_a), share(_b)) == share(_a + _b)
    }
    axiom axMinus { forall _a: Rational, _b: Rational :: { minus(share(_a), share(_b)) }
        geq(share(_a), share(_b)) ==> minus(share(_a), share(_b)) == share(_a - _b)
    }
    axiom axCanJoin { forall _a: Rational, _b: Rational :: { joinable(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) <==> valid_share(_a) && valid_share(_b) && valid_share(_a + _b)
    }
    axiom axGeq { forall _a: Rational, _b: Rational :: { geq(share(_a), share(_b)) }
        geq(share(_a), share(_b)) <==> valid_share(_a) && valid_share(_b) && valid_share(_a - _b)
    }
    axiom axMul { forall _a: Rational, _b: Rational :: {times(share(_a), share(_b))} times(share(_a), share(_b)) == share(_a * _b)}

    axiom axJoinComm {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == plus(_q, _p)}
    axiom axJoinAssoc {forall _p: Perm, _q: Perm, _r: Perm :: {plus(plus(_p, _q), _r)} plus(plus(_p, _q), _r) == plus(_p, plus(_q, _r))}
    axiom axJoinCancel { forall _p: Perm, _q: Perm, _x: Perm :: {plus(_p, _x), plus(_q, _x)} plus(_p, _x) == plus(_q, _x) ==> _p == _q}

    axiom axUnitGeq { forall _p: Perm :: {geq(_p, unit())} geq(_p, unit())}
    axiom axUnitGeq2 { forall _p: Perm :: {geq(unit(),_p)} geq(unit(),_p) <==> _p == unit()}
    axiom axFullGeq { forall _p: Perm :: {geq(full(),_p)} geq(full(),_p)}
    axiom axFullGeq2 { forall _p: Perm :: {geq(_p, full())} geq(_p, full()) <==> _p == full()}
    axiom axGeqId { forall _p: Perm :: {geq(_p, _p)} geq(_p, _p)}
    axiom axMinusId { forall _p: Perm :: {minus(_p, _p)} minus(_p, _p) == unit()}


    axiom axUnitJoin { forall _p: Perm :: {plus(unit(),_p)} plus(unit(),_p) == _p}
    axiom axUnitJoinable { forall _p: Perm :: {joinable(_p, unit())} joinable(_p, unit())}
    axiom axJoinableComm { forall _p: Perm, _q: Perm :: {joinable(_p, _q)} joinable(_p, _q) == joinable(_q,_p)}
    axiom axTimes0 { forall _p: Perm :: {times(unit(),_p)} times(unit(),_p) == unit()}
    axiom axTimes1 { forall _p: Perm :: {times(full(),_p)} times(full(),_p) == _p}

    axiom axGeqPlus { forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(_a, _x)}
    axiom axGeqMinus {forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(minus(_a, _y), _x)}
    axiom axMinusUneq { forall _p: Perm, _q: Perm :: {geq(_p, _q)} geq(_p, _q) && _p != _q ==> minus(_p, _q) != unit()}

    axiom axPositive {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == unit() ==> _p == unit() && _q == unit()}
    axiom axPlusGeq {forall _p: Perm, _q: Perm :: {geq(plus(_p, _q), _p)} joinable(_p, _q) ==> geq(plus(_p, _q), _p)}
    axiom axMinusCancel {forall _p: Perm, _q: Perm :: {minus(plus(_p, _q), _q)} minus(plus(_p, _q), _q) == _p}

}
