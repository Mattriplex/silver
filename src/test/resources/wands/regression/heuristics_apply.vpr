// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

//:: IgnoreFile(/carbon/issue/103/)

field __CONFIG_HEURISTICS: Bool

field f: Ref
field g: Int
field h: Int

method test01(x: Ref) {
  inhale true --* acc(x.f)

  inhale x != null /* TODO: Without it, the subsequent exhale fails because x
                    *       might be null, which doesn't trigger applying the
                    *       wand (which would yield the assumption that x != null)
                    */

  exhale acc(x.f)
}

method test02(x: Ref)
  requires true --* acc(x.f)
  requires x != null /* TODO: Try to make redundant */
{
  //:: ExpectedOutput(exhale.failed:insufficient.permission)
  exhale acc(x.f)
  exhale true --* acc(x.f) // This assertion fails after the heuristic applied the wand
}

//method test03(x: Ref, y: Ref)
//  requires true --* x == y
//{
//  exhale x == y
//  exhale true --* x == y /* Packaging-heuristics should take care of this */
//  //:: ExpectedOutput(assert.failed:assertion.false)
//  assert false
//}

method test04(x: Ref)
  requires x != null
  requires acc(x.f) --* acc(x.g) --* acc(x.h)
  requires acc(x.f) && acc(x.g)
{
//  apply acc(x.f) --* acc(x.g) --* acc(x.h)
//  apply acc(x.g) --* acc(x.h)

  exhale acc(x.h)
}

/* Currying-Uncurrying Example */

predicate P() { true }
predicate Q() { true }
predicate R() { true }

define A acc(P())
define B acc(Q())
define C acc(R())

/* A * B --* C  ==>  A --* B --* C */
method curry() {
  inhale A && B --* C

//  package A --* packaging (B --* applying (A && B --* C) in C) in B --* C

  /* Requires three nested levels of heuristics (package -> packaging -> applying) */
  exhale A --* (B --* C)
}

/* A --* B --* C  ==>  A * B --* C */
method uncurry(x: Ref) {
  inhale A --* (B --* C)

//  package A && B --* applying (A --* (B --* C)) in applying (B --* C) in C

  exhale A && B --* C
}

/* Regression tests related to curry/uncurry */

method test05 () {
  inhale true --* B
  exhale A --* B
}

method test06 (x: Ref) {
  inhale true --* (true --* C)
  exhale true --* C
}

method test07(x: Ref) {
  inhale A --* (true --* C)
  exhale A --* C
}

method test08(x: Ref) {
  inhale true --* (B --* true)

  package (B) --* true {
      apply B --* true
  }

  exhale B --* true
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axUnitJoinable { forall p: Perm :: {joinable(p, unit())} joinable(p, unit())}
    axiom axJoinableComm { forall p: Perm, q: Perm :: {joinable(p, q)} joinable(p, q) == joinable(q, p)}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}

    axiom axGeqPlus { forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(a, x)}
    axiom axGeqMinus {forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) <==> geq(minus(a, y), x)}

}
