// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field val : Int;

method test03(x: Ref) {
  var y: Ref := x

  package true --* x == x
  apply   true --* x == y
}

method test04() {
  var b: Bool
  b := true

  package b --* true
  b := !b
  apply !b --* true
}

method test05(x: Int) {
  var a: Int := x

  package x == a --* true
  a := a + 1
  apply x == a - 1 --* true

  package x == a --* true
  a := a + 2
  //:: ExpectedOutput(apply.failed:assertion.false)
  apply x == a - 1 --* true
}

method test01(l: Ref)
  requires acc(l.val)
{
  var x: Int := l.val

  package acc(l.val) && l.val == old(l.val) --* acc(l.val)

  apply   acc(l.val) && l.val == x          --* acc(l.val)
}

method test02(l: Ref)
  requires acc(l.val)
{
  var x: Int := l.val

  package acc(l.val) && l.val == l.val --* acc(l.val)

  //:: ExpectedOutput(apply.failed:wand.not.found)
  apply   acc(l.val) && l.val == x     --* acc(l.val)
}

method test06(xs: Seq[Int], n: Int)
  requires |xs| == n
{
  package true --* |xs| == n
  var ys: Seq[Int] := xs ++ Seq(n)
  apply true --* |ys| == n + 1
}

function sum(xs: Seq[Int]): Int
{
  |xs| == 0 ? 0 : xs[0] + sum(xs[1..])
}

method test07(xs: Seq[Int], n: Int)
  requires sum(xs) == n
{
  package true --* sum(xs) == n
  var ys: Seq[Int] := Seq(n) ++ xs
  assert xs == ys[1..] /* Required in order to prove that sum(ys) == 2*n */
  apply true --* sum(ys) == 2*n
}

domain Foo {
  function atMost(x: Int, y: Int): Bool

  axiom atMost_def {
    forall x: Int, y: Int :: atMost(x, y) <==> x <= y
  }
}

method test08a() {
  var x: Int
  var y: Int

  package x < y --* atMost(x, y)
  //:: ExpectedOutput(apply.failed:assertion.false)
  apply x < y --* atMost(x, y)
}

method test08b() {
  var x: Int
  var y: Int

  package x <= y --* atMost(x, y)
  assume x < y
  x := x + 1
  apply x <= y --* atMost(x, y)
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}
}
