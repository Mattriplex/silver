// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

/* Consistency checks (performed on the real Silver AST, not the parser AST) */

field f: Int
field g: Int

predicate Pair(this: Ref) {
  acc(this.f) && acc(this.g)
}


/* Wands outside of package/packaging must be ghost-operation-free */

method test01(p: Ref)
  //:: ExpectedOutput(consistency.error)
  requires acc(p.f) --* unfolding Pair(p) in acc(p.f)
{}

method test04(p: Ref)
  requires acc(p.f) --* acc(Pair(p))
{
  //:: ExpectedOutput(consistency.error)
  exhale acc(p.f) --* (applying (acc(p.f) --* acc(Pair(p))) in acc(p.f))
}

method test10(p: Ref) {
  //:: ExpectedOutput(consistency.error)
  assert applying ((unfolding Pair(p) in acc(p.f)) --* true) in true
}


/* Unfolding outside of package/packaging must be pure */

method test02(p: Ref)
  requires acc(Pair(p))
  //:: ExpectedOutput(consistency.error)
  requires unfolding Pair(p) in acc(p.f)

{}

method test03() {
  var p: Ref
  p := new()

  //:: ExpectedOutput(consistency.error)
  assert unfolding Pair(p) in acc(Pair(p))
}


/* Applying/packaging must occur inside wands */

function foobar(x: Ref): Int
  //:: ExpectedOutput(consistency.error)
  requires true --* acc(x.f)
{
  applying (true --* acc(x.f)) in x.f
}

predicate test18(x: Ref) {
  //:: ExpectedOutput(consistency.error)
  acc(x.f) && (acc(x.f) --* acc(x.g)) && applying (acc(x.f) --* acc(x.g)) in true
}


/* Ghost operations on the left of a wand are not supported (and not
 * necessary, they could be performed outside of the wand)
 */

method test08(p: Ref) {
  //:: ExpectedOutput(consistency.error)
  package (unfolding Pair(p) in acc(p.f)) --* true

}

method test05(p: Ref) {
  //:: ExpectedOutput(consistency.error)
  apply (unfolding Pair(p) in acc(p.f)) --* true

}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axUnitJoinable { forall p: Perm :: {joinable(p, unit())} joinable(p, unit())}
    axiom axJoinableComm { forall p: Perm, q: Perm :: {joinable(p, q)} joinable(p, q) == joinable(q, p)}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}

    axiom axGeqPlus { forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(a, x)}
    axiom axGeqMinus {forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) <==> geq(minus(a, y), x)}

}
