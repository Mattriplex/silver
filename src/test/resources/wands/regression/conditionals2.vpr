// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field f: Bool
field g: Int
field h: Ref

method test5a(x: Ref)
  requires acc(x.f) && acc(x.g, write)
{
  define A acc(x.f)
  define B acc(x.f) && acc(x.g, x.f ? write : none)

    // h: x.f |-> tf # w,  x.g |-> tg # w
  package A --* B
    // h: x.f |-> tf # w,  x.g |-> tg # w - (tf' ? w : n)
  apply A --* B
    // h: x.f |-> tf'' # w,  x.g |-> tg  # w - (tf' ? w : n),
    //                       x.g |-> tg' # tf'' ? w : n

  //:: ExpectedOutput(assert.failed:insufficient.permission)
  //:: MissingOutput(assert.failed:insufficient.permission, /silicon/issue/307/)
  assert acc(x.g, 1/1000)
}

method test5b(x: Ref)
  requires acc(x.f) && acc(x.g, write)
{
  define A acc(x.f)
  define B acc(x.f) && acc(x.g, x.f ? write : none)

  package A --* B
  apply A --* B

  /* Up to here, test5b is the same as test5a */

    // h: x.f |-> tf'' # w,  x.g |-> tg # w - (tf' ? w : n) + (tf'' ? w : n)
  if (x.f) {
    assert acc(x.g) /* Now we know */
  }
}

method test20a(x: Ref)
  requires acc(x.f) && acc(x.g, write) && acc(x.h, write)
{
  define A acc(x.f)
  define B acc(x.f) && acc(x.g, x.f ? write : none) && acc(x.h, !x.f ? write : none)

    // h: x.f |-> tf # w,  x.g |-> tg # w,  x.h |-> th # w
  package A --* B
    // h: x.f |-> tf # w,  x.g |-> tg # w - (tf' ? w : n),  x.h |-> th # w - (!tf' ? w : n)
  apply A --* B
    // h: x.f |-> tf'' # w,  x.g |-> tg  # w - (tf' ? w : n),  x.h |-> th  # w - (!tf' ? w : n)
    //                       x.g |-> tg' # tf'' ? w : n,       x.h |-> th' # !tf'' ? w : n
    //
    // After a heap compression:
    //
    // h: x.f |-> tf'' # w,  x.g |-> tg'' # w - (tf' ? w : n) + (tf'' ? w : n),
    //                       x.h |-> th'' # w - (!tf' ? w : n) + (!tf'' ? w : n)
    //
    // Ï€: w - (tf' ? w : n) + (tf'' ? w : n) <= 1,
    //    w - (!tf' ? w : n) + (!tf'' ? w : n) <= 1
    //
    // This gives rise to the following table (where t/f denote true/false):
    //
    //    tf' | tf'' | permission constraints for x.f, x.h | possible?
    //   --------------------------------------------------------------
    //     t  |  t   | w - w + w <= w,  w - n + n <= w     |  yes
    //     t  |  f   | w - w + n <= w,  w - n + w <= w     |  no
    //     f  |  t   | w - n + w <= w,  w - w + n <= w     |  no
    //     f  |  f   | w - n + n <= w,  w - w + w <= w     |  yes
    //   --------------------------------------------------------------
    //
    // Hence, we now know that we either gave permissions to x.g away and got
    // it back (and kept those to x.h in the meantime), or the other way around.

  assert acc(x.g)
  assert acc(x.f) && acc(x.g) && acc(x.h)

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}

method test20b(x: Ref)
  requires acc(x.f) && acc(x.g, write) && acc(x.h, write)
{
  /* Same wand as in test20a */
  define A acc(x.f)
  define B acc(x.f) && acc(x.g, x.f ? write : none) && acc(x.h, !x.f ? write : none)

  package A --* B

  //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/104/)
  assert    (perm(x.g) == write && perm(x.h) == none)
         || (perm(x.h) == write && perm(x.g) == none)

  assert    (perm(x.g) == write || perm(x.h) == write)
         && perm(x.g) + perm(x.h) == write

  if (x.f) {
    //:: ExpectedOutput(assert.failed:insufficient.permission)
    assert acc(x.h)
  }
}

method test30(x: Ref)
  requires acc(x.f)
  requires acc(x.f)
              --*
           acc(x.f) &&
           acc(x.g, x.f ? write : none) &&
           acc(x.h, x.f ? none : write)
{
  apply acc(x.f)
           --*
        acc(x.f) &&
        acc(x.g, x.f ? write : none) &&
        acc(x.h, x.f ? none : write)

  assert x.f ? perm(x.g) == write : perm(x.h) == write

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert perm(x.g) == write && perm(x.h) == write
}

//method testXZY(x: Ref, n: Int)
//  requires acc(x.g)
//  requires x.g == n
//{
//  package acc(x.g) --* acc(x.g)
//  apply acc(x.g) --* acc(x.g)
//  assert x.g == n /* TODO: Currently fails */
//}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(_x: Perm, _y: Perm): Perm
    function minus(_x: Perm, _y: Perm): Perm
    function geq(_x: Perm, _y: Perm): Bool
    function joinable(_x: Perm, _y: Perm): Bool

    function times(_x: Perm, _y: Perm): Perm

    //Auxiliary functions
    function share(_x: Rational): Perm
    function valid_share(_x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall _a: Int, _b: Int :: {biConstr(_a, _b)} biConstr(_a, _b) == share(_a/_b)}


    axiom axValid { forall _x: Rational :: {valid_share(_x)}
        valid_share(_x) <==> (_x >= 0/1 && _x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall _a: Rational, _b: Rational :: { share(_a), share(_b) }
        share(_a) == share(_b) ==> _a == _b
    }
    axiom axPlus { forall _a: Rational, _b: Rational :: { plus(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) ==> plus(share(_a), share(_b)) == share(_a + _b)
    }
    axiom axMinus { forall _a: Rational, _b: Rational :: { minus(share(_a), share(_b)) }
        geq(share(_a), share(_b)) ==> minus(share(_a), share(_b)) == share(_a - _b)
    }
    axiom axCanJoin { forall _a: Rational, _b: Rational :: { joinable(share(_a), share(_b)) }
        valid_share(_a) && valid_share(_b) ==> (joinable(share(_a), share(_b)) == valid_share(_a + _b))
    }
    axiom axGeq { forall _a: Rational, _b: Rational :: { geq(share(_a), share(_b)) }
        valid_share(_a) && valid_share(_b) ==> (geq(share(_a), share(_b)) <==> valid_share(_a - _b))
    }
    axiom axMul { forall _a: Rational, _b: Rational :: {times(share(_a), share(_b))} times(share(_a), share(_b)) == share(_a * _b)}

    axiom axJoinComm {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == plus(_q, _p)}
    axiom axJoinAssoc {forall _p: Perm, _q: Perm, _r: Perm :: {plus(plus(_p, _q), _r)} plus(plus(_p, _q), _r) == plus(_p, plus(_q, _r))}
    axiom axJoinCancel { forall _p: Perm, _q: Perm, _x: Perm :: {plus(_p, _x), plus(_q, _x)} plus(_p, _x) == plus(_q, _x) ==> _p == _q}

    axiom axUnitGeq { forall _p: Perm :: {geq(_p, unit())} geq(_p, unit())}
    axiom axUnitGeq2 { forall _p: Perm :: {geq(unit(),_p)} geq(unit(),_p) <==> _p == unit()}
    axiom axFullGeq { forall _p: Perm :: {geq(full(),_p)} geq(full(),_p)}
    axiom axFullGeq2 { forall _p: Perm :: {geq(_p, full())} geq(_p, full()) <==> _p == full()}
    axiom axGeqId { forall _p: Perm :: {geq(_p, _p)} geq(_p, _p)}
    axiom axMinusId { forall _p: Perm :: {minus(_p, _p)} minus(_p, _p) == unit()}


    axiom axUnitJoin { forall _p: Perm :: {plus(unit(),_p)} plus(unit(),_p) == _p}
    axiom axUnitJoinable { forall _p: Perm :: {joinable(_p, unit())} joinable(_p, unit())}
    axiom axJoinableComm { forall _p: Perm, _q: Perm :: {joinable(_p, _q)} joinable(_p, _q) == joinable(_q,_p)}
    axiom axTimes0 { forall _p: Perm :: {times(unit(),_p)} times(unit(),_p) == unit()}
    axiom axTimes1 { forall _p: Perm :: {times(full(),_p)} times(full(),_p) == _p}

    axiom axGeqPlus { forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(_a, _x)}
    axiom axGeqMinus {forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(minus(_a, _y), _x)}
    axiom axMinusUneq { forall _p: Perm, _q: Perm :: {geq(_p, _q)} geq(_p, _q) && _p != _q ==> minus(_p, _q) != unit()}

    axiom axPositive {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == unit() ==> _p == unit() && _q == unit()}
    axiom axPlusGeq {forall _p: Perm, _q: Perm :: {geq(plus(_p, _q), _p)} /*joinable(_p, _q) ==>*/ geq(plus(_p, _q), _p)}
    axiom axMinusCancel {forall _p: Perm, _q: Perm :: {minus(plus(_p, _q), _q)} minus(plus(_p, _q), _q) == _p}

}
