// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

//:: IgnoreFile(/carbon/issue/103/)

field __CONFIG_HEURISTICS: Bool

field f: Ref
field g: Int
field h: Int

method test00()
  requires true --* true
{
  exhale true --* true
}

method test01() {
  exhale true --* true
//  assert false
}

method test02(x: Ref)
  requires acc(x.f) && acc(x.g)
  ensures acc(x.f) && acc(x.f) --* acc(x.g)
{}

method test03(x: Ref)
  requires acc(x.f) && acc(x.g)
  //:: ExpectedOutput(postcondition.violated:wand.not.found)
  ensures acc(x.f) --* acc(x.g) && acc(x.f)
  ensures acc(x.g) // This assertion fails after the heuristic packaged the wand
{}

method test04(x: Ref)
  requires acc(x.f)
  //:: ExpectedOutput(postcondition.violated:wand.not.found)
  ensures true --* acc(x.g)
{}

method test05a(x: Ref)
  requires acc(x.f) && acc(x.g)
  ensures acc(x.g) --* acc(x.f) && acc(x.g)
  ensures acc(x.g)
{}

method test05b(x: Ref)
  requires acc(x.f) && acc(x.g)
  ensures acc(x.g)
  ensures acc(x.g) --* acc(x.f) && acc(x.g)
{}

method test010() {
  exhale true --* (true --* true)
}

method test06(x: Ref)
  requires acc(x.f) && acc(x.g)
  ensures acc(x.f) --* (acc(x.g) --* acc(x.f) && acc(x.g))
  ensures acc(x.f) && acc(x.g)
{}

method test11(x: Ref) {
  inhale acc(x.f) && acc(x.g)
  //:: ExpectedOutput(exhale.failed:wand.not.found)
  exhale acc(x.f) --* (acc(x.g) --* acc(x.f) && acc(x.g))
  exhale acc(x.f) && acc(x.g)
  assert false // Fails
}

method test07(x: Ref)
  //:: ExpectedOutput(postcondition.violated:wand.not.found)
  ensures acc(x.f) --* (acc(x.g) --* acc(x.f) && acc(x.g))
  ensures acc(x.f) && acc(x.g) // Fails
{}

method test08a(x: Ref)
  requires acc(x.g)
  ensures acc(x.f, 1/2) --* acc(x.f, 1/2) && acc(x.g, 1/2)
  ensures acc(x.f, 1/2) --* acc(x.f, 1/2) && acc(x.g, 1/2)
{}

method test08b(x: Ref)
  requires acc(x.g)
  //:: ExpectedOutput(postcondition.violated:wand.not.found)
  ensures acc(x.f, 1/2) --* acc(x.f, 1/2) && acc(x.g, 1/2)
  ensures acc(x.f, 1/2) --* acc(x.f, 1/2) && acc(x.g, 1/2)
  ensures acc(x.g) // Fails
{}

method test09(x: Ref)
  requires acc(x.g)
  ensures acc(x.f) --*
               (acc(x.f, 1/2) --* acc(x.f, 1/2) && acc(x.g, 1/2))
            && (acc(x.f, 1/2) --* acc(x.f, 1/2) && acc(x.g, 1/2))
{}

method test10(x: Ref)
  requires acc(x.f) && acc(x.g)
{
  exhale true --* true
  exhale true --* acc(x.f, 1/2) /* Consumes acc(x.f, 1/2)*/
  assert acc(x.f, 1/2) && acc(x.g)

  assert acc(x.f, 1/2) --* acc(x.g, 1/2) /* Each assert temporarily consumes ... */
  assert acc(x.f, 1/2) --* acc(x.g, 1/2) /* ... acc(x.g, 1/2), but the effect ... */
  assert acc(x.f, 1/2) --* acc(x.g, 1/2) /* ... of each assert statement should ... */
  assert acc(x.f, 1/2) --* acc(x.g, 1/2) /* ... not be observable afterwards */
  assert acc(x.f, 1/2) && acc(x.g)

  exhale acc(x.f, 1/2) --* acc(x.g, 1/2)
  assert acc(x.g, 1/2) && acc(x.f, 1/2)

  exhale true --* acc(x.f, 1/2) && acc(x.g, 1/2) /* Consumes acc(x.f, 1/2) && acc(x.g, 1/2) */

//  assert acc(x.f, 1/2) // Must fail
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axUnitJoinable { forall p: Perm :: {joinable(p, unit())} joinable(p, unit())}
    axiom axJoinableComm { forall p: Perm, q: Perm :: {joinable(p, q)} joinable(p, q) == joinable(q, p)}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}

    axiom axGeqPlus { forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(a, x)}
    axiom axGeqMinus {forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) && joinable(x, y) <==> geq(minus(a, y), x) && geq(a, y)}

}
