// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field v: Int
field n: Ref

predicate List(this: Ref) {
	acc(this.v) && acc(this.n) && (this.n != null ==> acc(List(this.n)))
}

function sum_rec(this: Ref): Int
	requires acc(List(this))
{ unfolding List(this) in (this.v + (this.n == null ? 0 : sum_rec(this.n))) }

method sum_it(ys: Ref) returns (sum: Int)
  requires ys != null
	requires acc(List(ys))
	ensures acc(List(ys))
	ensures sum == old(sum_rec(ys))
{
  var xs: Ref
  xs := ys
  sum := 0

  /* ghost */ var oldsum_xs: Int
              oldsum_xs := sum_rec(xs)

  package
    ((xs != null) ==> (acc(List(xs)) && sum_rec(xs) == oldsum_xs))
      --*
    (acc(List(ys)) && sum_rec(ys) == old(sum_rec(ys)))

  while (xs != null)
    invariant ((xs != null) ==> acc(List(xs)))
    invariant sum == (old(sum_rec(ys)) - (xs == null ? 0 : sum_rec(xs)));
    invariant
      ((xs != null) ==> (acc(List(xs)) && sum_rec(xs) == oldsum_xs))
        --*
      (acc(List(ys)) && sum_rec(ys) == old(sum_rec(ys)))
  {
    assume oldsum_xs == sum_rec(xs)
      /* [Malte] I think that it is crucial that oldsum_xs is assigned to at
       *         least once in the loop, because it will otherwise still have
       *         the value that it had outside of the loop (a Sil/Silicon feature).
       *         If so, then the assume in here is unsound because xs changes in
       *         every loop iteration.
       */

    /* ghost */ var prev_xs: Ref
                prev_xs := xs

    unfold List(xs)
    sum := sum + (xs.v)
    xs := xs.n;

  /* ghost */ var oldoldsum_xs: Int
              oldoldsum_xs := oldsum_xs

    if (xs != null) {
      oldsum_xs := sum_rec(xs)
    }

    package
      ((xs != null) ==> (acc(List(xs)) && sum_rec(xs) == oldsum_xs))
        --* (acc(List(ys)) && sum_rec(ys) == old(sum_rec(ys))) {
            fold List(prev_xs)
            apply ((prev_xs != null) ==> (acc(List(prev_xs)) && sum_rec(prev_xs) == oldoldsum_xs)) --* (acc(List(ys)) && sum_rec(ys) == old(sum_rec(ys)))
          }
  }

  apply
    ((xs != null) ==> (acc(List(xs)) && sum_rec(xs) == oldsum_xs))
      --*
    (acc(List(ys)) && sum_rec(ys) == old(sum_rec(ys)))
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axUnitJoinable { forall p: Perm :: {joinable(p, unit())} joinable(p, unit())}
    axiom axJoinableComm { forall p: Perm, q: Perm :: {joinable(p, q)} joinable(p, q) == joinable(q, p)}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}

    axiom axGeqPlus { forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(a, x)}
    axiom axGeqMinus {forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(minus(a, y), x)}
    axiom axMinusUneq { forall p: Perm, q: Perm :: {geq(p, q)} geq(p, q) && p != q ==> minus(p, q) != unit()}

}
