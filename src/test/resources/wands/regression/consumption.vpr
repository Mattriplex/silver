// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field f: Int
field g: Int
field h: Int

predicate Pair(this: Ref) {
  acc(this.f) && acc(this.g)
}

function sum(p: Ref): Int
  requires acc(Pair(p))
{ unfolding acc(Pair(p)) in (p.f) + (p.g) }

method test00(p: Ref)
  requires acc(p.f)
  requires acc(p.f) --* acc(p.g)
{
    // h: p.f * (p.f --* p.g)
  package (true) --* true {
      apply acc(p.f) --* acc(p.g)
  }

    // h: true --* true

  assert true --* true;

  //:: ExpectedOutput(assert.failed:insufficient.permission)
  assert acc(p.f)
}

method test01(p: Ref)
  requires acc(p.f) && acc(p.h)
  requires acc(p.h) --* acc(p.g)
{
    // h: p.f * p.h * (p.h --* p.g)
  package (true) --* acc(Pair(p)) {
      apply acc(p.h) --* acc(p.g)
      fold acc(Pair(p))
  }
    // h: (true --* p.Pair)

  assert true --* acc(Pair(p));

  //:: ExpectedOutput(assert.failed:insufficient.permission)
  assert acc(p.f)
}

method test02(x: Ref)
  requires acc(x.f)
{
  x.f := 0
  package acc(x.f, 1/2) --* (acc(x.f) && x.f == 0)
  assert acc(x.f, 1/2)
  //:: ExpectedOutput(assert.failed:insufficient.permission)
  assert acc(x.f, 2/3)
}

method test03(x: Ref)
  requires acc(x.f) && acc(x.g)
{
  //:: ExpectedOutput(package.failed:insufficient.permission)
  package (true) --* acc(x.f) {
      fold acc(Pair(x))
  }
}

method test04(x: Ref, y: Ref)
  requires y != null
  requires acc(x.f) && acc(x.g)
{
  //:: ExpectedOutput(package.failed:insufficient.permission)
  package (true) --* acc(y.f) {
      fold acc(Pair(x))
  }
}

method test05(x: Ref, y: Ref)
  requires acc(y.f)
  requires acc(x.f) && acc(x.g)
  ensures true --* acc(y.f)
{
  package (true) --* acc(y.f) {
      fold acc(Pair(x))
  }
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}
}
