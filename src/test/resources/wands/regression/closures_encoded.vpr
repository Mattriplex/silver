// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/


field f: Int

predicate c1_pre(x: Ref) { true }
predicate c1_post(x: Ref) { true }
predicate c2_pre(x: Ref) { true }
predicate c2_post(x: Ref) { true }
predicate c3_pre(x: Ref) { true }
predicate c3_post(x: Ref) { true }

method triple_not_nested(x: Ref)
  requires acc(c1_pre(x))
  requires acc(c1_post(x)) --* acc(c2_pre(x))
  requires acc(c2_post(x)) --* acc(c3_pre(x))
  ensures acc(c3_post(x))
{
  exhale acc(c1_pre(x))
  inhale acc(c1_post(x))

  apply acc(c1_post(x)) --* acc(c2_pre(x))

  exhale acc(c2_pre(x))
  inhale acc(c2_post(x))

  apply acc(c2_post(x)) --* acc(c3_pre(x))

  exhale acc(c3_pre(x))
  inhale acc(c3_post(x))
}

method call_triple_not_nested() {
  var x: Ref
  x := new(f)

  x.f := 1
  var w: Int := x.f

  package acc(x.f) && x.f == w - 2 --* acc(x.f)
  package acc(x.f) && x.f == w + 1 --* acc(x.f) && x.f > 0

  x.f := -10

  // :: ExpectedOutput(exhale.failed:wand.outdated)
  exhale     acc(x.f)
         && (acc(x.f) && x.f == w + 1 --* acc(x.f) && x.f > 0)
         && (acc(x.f) && x.f == w - 2 --* acc(x.f))
}

method triple_nested(x: Ref)
  requires acc(c1_pre(x))
  requires acc(c1_post(x)) --*
            (   acc(c2_pre(x))
             && (acc(c2_post(x)) --* acc(c3_pre(x))))
  ensures acc(c3_post(x))
{
  exhale acc(c1_pre(x))
  inhale acc(c1_post(x))

  apply (acc(c1_post(x)) --*
          (   acc(c2_pre(x))
           && (acc(c2_post(x)) --* acc(c3_pre(x)))))

  exhale acc(c2_pre(x))
  inhale acc(c2_post(x))

  apply acc(c2_post(x)) --* acc(c3_pre(x))

  exhale acc(c3_pre(x))
  inhale acc(c3_post(x))
}

method call_triple_nested() {
  var x: Ref
  x := new(f)

  x.f := 1
  var a: Int := x.f

//  package acc(x.f) && x.f == a + 1 --* acc(x.f) && x.f > 0
//  wand w := acc(x.f) && x.f == a + 1 --* acc(x.f) && x.f > 0

  package true --* true
  package true --* (true --* true)
//  package acc(x.f) && x.f == a - 2 --* acc(x.f) && w
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(_x: Perm, _y: Perm): Perm
    function minus(_x: Perm, _y: Perm): Perm
    function geq(_x: Perm, _y: Perm): Bool
    function joinable(_x: Perm, _y: Perm): Bool

    function times(_x: Perm, _y: Perm): Perm

    //Auxiliary functions
    function share(_x: Rational): Perm
    function valid_share(_x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall _a: Int, _b: Int :: {biConstr(_a, _b)} biConstr(_a, _b) == share(_a/_b)}


    axiom axValid { forall _x: Rational :: {valid_share(_x)}
        valid_share(_x) <==> (_x >= 0/1 && _x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall _a: Rational, _b: Rational :: { share(_a), share(_b) }
        share(_a) == share(_b) ==> _a == _b
    }
    axiom axPlus { forall _a: Rational, _b: Rational :: { plus(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) ==> plus(share(_a), share(_b)) == share(_a + _b)
    }
    axiom axMinus { forall _a: Rational, _b: Rational :: { minus(share(_a), share(_b)) }
        geq(share(_a), share(_b)) ==> minus(share(_a), share(_b)) == share(_a - _b)
    }
    axiom axCanJoin { forall _a: Rational, _b: Rational :: { joinable(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) <==> valid_share(_a) && valid_share(_b) && valid_share(_a + _b)
    }
    axiom axGeq { forall _a: Rational, _b: Rational :: { geq(share(_a), share(_b)) }
        geq(share(_a), share(_b)) <==> valid_share(_a) && valid_share(_b) && valid_share(_a - _b)
    }
    axiom axMul { forall _a: Rational, _b: Rational :: {times(share(_a), share(_b))} times(share(_a), share(_b)) == share(_a * _b)}

    axiom axJoinComm {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == plus(_q, _p)}
    axiom axJoinAssoc {forall _p: Perm, _q: Perm, _r: Perm :: {plus(plus(_p, _q), _r)} plus(plus(_p, _q), _r) == plus(_p, plus(_q, _r))}
    axiom axJoinCancel { forall _p: Perm, _q: Perm, _x: Perm :: {plus(_p, _x), plus(_q, _x)} plus(_p, _x) == plus(_q, _x) ==> _p == _q}

    axiom axUnitGeq { forall _p: Perm :: {geq(_p, unit())} geq(_p, unit())}
    axiom axUnitGeq2 { forall _p: Perm :: {geq(unit(),_p)} geq(unit(),_p) <==> _p == unit()}
    axiom axFullGeq { forall _p: Perm :: {geq(full(),_p)} geq(full(),_p)}
    axiom axFullGeq2 { forall _p: Perm :: {geq(_p, full())} geq(_p, full()) <==> _p == full()}
    axiom axGeqId { forall _p: Perm :: {geq(_p, _p)} geq(_p, _p)}
    axiom axMinusId { forall _p: Perm :: {minus(_p, _p)} minus(_p, _p) == unit()}


    axiom axUnitJoin { forall _p: Perm :: {plus(unit(),_p)} plus(unit(),_p) == _p}
    axiom axUnitJoinable { forall _p: Perm :: {joinable(_p, unit())} joinable(_p, unit())}
    axiom axJoinableComm { forall _p: Perm, _q: Perm :: {joinable(_p, _q)} joinable(_p, _q) == joinable(_q,_p)}
    axiom axTimes0 { forall _p: Perm :: {times(unit(),_p)} times(unit(),_p) == unit()}
    axiom axTimes1 { forall _p: Perm :: {times(full(),_p)} times(full(),_p) == _p}

    axiom axGeqPlus { forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(_a, _x)}
    axiom axGeqMinus {forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(minus(_a, _y), _x)}
    axiom axMinusUneq { forall _p: Perm, _q: Perm :: {geq(_p, _q)} geq(_p, _q) && _p != _q ==> minus(_p, _q) != unit()}

    axiom axPositive {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == unit() ==> _p == unit() && _q == unit()}
    axiom axPlusGeq {forall _p: Perm, _q: Perm :: {geq(plus(_p, _q), _p)} joinable(_p, _q) ==> geq(plus(_p, _q), _p)}
    axiom axMinusCancel {forall _p: Perm, _q: Perm :: {minus(plus(_p, _q), _q)} minus(plus(_p, _q), _q) == _p}

}
