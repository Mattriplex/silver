// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

//:: IgnoreFile(/carbon/issue/103/)
field __CONFIG_HEURISTICS: Bool

field f: Ref
field g: Int
field h: Int

predicate P(x: Ref, v: Int) { acc(x.g) && x.g == v }

method test01(x: Ref, v: Int) {
  inhale acc(x.f) && acc(P(x.f, v))
  inhale x.f != null /* TODO: Should not be necessary */

  assert acc(x.f.g)
}

method test02(x: Ref) {
  inhale acc(x.f) && acc(x.f.g)
  var v: Int := x.f.g
  x.f.g := x.f.g + 1

  assert acc(P(x.f, v + 1))
}

method test04() {
  var x: Ref
  var y: Ref
  var r: Ref

  inhale acc(P(x, 0)) --* acc(P(y, 0))

  var oldx: Ref := x
  x := r

  package acc(P(oldx, 0)) --* acc(P(y, 0))
}

/* From the list_insert example */

field val: Int
field next: Ref

predicate List(xs: Ref) {
//	acc(xs.next) && acc(List(xs.next))
//	acc(xs.val) && acc(xs.next) && acc(List(xs.next))
//  acc(xs.next) && (xs.next != null ==> acc(List(xs.next)))
//  acc(xs.next) && acc(List(xs.next), xs.next != null ? write : none)
  acc(xs.val) && acc(xs.next) && (xs.next != null ==> acc(List(xs.next)))
}

method test03() {
  var xs: Ref
  var crt: Ref
  var nxt: Ref

  define A acc(List(crt))
  define B acc(List(xs))

  inhale xs != null && nxt != null
  inhale acc(crt.val)
  inhale acc(crt.next)
  inhale nxt == crt.next
  inhale acc(List(nxt))
  inhale A --* B

  var prev: Ref := crt
  unfold List(nxt)
  crt := nxt
  nxt := nxt.next

//  package A --* /*folding List(prev) in*/ /*applying w in*/ B

  assert acc(crt.val)
  assert acc(crt.next)
  assert nxt == crt.next
  assert nxt != null ==> acc(List(nxt))
  assert A --* B
}

/* From the tree_delete_min example */

field l: Ref
//field r: Ref

predicate Tree(x: Ref) {
     acc(x.l) && acc(Tree(x.l))
  //&& acc(x.r) && acc(Tree(x.r))
}

method test05(x: Ref) {
  var p: Ref

  define A acc(p.l) && acc(Tree(p.l))
  define B acc(Tree(x))

  inhale p != null && acc(p.l) && acc(Tree(p.l)) && p.l != null
  inhale A --* B

  unfold acc(Tree(p.l))
  p := p.l

//  package A --* /*folding Tree(p) in*/ /*applying w in*/ B

  exhale p != null && acc(p.l) && acc(Tree(p.l))
  exhale A --* B
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}
}
