// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

//:: IgnoreFile(/carbon/issue/103/)

/* This example is effectively our running example, but without comments and use of
 * assertion short-hands.
 */

field __CONFIG_HEURISTICS: Bool

field val: Int
field next: Ref

predicate List(ys: Ref) {
  acc(ys.val) && acc(ys.next) && (ys.next != null ==> acc(List(ys.next)))
}

function sum_rec(ys: Ref): Int
  requires acc(List(ys))
{ unfolding List(ys) in ys.val + (ys.next == null ? 0 : sum_rec(ys.next)) }

method sum_it(ys: Ref) returns (sum: Int)
  requires ys != null
  requires acc(List(ys))
  ensures acc(List(ys))
  ensures sum == old(sum_rec(ys))
{
  var xs: Ref := ys
  sum := 0

  var old_sum_xs: Int := sum_rec(xs)

//  package
//    (xs != null ==> (acc(List(xs)) && sum_rec(xs) == old_sum_xs))
//      --*
//    (acc(List(ys)) && sum_rec(ys) == old(sum_rec(ys)))

  while (xs != null)
    invariant xs != null ==> acc(List(xs))
    invariant old_sum_xs == (xs == null ? 0 : sum_rec(xs))
    invariant sum == old(sum_rec(ys)) - old_sum_xs;
    invariant
      (xs != null ==> (acc(List(xs)) && sum_rec(xs) == old_sum_xs))
        --*
      (acc(List(ys)) && sum_rec(ys) == old(sum_rec(ys)))
  {
//    var zs: Ref := xs
//    var old_sum_xs2: Int := old_sum_xs /* old_sum_xs2 is needed to apply the wand obtained from the invariant */

    unfold List(xs)
    sum := sum + xs.val
    xs := xs.next;

    old_sum_xs := (xs == null ? 0 : sum_rec(xs))

//    package
//      (xs != null ==> (acc(List(xs)) && sum_rec(xs) == old_sum_xs))
//        --*
//      folding List(zs) in
//        applying
//          ((zs != null ==> (acc(List(zs)) && sum_rec(zs) == old_sum_xs2))
//            --*
//          (acc(List(ys)) && sum_rec(ys) == old(sum_rec(ys))))
//        in
//          acc(List(ys)) && sum_rec(ys) == old(sum_rec(ys))
  }

//  apply
//    (xs != null ==> (acc(List(xs)) && sum_rec(xs) == old_sum_xs))
//      --*
//    (acc(List(ys)) && sum_rec(ys) == old(sum_rec(ys)))
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(_x: Perm, _y: Perm): Perm
    function minus(_x: Perm, _y: Perm): Perm
    function geq(_x: Perm, _y: Perm): Bool
    function joinable(_x: Perm, _y: Perm): Bool

    function times(_x: Perm, _y: Perm): Perm

    //Auxiliary functions
    function share(_x: Rational): Perm
    function valid_share(_x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall _a: Int, _b: Int :: {biConstr(_a, _b)} biConstr(_a, _b) == share(_a/_b)}


    axiom axValid { forall _x: Rational :: {valid_share(_x)}
        valid_share(_x) <==> (_x >= 0/1 && _x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall _a: Rational, _b: Rational :: { share(_a), share(_b) }
        share(_a) == share(_b) ==> _a == _b
    }
    axiom axPlus { forall _a: Rational, _b: Rational :: { plus(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) ==> plus(share(_a), share(_b)) == share(_a + _b)
    }
    axiom axMinus { forall _a: Rational, _b: Rational :: { minus(share(_a), share(_b)) }
        geq(share(_a), share(_b)) ==> minus(share(_a), share(_b)) == share(_a - _b)
    }
    axiom axCanJoin { forall _a: Rational, _b: Rational :: { joinable(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) <==> valid_share(_a) && valid_share(_b) && valid_share(_a + _b)
    }
    axiom axGeq { forall _a: Rational, _b: Rational :: { geq(share(_a), share(_b)) }
        geq(share(_a), share(_b)) <==> valid_share(_a) && valid_share(_b) && valid_share(_a - _b)
    }
    axiom axMul { forall _a: Rational, _b: Rational :: {times(share(_a), share(_b))} times(share(_a), share(_b)) == share(_a * _b)}

    axiom axJoinComm {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == plus(_q, _p)}
    axiom axJoinAssoc {forall _p: Perm, _q: Perm, _r: Perm :: {plus(plus(_p, _q), _r)} plus(plus(_p, _q), _r) == plus(_p, plus(_q, _r))}
    axiom axJoinCancel { forall _p: Perm, _q: Perm, _x: Perm :: {plus(_p, _x), plus(_q, _x)} plus(_p, _x) == plus(_q, _x) ==> _p == _q}

    axiom axUnitGeq { forall _p: Perm :: {geq(_p, unit())} geq(_p, unit())}
    axiom axUnitGeq2 { forall _p: Perm :: {geq(unit(),_p)} geq(unit(),_p) <==> _p == unit()}
    axiom axFullGeq { forall _p: Perm :: {geq(full(),_p)} geq(full(),_p)}
    axiom axFullGeq2 { forall _p: Perm :: {geq(_p, full())} geq(_p, full()) <==> _p == full()}
    axiom axGeqId { forall _p: Perm :: {geq(_p, _p)} geq(_p, _p)}
    axiom axMinusId { forall _p: Perm :: {minus(_p, _p)} minus(_p, _p) == unit()}


    axiom axUnitJoin { forall _p: Perm :: {plus(unit(),_p)} plus(unit(),_p) == _p}
    axiom axUnitJoinable { forall _p: Perm :: {joinable(_p, unit())} joinable(_p, unit())}
    axiom axJoinableComm { forall _p: Perm, _q: Perm :: {joinable(_p, _q)} joinable(_p, _q) == joinable(_q,_p)}
    axiom axTimes0 { forall _p: Perm :: {times(unit(),_p)} times(unit(),_p) == unit()}
    axiom axTimes1 { forall _p: Perm :: {times(full(),_p)} times(full(),_p) == _p}

    axiom axGeqPlus { forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(_a, _x)}
    axiom axGeqMinus {forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(minus(_a, _y), _x)}
    axiom axMinusUneq { forall _p: Perm, _q: Perm :: {geq(_p, _q)} geq(_p, _q) && _p != _q ==> minus(_p, _q) != unit()}

    axiom axPositive {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == unit() ==> _p == unit() && _q == unit()}
    axiom axPlusGeq {forall _p: Perm, _q: Perm :: {geq(plus(_p, _q), _p)} joinable(_p, _q) ==> geq(plus(_p, _q), _p)}
    axiom axMinusCancel {forall _p: Perm, _q: Perm :: {minus(plus(_p, _q), _q)} minus(plus(_p, _q), _q) == _p}

}
