// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/


field f: Int


function rcvr(i: Int, j: Int): Ref

function prm(i: Int): Perm
  ensures none < result

method test01(xs: Seq[Ref], n: Int) {
  inhale 0 <= n && n <= |xs|

  inhale forall i: Int, j: Int ::
    0 <= i && i < n && j == i ==> acc(rcvr(i, j).f, prm(i))

  assert forall i1: Int, i2: Int ::
    0 <= i1 && i1 < n && 0 <= i2 && i2 < n && i1 != i2 ==>
      rcvr(i1, i1) != rcvr(i2, i2)

  exhale forall i: Int, j: Int ::
    0 <= i && i < n && i == j ==> acc(rcvr(i, j).f, prm(i))
}

method test01_fail(xs: Seq[Ref], n: Int) {
  inhale 0 <= n && n <= |xs|

  inhale forall i: Int, j: Int ::
    0 <= i && i < n && j == i ==> acc(rcvr(i, j).f, prm(i))

  assert forall i1: Int, i2: Int ::
    0 <= i1 && i1 < n && 0 <= i2 && i2 < n && i1 != i2 ==>
      rcvr(i1, i1) != rcvr(i2, i2)

  exhale forall i: Int, j: Int ::
    0 <= i && i < n && i == j ==> acc(rcvr(i, j).f, prm(i))

  //:: ExpectedOutput(exhale.failed:insufficient.permission)
  exhale forall i: Int, j: Int ::
      0 <= i && i < n && i == j ==> acc(rcvr(i, j).f, prm(i))
}

method test02(xs: Seq[Ref], n: Int) {
  inhale 0 <= n && n <= |xs|

  inhale forall i: Int, j: Int ::
    0 <= i && i < n && j == i + 1 ==> acc(rcvr(i, j).f, prm(i))

  var a: Int
  inhale 0 <= a && a < n
  inhale rcvr(a, a + 1).f > 1

  exhale forall i: Int ::
    0 <= i && i < n ==>
         acc(rcvr(i, i + 1).f, prm(i))
      && (i != a || rcvr(i, i + 1).f > 1)
}


function det(mat: IMatrix): Int
  requires forall c: Int, r: Int ::
              0 <= c && c < cols(mat) && 0 <= r && r < rows(mat) ==>
                acc(loc(mat, c, r).val)

function colsum(mat: IMatrix, col: Int): Int
  requires 0 <= col && col < cols(mat)
  requires forall r: Int :: 0 <= r && r < rows(mat) ==> acc(loc(mat, col, r).val)

function rowsum(mat: IMatrix, row: Int): Int
  requires 0 <= row && row < rows(mat)
  requires forall c: Int :: 0 <= c && c < cols(mat) ==> acc(loc(mat, c, row).val)

method test03(mat: IMatrix)
  requires forall c: Int, r: Int ::
              0 <= c && c < cols(mat) && 0 <= r && r < rows(mat) ==>
                acc(loc(mat, c, r).val) && loc(mat, c, r).val > 0
  requires forall c: Int, r: Int ::
              0 < c && c < cols(mat) && 0 < r && r < rows(mat) ==>
                   loc(mat, c, r).val
                == loc(mat, c - 1, r).val + loc(mat, c, r - 1).val
  requires 5 <= cols(mat) && cols(mat) <= rows(mat)
{
  assert     loc(mat, 1, 0).val == 1 && loc(mat, 0, 1).val == 3
         ==> loc(mat, 1, 1).val == 4

  var olddet: Int := det(mat)
  var oldcolsum3: Int := colsum(mat, 3)
  var oldrowsum2: Int := rowsum(mat, 2)

  assert det(mat) == olddet
  assert colsum(mat, 3) == oldcolsum3
  assert rowsum(mat, 2) == oldrowsum2
}


predicate P(x: Ref, y: Ref) {
  acc(x.f) && acc(y.f) && x.f < y.f
}

function getP(x: Ref, y: Ref): Int
  requires P(x, y)
{ unfolding P(x, y) in x.f + y.f }

method test04(rs1: IArray[Ref], rs2: IArray[Ref]) {
  inhale forall i1: Int, i2: Int ::
    0 <= i1 && i1 < len(rs1) && 0 <= i2 && i2 < len(rs2) ==> P(aloc(rs1, i1), aloc(rs2, i2))



  var k1: Int
  var k2: Int
  inhale 0 <= k1 && k1 < len(rs1)
  inhale 0 <= k2 && k2 < len(rs2)

  label l1

  unfold P(aloc(rs1, k1), aloc(rs2, k2))
  aloc(rs1, k1).f := aloc(rs2, k2).f
  aloc(rs2, k2).f := aloc(rs2, k2).f + 1
  fold P(aloc(rs1, k1), aloc(rs2, k2))

  assert getP(aloc(rs1, k1), aloc(rs2, k2)) > old[l1](getP(aloc(rs1, k1), aloc(rs2, k2)))

  exhale forall i1: Int, i2: Int ::
    0 <= i1 && i1 < len(rs1) && 0 <= i2 && i2 < len(rs2) ==>
         P(aloc(rs1, i1), aloc(rs2, i2))
      && (i1 != k1 && i2 != k2 ==> getP(aloc(rs1, i1), aloc(rs2, i2)) == old[l1](getP(aloc(rs1, i1), aloc(rs2, i2))))
}

method test04_fail(rs1: IArray[Ref], rs2: IArray[Ref]) {
  inhale forall i1: Int, i2: Int ::
    0 <= i1 && i1 < len(rs1) && 0 <= i2 && i2 < len(rs2) ==> P(aloc(rs1, i1), aloc(rs2, i2))

  exhale forall i1: Int, i2: Int ::
      0 <= i1 && i1 < len(rs1) && 0 <= i2 && i2 < len(rs2) ==> P(aloc(rs1, i1), aloc(rs2, i2))



  var k1: Int
  var k2: Int
  inhale 0 <= k1 && k1 < len(rs1)
  inhale 0 <= k2 && k2 < len(rs2)

  label l1

  //:: ExpectedOutput(unfold.failed:insufficient.permission)
  unfold P(aloc(rs1, k1), aloc(rs2, k2))

}

/* Encoding of arrays */
domain IArray[T] {
  function aloc(a: IArray[T], i: Int): T
  function len(a: IArray[T]): Int
  function first(r: T): IArray[T]
  function second(r: T): Int

  axiom array_all_diff {
    forall a: IArray[T], i: Int :: {aloc(a, i)}
      first(aloc(a, i)) == a && second(aloc(a, i)) == i
  }

  axiom length_nonneg {
    forall a: IArray[T] :: len(a) >= 0
  }
}


/* Encoding of matrices */

field val: Int

domain IMatrix {
  function loc(mat: IMatrix, col: Int, row: Int): Ref

  function cols(mat: IMatrix): Int
  function rows(mat: IMatrix): Int

  function loc_mat(r: Ref): IMatrix
  function loc_col(r: Ref): Int
  function loc_row(r: Ref): Int

  axiom all_diff {
    forall mat: IMatrix, col: Int, row: Int :: {loc(mat, col, row)}
         loc_mat(loc(mat, col, row)) == mat
      && loc_col(loc(mat, col, row)) == col
      && loc_row(loc(mat, col, row)) == row
  }

  axiom cols_nonneg {
    forall mat: IMatrix :: cols(mat) >= 0
  }

  axiom rows_nonneg {
    forall mat: IMatrix :: rows(mat) >= 0
  }
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axUnitJoinable { forall p: Perm :: {joinable(p, unit())} joinable(p, unit())}
    axiom axJoinableComm { forall p: Perm, q: Perm :: {joinable(p, q)} joinable(p, q) == joinable(q, p)}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}

    axiom axGeqPlus { forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(a, x)}
    axiom axGeqMinus {forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) && joinable(x, y) <==> geq(minus(a, y), x) && geq(a, y)}

}
