// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

//:: IgnoreFile(/carbon/issue/257/)

field f: Int

method m1(xs: Set[Ref], y: Ref, zs: Seq[Ref]) {
    inhale forall x: Ref :: x == y ==> acc(x.f)
    inhale forall x: Ref :: {acc(x.f) --* acc(y.f)} x in xs ==> acc(x.f) --* acc(y.f)
    assume forall x: Ref :: {acc(x.f) --* acc(y.f)} x in zs ==> x != y

    var z: Ref
    assume z in zs
    assume !(z in xs)
    package acc(z.f) --* acc(y.f)
    //:: MissingOutput(assert.failed:assertion.false, /Silicon/issue/000/)
    //:: ExpectedOutput(assert.failed:assertion.false)
    assert z != y
}

method m2(xs: Set[Ref], ys: Set[Ref], z: Ref) {
    inhale forall x: Ref :: x == z ==> acc(x.f)
    inhale forall x: Ref :: {p1(x)} x in xs ==> p1(x)
    inhale forall x: Ref :: {p1(x)} x in ys ==> x != z

    var y: Ref
    assume !(y in xs)
    inhale acc(y.f)
    assume y in ys
    assume y.f == 0
    fold p1(y)
    //:: MissingOutput(assert.failed:assertion.false, /Silicon/issue/000/)
    //:: ExpectedOutput(assert.failed:assertion.false)
    assert y != z
}

method m3(xs: Seq[Ref], y: Ref, zs: Seq[Ref]) {
        inhale forall x: Ref :: x == y ==> acc(x.f)
        inhale forall x: Ref :: {acc(x.f) --* acc(y.f)} x in xs ==> acc(x.f) --* acc(y.f)

        var z: Ref
        assume z in zs
        assume !(z in xs)
        package acc(z.f) --* acc(y.f)
        assume forall x: Ref :: {acc(x.f) --* acc(y.f)} x in zs ==> x != y
        assert z != y
}

method m4(xs: Set[Ref], ys: Set[Ref], z: Ref) {
    inhale forall x: Ref :: x == z ==> acc(x.f)
    inhale forall x: Ref :: {p1(x)} x in xs ==> p1(x)

    var y: Ref
    assume !(y in xs)
    inhale acc(y.f)
    assume y in ys
    assume y.f == 0
    fold p1(y)
    inhale forall x: Ref :: {p1(x)} x in ys ==> x != z
    assert y != z
}

predicate p1(x: Ref) {
    acc(x.f) && x.f == 0
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axUnitJoinable { forall p: Perm :: {joinable(p, unit())} joinable(p, unit())}
    axiom axJoinableComm { forall p: Perm, q: Perm :: {joinable(p, q)} joinable(p, q) == joinable(q, p)}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}

    axiom axGeqPlus { forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(a, x)}
    axiom axGeqMinus {forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) <==> geq(minus(a, y), x)}

}
