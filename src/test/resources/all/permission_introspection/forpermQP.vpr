// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

//:: IgnoreFile(/Carbon/issue/243/)
field f: Int

   method m1(x: Ref, y: Ref, z: Ref) {
       inhale acc(x.f)
       inhale acc(y.f) && acc(z.f)
       inhale y != x
       inhale z != x

       var g: Ref

       inhale acc(g.f)
       inhale forall a: Ref :: a == g ==> acc(a.f) && a.f < 3

       assert !forperm a: Ref [a.f] :: a.f > 3

       inhale forall a: Ref :: a == x || a == y ==> a.f == 4
       inhale forall a: Ref :: a == z ==> a.f == 10

       assert forperm a: Ref [a.f] :: a == g || a.f > 3
   }

   method m2(x: Ref, y: Ref){
       inhale forall a: Ref :: a == x ==> P(x, 3)
       inhale forall a: Ref :: a == y ==> P(y, 0)

       assert forperm a: Ref, i: Int [P(a, i)] :: i >= 0
   }

method m3(x: Ref, y: Ref, z: Ref){
    inhale acc(x.f)
    inhale acc(z.f)
    inhale x.f == 5
    inhale z.f == 10
    inhale x != y
    inhale z != y
    assert forall a: Ref :: perm(a.f) == write ==> a == x || a == z
    inhale forall a: Ref :: a == x || a == z ==> acc(a.f) --* acc(y.f)

    assert forperm a: Ref [a.f] :: a.f > 0

    assert forperm a: Ref [acc(a.f) --* acc(y.f)] :: a == x || a == z
    assert forperm a: Ref, b: Ref [acc(a.f) --* acc(b.f)] :: b == y
}

method m4(x: Ref, y: Ref) {
    inhale forall a: Ref :: (a == x || a == y) ==> p2(a,x)
    inhale x != y

    assert forperm a: Ref [p2(a,a)] :: a == x
}

method m5(x: Ref, y: Ref, z: Ref) {
    inhale x != y
    inhale z != y
    inhale forall a: Ref :: a == x ==> P(a,3)
    inhale forall a: Ref :: (a == y ==> P(a,10)) && (a == z ==> P(a,3))

    assert forperm a: Ref [P(a,3)] :: a == x || a == z
}

method m6(x: Ref, y: Ref) {
    inhale forall a: Ref :: a == x ==> P(a,10)
    inhale forall a: Ref :: a == y ==> P(a,5)
    inhale x != y

    assert forperm a: Ref [P(a,10)] :: a == x
}

method m7(xs: Set[Ref], ys: Set[Ref], zs: Set[Ref]) {
    inhale (forall x: Ref :: x in xs ==> acc(x.f)) --* (forall y: Ref :: y in ys ==> acc(y.f))
    inhale (forall z: Ref :: z in zs ==> acc(z.f)) --* (forall y: Ref :: y in ys ==> acc(y.f))

    assert forperm a: Perm [(forall x: Ref :: x in xs ==> acc(x.f, a)) --* (forall y: Ref :: y in ys ==> acc(y.f, a))] :: a == write
}

predicate P(x: Ref, i: Int) {
    acc(x.f) && x.f > i
}

predicate p2(x: Ref, y: Ref) {
    acc(x.f) && acc(y.f)
}
//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axUnitJoinable { forall p: Perm :: {joinable(p, unit())} joinable(p, unit())}
    axiom axJoinableComm { forall p: Perm, q: Perm :: {joinable(p, q)} joinable(p, q) == joinable(q, p)}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}

    axiom axGeqPlus { forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(a, x)}
    axiom axGeqMinus {forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) <==> geq(minus(a, y), x)}

}
