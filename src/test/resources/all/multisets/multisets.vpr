// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

method test01() {
  var B1: Multiset[Int]
  var B2: Multiset[Int]
  B1 := Multiset(1)
  B2 := Multiset(1, 1)

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert B1 == B2
}

method test02() {
  var B: Multiset[Int] := Multiset(1,2,3,3,1)
  assert |B| == 5
  assert |Multiset[Int]()| == 0
}

method test03(B: Multiset[Int], n: Int, x: Int, y: Int)
  requires |B| == n
  requires (x in B) > 0
  requires (y in B) > 0
{
  var B1: Multiset[Int] := B setminus Multiset[Int]()
  assert (x in B1) > 0
  assert (y in B1) > 0
  assert |B1| == n
}

method test04a(B: Multiset[Int], n: Int, x: Int, y: Int)
  requires |B| == n
  requires (x in B) > 0
  requires (y in B) > 0
  requires x != y
{
  var B1: Multiset[Int] := B setminus Multiset(x)
  assert (y in B1) > 0
  assert |B1| == n - 1
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert (x in B1) > 0
}

/* Copy of test04a with some lines commented */
method test04b(B: Multiset[Int], n: Int, x: Int, y: Int)
  requires |B| == n
  requires (x in B) > 0
//  requires (y in B) > 0
  requires x != y
{
  var B1: Multiset[Int] := B setminus Multiset(x)
  assert |B1| == n - 1

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert (x in B1) > 0
}

method test05(B: Multiset[Int], n: Int, x: Int)
  requires |B| == n
{
  var B1: Multiset[Int] := B union B
  assert (x in B1) > 0 <==> (x in B) > 0
  assert |B1| == 2*n
}

method test06a(B: Multiset[Int], n: Int, x: Int, b:Bool)
  requires |B| == n
{
  var B1: Multiset[Int] := B intersection B

  // NOTE: cardinality for multisets has no strong axioms
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert |B1| == n
}

method test06b(B: Multiset[Int], n: Int, x: Int, b:Bool)
  requires |B| == n
{
  var B1: Multiset[Int] := B intersection B
  // NOTE: cardinality for multisets has no strong axioms
  // But equality can be used to overcome this incompleteness
  assert B1 == B
  assert |B1| == n
}

method test07(B: Multiset[Int], n: Int, x: Int, y: Int)
  requires |B| == n
{
  var B1: Multiset[Int] := B union Multiset(x, y)
  assert (x in B1) > 0
  assert (y in B1) > 0
  assert |B1| == n + 2
}

method test08(B: Multiset[Int], n: Int, x: Int, y: Int)
  requires |B| == n
{
  var B1: Multiset[Int] := B intersection Multiset(x, y)
  assert (x in B1) > 0  <==> (x in B) > 0
  // NOTE: cardinality for multisets has no strong axioms
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert |B1| <= 2
}

method test09(A: Multiset[Int], B:Multiset[Int], C:Multiset[Int])
  requires A union B == C
{
  assert A subset C
  assert B subset C
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert A subset B
}


//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axUnitJoinable { forall p: Perm :: {joinable(p, unit())} joinable(p, unit())}
    axiom axJoinableComm { forall p: Perm, q: Perm :: {joinable(p, q)} joinable(p, q) == joinable(q, p)}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}

    axiom axGeqPlus { forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(a, x)}
    axiom axGeqMinus {forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(minus(a, y), x)}
    axiom axMinusUneq { forall p: Perm, q: Perm :: {geq(p, q)} geq(p, q) && p != q ==> minus(p, q) != unit()}

}
