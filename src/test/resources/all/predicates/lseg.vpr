// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field next: Ref
field value: Int

predicate lseg(this: Ref, end: Ref) {
    acc(this.value, write) && acc(this.next, write) &&
       (this.next != end ==> this.next != null && acc(lseg(this.next, end), write))
}

function get(this: Ref, i: Int, end: Ref): Int
    requires acc(lseg(this, end), write)
    requires 0 <= i && i < length(this, end)
{
    unfolding acc(lseg(this, end), write) in (i == 0 ? this.value : get(this.next, i-1, end))
}

function length(this: Ref, end: Ref): Int
    requires acc(lseg(this, end), write)
    ensures result > 0
{
    unfolding acc(lseg(this, end), write) in (this.next == end ? 1 : 1 + length(this.next, end))
}

method init(this: Ref, val: Int)
    requires acc(this.next, write)
    requires acc(this.value, write)
    ensures acc(lseg(this, null), write)
    ensures length(this, null) == 1
    ensures get(this, 0, null) == val
{
    this.next := null
    this.value := val
    fold acc(lseg(this, null), write)
}

method initUnitCycle(this: Ref, val: Int)
    requires acc(this.next, write)
    requires acc(this.value, write)
    ensures acc(lseg(this, this), write)
    ensures length(this, this) == 1
    ensures get(this, 0, this) == val
    ensures unfolding acc(lseg(this, this), write) in this.next == this
{
    this.next := this
    this.value := val
    fold acc(lseg(this, this), write)
}

method addAtEnd(this: Ref, end: Ref, val: Int)
    requires acc(lseg(this, end), write)
    ensures acc(lseg(this, end), write) /* POST1 */
    ensures length(this, end) == (old(length(this, end)) + 1) /* POST2 */
    ensures (forall i: Int :: (0 <= i && i < old(length(this, end))) ==> (get(this, i, end) == old(get(this, i, end)))) /* POST3 */
    ensures get(this, length(this, end) - 1, end) == val /* POST4 */
{
    var n: Ref

    unfold acc(lseg(this, end), write)

    if (this.next == end) {
        n := new(*)
        n.next := end
        n.value := val
        this.next := n
        fold acc(lseg(n, end), write)
    } else {
        addAtEnd(this.next, end, val)
    }

    fold acc(lseg(this, end), write)
}

method t1()
{
    var n: Ref
    n := new(next, value)
    init(n, 0)
    assert get(n, 0, null) == 0
    addAtEnd(n, null, 1)
    assert get(n, 0, null) == 0
    assert get(n, 1, null) == 1
}

method t2()
{
    var n: Ref
    n := new(*)
    initUnitCycle(n, 0)
    assert get(n, 0, n) == 0
    addAtEnd(n, n, 1)
    assert get(n, 0, n) == 0
    assert get(n, 1, n) == 1
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(_x: Perm, _y: Perm): Perm
    function minus(_x: Perm, _y: Perm): Perm
    function geq(_x: Perm, _y: Perm): Bool
    function joinable(_x: Perm, _y: Perm): Bool

    function times(_x: Perm, _y: Perm): Perm

    //Auxiliary functions
    function share(_x: Rational): Perm
    function valid_share(_x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall _a: Int, _b: Int :: {biConstr(_a, _b)} biConstr(_a, _b) == share(_a/_b)}


    axiom axValid { forall _x: Rational :: {valid_share(_x)}
        valid_share(_x) <==> (_x >= 0/1 && _x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall _a: Rational, _b: Rational :: { share(_a), share(_b) }
        share(_a) == share(_b) ==> _a == _b
    }
    axiom axPlus { forall _a: Rational, _b: Rational :: { plus(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) ==> plus(share(_a), share(_b)) == share(_a + _b)
    }
    axiom axMinus { forall _a: Rational, _b: Rational :: { minus(share(_a), share(_b)) }
        geq(share(_a), share(_b)) ==> minus(share(_a), share(_b)) == share(_a - _b)
    }
    axiom axCanJoin { forall _a: Rational, _b: Rational :: { joinable(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) <==> valid_share(_a) && valid_share(_b) && valid_share(_a + _b)
    }
    axiom axGeq { forall _a: Rational, _b: Rational :: { geq(share(_a), share(_b)) }
        geq(share(_a), share(_b)) <==> valid_share(_a) && valid_share(_b) && valid_share(_a - _b)
    }
    axiom axMul { forall _a: Rational, _b: Rational :: {times(share(_a), share(_b))} times(share(_a), share(_b)) == share(_a * _b)}

    axiom axJoinComm {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == plus(_q, _p)}
    axiom axJoinAssoc {forall _p: Perm, _q: Perm, _r: Perm :: {plus(plus(_p, _q), _r)} plus(plus(_p, _q), _r) == plus(_p, plus(_q, _r))}
    axiom axJoinCancel { forall _p: Perm, _q: Perm, _x: Perm :: {plus(_p, _x), plus(_q, _x)} plus(_p, _x) == plus(_q, _x) ==> _p == _q}

    axiom axUnitGeq { forall _p: Perm :: {geq(_p, unit())} geq(_p, unit())}
    axiom axUnitGeq2 { forall _p: Perm :: {geq(unit(),_p)} geq(unit(),_p) <==> _p == unit()}
    axiom axFullGeq { forall _p: Perm :: {geq(full(),_p)} geq(full(),_p)}
    axiom axFullGeq2 { forall _p: Perm :: {geq(_p, full())} geq(_p, full()) <==> _p == full()}

    axiom axUnitJoin { forall _p: Perm :: {plus(unit(),_p)} plus(unit(),_p) == _p}
    axiom axUnitJoinable { forall _p: Perm :: {joinable(_p, unit())} joinable(_p, unit())}
    axiom axJoinableComm { forall _p: Perm, _q: Perm :: {joinable(_p, _q)} joinable(_p, _q) == joinable(_q,_p)}
    axiom axTimes0 { forall _p: Perm :: {times(unit(),_p)} times(unit(),_p) == unit()}
    axiom axTimes1 { forall _p: Perm :: {times(full(),_p)} times(unit(),_p) == _p}

    axiom axGeqPlus { forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(_a, _x)}
    axiom axGeqMinus {forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(minus(_a, _y), _x)}
    axiom axMinusUneq { forall _p: Perm, _q: Perm :: {geq(_p, _q)} geq(_p, _q) && _p != _q ==> minus(_p, _q) != unit()}

}
