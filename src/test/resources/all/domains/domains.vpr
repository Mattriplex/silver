// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

domain List[T] {
    function nil(): List[T]
    function cons(x: T, xs: List[T]): List[T]
    function length(xs: List[T]): Int
    axiom nil_length {
        length((nil() : List[T])) == 0
    }
    axiom cons_length {
        forall x: T :: forall xs: List[T] :: length(cons(x, xs)) == (length(xs) + 1)
    }
    axiom nil_cons {
        forall z: T :: forall zs: List[T] :: cons(z, zs) != nil()
    }
}

method test(x: Int, xs: List[Int]) {
    var n: List[Int] := nil()
    assert length(n) == 0
    assert n != cons(x, xs)
    assert length(cons(1, n)) == 1
}

domain Pair[A, B] {
    function Pair_pair(a: A, b: B): Pair[A, B]

    function Pair_first(p: Pair[A, B]): A
    function Pair_second(p: Pair[A, B]): B

    axiom Pair_access_first {
        forall a: A, b: B :: {Pair_first(Pair_pair(a, b))} Pair_first(Pair_pair(a, b)) == a
    }
    axiom Pair_access_second {
        forall a: A, b: B :: {Pair_second(Pair_pair(a, b))} Pair_second(Pair_pair(a, b)) == b
    }
}

domain Triple[A, B, C] {
    function Triple_triple(a: A, b: B, c: C): Triple[A, B, C]

    function Triple_first(t: Triple[A, B, C]): A
    function Triple_second(t: Triple[A, B, C]): B
    function Triple_third(t: Triple[A, B, C]): C

    function Triple_isPrefix(p: Pair[A, B], t: Triple[A, B, C]): Bool

    axiom Triple_access_first {
        forall a: A, b: B, c: C :: { Triple_first(Triple_triple(a, b, c)) } Triple_first(Triple_triple(a, b, c)) == a
    }
    axiom Triple_access_second {
        forall a: A, b: B, c: C :: { Triple_second(Triple_triple(a, b, c)) } Triple_second(Triple_triple(a, b, c)) == b
    }
    axiom Triple_access_third {
        forall a: A, b: B, c: C :: {Triple_third(Triple_triple(a, b, c))} Triple_third(Triple_triple(a, b, c)) == c
    }

    axiom Triple_is_prefix {
      forall p: Pair[A, B], t: Triple[A, B, C] ::
        Triple_isPrefix(p, t) ==
             ((Pair_first(p) == Triple_first(t))
          && (Pair_second(p) == Triple_second(t)))
  }
}

method test2(a: Int, b: Bool) {
  assert Pair_first(Pair_pair(a, b)) == a
  assert Pair_second(Pair_pair(a, b)) == b

  var b2: Bool := true
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert Pair_second(Pair_pair(a, b)) == b2
}

method test3(a: Int, b: Bool, c: Ref) {
  assert Triple_first(Triple_triple(a, b, c)) == a
  assert Triple_second(Triple_triple(a, b, c)) == b
  assert Triple_third(Triple_triple(a, b, c)) == c

  var b2: Bool := true
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert Triple_second(Triple_triple(a, b, c)) == b2
}

method test4(a: Int, b: Bool, c: Ref) {
  var p: Pair[Int, Bool] := Pair_pair(a, b)
  var t: Triple[Int, Bool, Ref] := Triple_triple(a, b, c)
  assert Triple_isPrefix(p, t)

  var t2: Triple[Int, Bool, Ref] := Triple_triple(a, false, c)
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert Triple_isPrefix(p, t2)
}

domain L {
  function f1(x: Int): Int
  function f2(x: Int): Int
}

// test trigger parsing
method t5() returns () {
  assume forall i: Int :: {f1(i),f2(i)} f1(i) > 0
}

/*
 * The following tests were created to test Silicon's handling of higher-ranked domains.
 */

domain Foo[A] {
  function foo(a: A): Int
  function fooid(a: A): A

  axiom foo_ax1 {forall a: A :: foo(a) > 0}
  axiom foo_ax2 {forall a: A :: fooid(a) == a}
}

method t6() {
  assert foo(1) > 0
  assert foo(null) > 0
  assert foo(none) > 0
}

domain Bar[A, B] {
  function barfoo1(a: A): Bool
  function barfoo2(a: A): Int

  axiom bar_ax1 {forall a: A :: barfoo1(a) == true}
  axiom bar_ax2 {forall b: B :: barfoo1(null) == true}
  axiom bar_ax3 {forall a: A :: barfoo2(a) != hide(a)}
}

domain Hidden[A] {
  function hide(a: A): Int

  axiom hidden_ax1 {forall a: A :: hide(a) == 0}
}

method test7() {
  assert barfoo2(101) != 0
}

domain D10A[A] {
  function hide2(a: A): Int
}

domain D10B {
  axiom d10b_ax1 {forall x: Int :: hide2(x) > 0}
}

domain D10C[A] {
  axiom d10c_ax1 {forall r: Ref :: hide2(r) < 0}
}

method test8() {
  assert hide2(101) > 0
  assert hide2(null) < 0
}

domain Cell[A] {
  function Cell_cell(a: A): Cell[A]
	function Cell_get(c: Cell[A]): A

	axiom cell_ax1 {forall a: A :: Cell_get(Cell_cell(a)) == a}
}

method test9() {
	var c1: Cell[Int] := Cell_cell(0)

  assert c1 == Cell_cell(0)
	assert Cell_get(c1) == 0
	assert Cell_get(c1) == Cell_get(Cell_cell(0))

	var c2: Cell[Ref] := Cell_cell(null)

	assert Cell_get(c2) == null
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axUnitJoinable { forall p: Perm :: {joinable(p, unit())} joinable(p, unit())}
    axiom axJoinableComm { forall p: Perm, q: Perm :: {joinable(p, q)} joinable(p, q) == joinable(q, p)}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}

    axiom axGeqPlus { forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(a, x)}
    axiom axGeqMinus {forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) && joinable(x, y) <==> geq(minus(a, y), x) && geq(a, y)}

}
