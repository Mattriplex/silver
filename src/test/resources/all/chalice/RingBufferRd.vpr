// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field data: Seq[Int];  // the storage
field first: Int;      // index of the first element in the queue
field len: Int;        // number of elements in the queue

predicate Valid(this: Ref) {
    acc(this.data, write) && acc(this.first, write) && acc(this.len, write) &&
    0 <= this.first && 0 <= this.len &&
    (|this.data| == 0 ==> this.len == 0 && this.first == 0) &&
    (|this.data| > 0 ==> this.len <= |this.data| && this.first < |this.data|)
}

function Contents(this: Ref): Seq[Int]
    requires acc(Valid(this), wildcard)
  {
    unfolding acc(Valid(this), wildcard) in
     |this.data| == 0 ? Seq[Int]()
                  : (this.first + this.len <= |this.data| ? this.data[this.first..this.first+this.len]
                                           : this.data[this.first..] ++ this.data[..this.first+this.len-|this.data|])
  }

function Capacity(this: Ref): Int
    requires acc(Valid(this), wildcard)
  {
    unfolding acc(Valid(this), wildcard) in |this.data|
  }

  method Create(this: Ref, n: Int)
    requires 0 <= n;
    requires acc(this.data, write) && acc(this.first, write) && acc(this.len, write);
    ensures acc(Valid(this), write);
    ensures Contents(this) == Seq[Int]() && Capacity(this) == n;
  {
    // simulate creating an array of length n
    var i: Int;
    i := n;
    this.data := Seq[Int]();
    while(0 < i)
      invariant acc(this.data, write) && 0 <= i && |this.data| == n - i;
    {
      this.data := this.data ++ Seq(0);
      i := i - 1;
    }
    this.first := 0;
    this.len := 0;
    fold acc(Valid(this), write);
  }

method Clear(this: Ref)
    requires acc(Valid(this), write);
    ensures acc(Valid(this), write);
    ensures Contents(this) == Seq[Int]() && Capacity(this) == old(Capacity(this));
  {
    unfold acc(Valid(this), write);
    this.len := 0;
    fold acc(Valid(this), write);
  }

method Head(this: Ref) returns (x: Int)
    requires acc(Valid(this), wildcard);
    requires Contents(this) != Seq[Int]();
    ensures acc(Valid(this), wildcard);
    ensures Contents(this) == old(Contents(this)) && x == Contents(this)[0];
    ensures Capacity(this) == old(Capacity(this));
  {
    unfold acc(Valid(this), wildcard);
    x := this.data[this.first];
    fold acc(Valid(this), wildcard);
  }

  function HeadF(this: Ref): Int
    requires acc(Valid(this), wildcard);
    requires Contents(this) != Seq[Int]();
    ensures result == Contents(this)[0];
  {
    unfolding acc(Valid(this), wildcard) in this.data[this.first]
  }

    method Push(this: Ref, x: Int)
    requires acc(Valid(this), write);
    requires |Contents(this)| != Capacity(this);
    ensures acc(Valid(this), write);
    ensures Contents(this) == old(Contents(this)) ++ Seq(x);
    ensures Capacity(this) == old(Capacity(this));
  {
    unfold acc(Valid(this), write);
    var nextEmpty: Int;
    if (this.first + this.len < |this.data|)
    {
      nextEmpty := this.first + this.len;
    }
    else
    {
      nextEmpty := this.first + this.len - |this.data|;
    }
    this.data := this.data[..nextEmpty] ++ Seq(x) ++  this.data[nextEmpty+1..];
    this.len := this.len + 1;
    fold acc(Valid(this), write);
  }

    method Pop(this: Ref) returns (x: Int)
    requires acc(Valid(this), write);
    requires Contents(this) != Seq(1)[1..];
    ensures acc(Valid(this), write);
    ensures x == old(Contents(this))[0] && Contents(this) == old(Contents(this))[1..] && Capacity(this) == old(Capacity(this));
  {
    unfold acc(Valid(this), write);
    x := this.data[this.first];
    if(this.first + 1 == |this.data|)
    {
      this.first := 0;
    }
    else
    {
      this.first := this.first + 1;
    }
    this.len := this.len - 1;
    fold acc(Valid(this), write);
  }

  method TestHarness(x: Int, y: Int, z: Int)
  {
    var b: Ref;
    b := new(*);
    Create(b, 2);
    Push(b, x);
    Push(b, y);
    var h: Int;
    h := Pop(b);  assert h == x;
    Push(b, z);
    h := Pop(b);  assert h == y;
    h := Pop(b);  assert h == z;
    assert Capacity(b) == 2;
  }


//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axUnitJoinable { forall p: Perm :: {joinable(p, unit())} joinable(p, unit())}
    axiom axJoinableComm { forall p: Perm, q: Perm :: {joinable(p, q)} joinable(p, q) == joinable(q, p)}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}

    axiom axGeqPlus { forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(a, x)}
    axiom axGeqMinus {forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) <==> geq(minus(a, y), x)}

}
