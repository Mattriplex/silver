// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/
   //:: IgnoreFile(/carbon/issue/999/)

field data: Seq[Int];  // the storage
field first: Int;      // index of the first element in the queue
field len: Int;        // number of elements in the queue

predicate Valid(this: Ref) {
    acc(this.data, write) && acc(this.first, write) && acc(this.len, write) &&
    0 <= this.first && 0 <= this.len &&
    (|this.data| == 0 ==> this.len == 0 && this.first == 0) &&
    (|this.data| > 0 ==> this.len <= |this.data| && this.first < |this.data|)
}

function Contents(this: Ref): Seq[Int]
    requires acc(Valid(this), wildcard)
  {
    unfolding acc(Valid(this), wildcard) in
     |this.data| == 0 ? Seq[Int]()
                  : (this.first + this.len <= |this.data| ? this.data[this.first..this.first+this.len]
                                           : this.data[this.first..] ++ this.data[..this.first+this.len-|this.data|])
  }

function Capacity(this: Ref): Int
    requires acc(Valid(this), wildcard)
  {
    unfolding acc(Valid(this), wildcard) in |this.data|
  }

  method Create(this: Ref, n: Int)
    requires 0 <= n;
    requires acc(this.data, write) && acc(this.first, write) && acc(this.len, write);
    ensures acc(Valid(this));
    ensures Contents(this) == Seq[Int]() && Capacity(this) == n;
  {
    // simulate creating an array of length n
    var i: Int;
    i := n;
    this.data := Seq[Int]();
    while(0 < i)
      invariant acc(this.data, write) && 0 <= i && |this.data| == n - i;
    {
      this.data := this.data ++ Seq(0);
      i := i - 1;
    }
    this.first := 0;
    this.len := 0;
    fold acc(Valid(this));
  }

method Clear(this: Ref)
    requires acc(Valid(this));
    ensures acc(Valid(this));
    ensures Contents(this) == Seq[Int]() && Capacity(this) == old(Capacity(this));
  {
    unfold acc(Valid(this));
    this.len := 0;
    fold acc(Valid(this));
  }

method Head(this: Ref) returns (x: Int)
    requires acc(Valid(this), wildcard);
    requires Contents(this) != Seq[Int]();
    ensures acc(Valid(this), wildcard);
    ensures Contents(this) == old(Contents(this)) && x == Contents(this)[0];
    ensures Capacity(this) == old(Capacity(this));
  {
    unfold acc(Valid(this), wildcard);
    x := this.data[this.first];
    fold acc(Valid(this), wildcard);
  }

  function HeadF(this: Ref): Int
    requires acc(Valid(this), wildcard);
    requires Contents(this) != Seq[Int]();
    ensures result == Contents(this)[0];
  {
    unfolding acc(Valid(this), wildcard) in this.data[this.first]
  }

    method Push(this: Ref, x: Int)
    requires acc(Valid(this));
    requires |Contents(this)| != Capacity(this);
    ensures acc(Valid(this));
    ensures Contents(this) == old(Contents(this)) ++ Seq(x);
    ensures Capacity(this) == old(Capacity(this));
  {
    unfold acc(Valid(this));
    var nextEmpty: Int;
    if (this.first + this.len < |this.data|)
    {
      nextEmpty := this.first + this.len;
    }
    else
    {
      nextEmpty := this.first + this.len - |this.data|;
    }
    this.data := this.data[..nextEmpty] ++ Seq(x) ++  this.data[nextEmpty+1..];
    this.len := this.len + 1;
    fold acc(Valid(this));
  }

    method Pop(this: Ref) returns (x: Int)
    requires acc(Valid(this));
    requires Contents(this) != Seq(1)[1..];
    ensures acc(Valid(this));
    ensures x == old(Contents(this))[0] && Contents(this) == old(Contents(this))[1..] && Capacity(this) == old(Capacity(this));
  {
    unfold acc(Valid(this));
    x := this.data[this.first];
    if(this.first + 1 == |this.data|)
    {
      this.first := 0;
    }
    else
    {
      this.first := this.first + 1;
    }
    this.len := this.len - 1;
    fold acc(Valid(this));
  }

  method TestHarness(x: Int, y: Int, z: Int)
  {
    var b: Ref;
    b := new(*);
    Create(b, 2);
    Push(b, x);
    Push(b, y);
    var h: Int;
    h := Pop(b);  assert h == x;
    Push(b, z);
    h := Pop(b);  assert h == y;
    h := Pop(b);  assert h == z;
    assert Capacity(b) == 2;
  }


//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(_x: Perm, _y: Perm): Perm
    function minus(_x: Perm, _y: Perm): Perm
    function geq(_x: Perm, _y: Perm): Bool
    function joinable(_x: Perm, _y: Perm): Bool

    function times(_x: Perm, _y: Perm): Perm

    //Auxiliary functions
    function share(_x: Rational): Perm
    function valid_share(_x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall _a: Int, _b: Int :: {biConstr(_a, _b)} biConstr(_a, _b) == share(_a/_b)}


    axiom axValid { forall _x: Rational :: {valid_share(_x)}
        valid_share(_x) <==> (_x >= 0/1 && _x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall _a: Rational, _b: Rational :: { share(_a), share(_b) }
        share(_a) == share(_b) ==> _a == _b
    }
    axiom axPlus { forall _a: Rational, _b: Rational :: { plus(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) ==> plus(share(_a), share(_b)) == share(_a + _b)
    }
    axiom axMinus { forall _a: Rational, _b: Rational :: { minus(share(_a), share(_b)) }
        geq(share(_a), share(_b)) ==> minus(share(_a), share(_b)) == share(_a - _b)
    }
    axiom axCanJoin { forall _a: Rational, _b: Rational :: { joinable(share(_a), share(_b)) }
        valid_share(_a) && valid_share(_b) ==> (joinable(share(_a), share(_b)) == valid_share(_a + _b))
    }
    axiom axGeq { forall _a: Rational, _b: Rational :: { geq(share(_a), share(_b)) }
        valid_share(_a) && valid_share(_b) ==> (geq(share(_a), share(_b)) <==> valid_share(_a - _b))
    }
    axiom axMul { forall _a: Rational, _b: Rational :: {times(share(_a), share(_b))} times(share(_a), share(_b)) == share(_a * _b)}

    axiom axJoinComm {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == plus(_q, _p)}
    axiom axJoinAssoc {forall _p: Perm, _q: Perm, _r: Perm :: {plus(plus(_p, _q), _r)} plus(plus(_p, _q), _r) == plus(_p, plus(_q, _r))}
    axiom axJoinCancel { forall _p: Perm, _q: Perm, _x: Perm :: {plus(_p, _x), plus(_q, _x)} plus(_p, _x) == plus(_q, _x) ==> _p == _q}

    axiom axUnitGeq { forall _p: Perm :: {geq(_p, unit())} geq(_p, unit())}
    axiom axUnitGeq2 { forall _p: Perm :: {geq(unit(),_p)} geq(unit(),_p) <==> _p == unit()}
    axiom axFullGeq { forall _p: Perm :: {geq(full(),_p)} geq(full(),_p)}
    axiom axFullGeq2 { forall _p: Perm :: {geq(_p, full())} geq(_p, full()) <==> _p == full()}
    axiom axGeqId { forall _p: Perm :: {geq(_p, _p)} geq(_p, _p)}
    axiom axMinusId { forall _p: Perm :: {minus(_p, _p)} minus(_p, _p) == unit()}


    axiom axUnitJoin { forall _p: Perm :: {plus(unit(),_p)} plus(unit(),_p) == _p}
    axiom axUnitJoinable { forall _p: Perm :: {joinable(_p, unit())} joinable(_p, unit())}
    axiom axJoinableComm { forall _p: Perm, _q: Perm :: {joinable(_p, _q)} joinable(_p, _q) == joinable(_q,_p)}
    axiom axTimes0 { forall _p: Perm :: {times(unit(),_p)} times(unit(),_p) == unit()}
    axiom axTimes1 { forall _p: Perm :: {times(full(),_p)} times(full(),_p) == _p}

    axiom axGeqPlus { forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(_a, _x)}
    axiom axGeqMinus {forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(minus(_a, _y), _x)}
    axiom axMinusUneq { forall _p: Perm, _q: Perm :: {geq(_p, _q)} geq(_p, _q) && _p != _q ==> minus(_p, _q) != unit()}

    axiom axPositive {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == unit() ==> _p == unit() && _q == unit()}
    axiom axPlusGeq {forall _p: Perm, _q: Perm :: {geq(plus(_p, _q), _p)} /*joinable(_p, _q) ==>*/ geq(plus(_p, _q), _p)}
    axiom axMinusCancel {forall _p: Perm, _q: Perm :: {minus(plus(_p, _q), _q)} minus(plus(_p, _q), _q) == _p}

}


domain _Scalar { //Fractional scalars
    function zeroS(): Scalar 
    function oneS(): Scalar
    function plusS(_x: Scalar, _y: Scalar): Scalar
    function minusS(_x: Scalar, _y: Scalar): Scalar
    function geqS(_x: Scalar, _y: Scalar): Bool
    //function joinable(_x: Perm, _y: Perm): Bool //not needed, joinability depends on perms' joinable predicate

    function timesS(_x: Scalar, _y: Scalar): Scalar
    function applyS(_x: Scalar, _y: Perm): Perm
    //Auxiliary functions
//Integer scalars
    function stack(_r: Rational) : Scalar
    axiom axStack0 { stack(0/1) == zeroS()}
    axiom axStack1 { stack(1/1) == oneS() }
    axiom axPlusStack { forall _n: Rational, _m: Rational :: {plusS(stack(_n), stack(_m))} _m >= 0/1 ==> _n >= 0/1 ==> plusS(stack(_n), stack(_m)) == stack(_m + _n)}
    axiom axGeqStack { forall _n: Rational, _m: Rational :: {geqS(stack(_n), stack(_m))} _m >= 0/1 ==> _n >= 0/1 ==> geqS(stack(_n), stack(_m)) <==> _n >= _m}
    axiom axMinusStack { forall _n: Rational, _m: Rational ::{minusS(stack(_n), stack(_m))} _m >= 0/1 ==> _n >= 0/1 ==> geqS(stack(_n), stack(_m)) ==> minusS(stack(_n), stack(_m)) == stack(_n - _m)}
    axiom axStackApply { forall _p: Rational, _n: Rational :: {applyS(stack(_n), share(_p))} valid_share(_n * _p) ==> applyS(stack(_n), share(_p)) == share(_n * _p)}
    axiom axStackTimes { forall _n: Rational, _m: Rational :: {timesS(stack(_n), stack(_m))} _m >= 0/1 ==> _n >= 0/1 ==> timesS(stack(_n), stack(_m)) == stack(_m * _n)}

//PLUS
    axiom axPlusZero{ forall _s: Scalar :: {plusS(zeroS(),_s)} plusS(zeroS(),_s) == _s}
    axiom axPlusComm {forall _s: Scalar, _t: Scalar :: {plusS(_s, _t)} plusS(_s, _t) == plusS(_t, _s)}

//APPLY
//one = identity function, zero = constant unit() function
    axiom applyZero { forall _p: Perm :: {applyS(zeroS(), _p)} applyS(zeroS(), _p) == unit() }
    axiom applyOne { forall _p: Perm :: {applyS(oneS(), _p)} applyS(oneS(), _p) == _p }


//TIMES

    axiom axTimes0S { forall _s: Scalar :: {timesS(zeroS(), _s)} timesS(zeroS(),_s) == zeroS()}
    axiom axTimes1S { forall _s: Scalar :: {timesS(oneS(),_s)} timesS(oneS(),_s) == _s}
    axiom axTimesComm {forall _s: Scalar, _t: Scalar :: {timesS(_s, _t)} timesS(_s, _t) == timesS(_t, _s)}

//GEQ
    axiom axGeqZero { forall _s: Scalar :: {geqS(_s, zeroS())} geqS(_s, zeroS())}
//MINUS
    axiom axMinusZero { forall _s: Scalar :: {geqS(_s, zeroS())} geqS(_s, zeroS())}

    //additional axioms
    axiom axGeqPlusS { forall _a: Scalar, _x: Scalar, _y: Scalar :: {geqS(_a, plusS(_x, _y))} geqS(_a, plusS(_x, _y)) ==> geqS(_a, _x)}
    axiom axgeqSMinusS {forall _a: Scalar, _x: Scalar, _y: Scalar :: {geqS(_a, plusS(_x, _y))} geqS(_a, plusS(_x, _y)) ==> geqS(minusS(_a, _y), _x)}
    axiom axMinusUneqS { forall _p: Scalar, _q: Scalar :: {geqS(_p, _q)} geqS(_p, _q) && _p != _q ==> minusS(_p, _q) != zeroS()}

    axiom axPositiveS {forall _p: Scalar, _q: Scalar :: {plusS(_p, _q)} plusS(_p, _q) == zeroS() ==> _p == zeroS() && _q == zeroS()}
    axiom axPlusgeqS {forall _p: Scalar, _q: Scalar :: {geqS(plusS(_p, _q), _p)}geqS(plusS(_p, _q), _p)}
    axiom axMinusCancelS {forall _p: Scalar, _q: Scalar :: {minusS(plusS(_p, _q), _q)} minusS(plusS(_p, _q), _q) == _p}

}