// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

  field value: Int
  predicate inv(this: Ref) { acc(this.value, write) }
  function get(this: Ref): Int
    requires acc(inv(this), write)
  { (unfolding acc(inv(this), write) in this.value) }
  method set(this: Ref, newval: Int)
    requires acc(inv(this), write)
    ensures acc(inv(this), write) && ((get(this)) == (newval))
  {
    unfold acc(inv(this), write)
    this.value := newval
    fold acc(inv(this), write)
  }
  method callmethod0(this: Ref)
    requires acc(inv(this), write)
    ensures acc(inv(this), write) && ((get(this)) == (3))
  {
    set(this, 3);
  }
  method callmethod1(this: Ref)
    requires this != null
  {
    //:: ExpectedOutput(call.precondition:insufficient.permission)
    set(this, 3);
  }
  method ifc(this: Ref)
    requires acc(inv(this), write)
    ensures acc(inv(this), write) && get(this) > old(get(this))
  {
    if (get(this) > 0) {
      set(this, get(this) + get(this));
    } else {
      set(this, 2);
    }
  }
  method loop0(this: Ref) returns (r: Int)
    requires acc(inv(this), write) && get(this) > 0
    ensures acc(inv(this), write) && ((r) == (get(this)))
  {
    r := 0
    while (r < (unfolding acc(inv(this), write) in this.value))
      invariant acc(inv(this), write) && r <= get(this)
    {
      r := r + 1
    }
  }
  method loop1(this: Ref) returns (r: Int)
    requires acc(inv(this), write) && get(this) > 0
    ensures acc(inv(this), write) && ((r) == (get(this)))
  {
    r := 0
    while (r < get(this))
      invariant acc(inv(this), write) && r <= (unfolding acc(inv(this), write) in this.value)
    {
      r := r + 1
    }
  }
  method uf0(this: Ref)
    requires acc(this.value, write)
  {
    assert acc(this.value, write)
    fold acc(inv(this), write)
    //:: ExpectedOutput(assert.failed:insufficient.permission)
    assert acc(this.value, write)
  }
  method uf1(this: Ref)
    requires acc(this.value, write)
  {
    assert acc(this.value, write)
    fold acc(inv(this), write)
    assert acc(inv(this), write)
  }
  method uf2(this: Ref)
    requires acc(inv(this), write)
  {
    assert acc(inv(this), write)
    unfold acc(inv(this), write)
    assert acc(this.value, write)
  }
  method uf3(this: Ref)
    requires acc(inv(this), write)
  {
    assert acc(inv(this), write)
    unfold acc(inv(this), write)
    //:: ExpectedOutput(assert.failed:insufficient.permission)
    assert acc(inv(this), write)
  }
  method badframing0(this: Ref)
    requires this != null
    //:: ExpectedOutput(application.precondition:insufficient.permission)
    requires ((get(this)) == (2))
  {
  }
  method badframing1(this: Ref)
    requires this != null
    //:: ExpectedOutput(not.wellformed:insufficient.permission)
    requires ((this.value) == (2))
  {
  }
  method badframing2(this: Ref)
    requires this != null
    //:: ExpectedOutput(application.precondition:insufficient.permission)
    requires acc(this.value, write) && ((get(this)) == (2))
  {
  }
  method badframing3(this: Ref)
    requires this != null
    //:: ExpectedOutput(not.wellformed:insufficient.permission)
    requires acc(inv(this), write) && ((this.value) == (2))
  {
  }

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axUnitJoinable { forall p: Perm :: {joinable(p, unit())} joinable(p, unit())}
    axiom axJoinableComm { forall p: Perm, q: Perm :: {joinable(p, q)} joinable(p, q) == joinable(q, p)}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}

    axiom axGeqPlus { forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(a, x)}
    axiom axGeqMinus {forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(minus(a, y), x)}
    axiom axMinusUneq { forall p: Perm, q: Perm :: {geq(p, q)} geq(p, q) && p != q ==> minus(p, q) != unit()}

}
