// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field root1 : Ref

	predicate valid1(this: Ref) {
		   acc(this.root1,write)
		&& (this.root1!=null ==> acc(valid(this.root1),write))
		&& (this.root1!=null ==> acc(this.root1.parent,write))
		&& (this.root1!=null ==> this.root1.parent==null)
		&& (this.root1!=null ==> acc(this.root1.root,1/2))
		&& (this.root1!=null ==> this.root1.root==(this.root1))
	}


	method init(this: Ref)
		requires acc(this.root1,write);
		ensures acc(valid1(this),write);
	{
		this.root1 := null;
		fold acc(valid1(this),write);
	}

	method has(this:Ref, k : Int) returns (b : Bool)
		requires acc(valid1(this),write);
		ensures acc(valid1(this),write);
	{
	var n : Ref
	var end : Bool
	var p : Ref
	var q : Ref
	var r : Ref
		unfold acc(valid1(this),write);
		if (this.root1==null){
			b := false;
			fold acc(valid1(this),write);
		}else{
			n := this.root1
			b := false;
			end := false;
			fold acc(udParentValid(n),write);
			while (!end)
				invariant acc(this.root1,write);
				invariant this.root1 != null && acc(this.root1.parent,1/2);
				invariant n!=null;
				invariant acc(valid(n),write);
				invariant acc(n.root,4/10);
				invariant acc(udParentValid(n),write);
				invariant unfolding acc(valid(n),write) in n.root==(this.root1);
				invariant this.root1!=null;
			{
				unfold acc(valid(n),write);
				unfold acc(validRest(n),write);

				if (n.key==k){
					b := true;
					fold acc(validRest(n),write);
					fold acc(valid(n),write);
					end := true;
				}else{
					if (n.key<k){
						if (n.left==null){
							end := true;
							fold acc(validRest(n),write);
							fold acc(valid(n),write);
						}else{
							p := n;
							unfold acc(leftValid(p),write);
							n := p.left;
							p.leftDown := true;
							fold acc(leftOpen(p),write);
							fold acc(udValid(p),write);
							fold acc(udParentValid(n),write);
						}
					}else{
						if (n.right==null){
							end := true;
							fold acc(validRest(n),write);
							fold acc(valid(n),write);
						}else{
							q := n;
							unfold acc(rightValid(q),write);
							n := q.right;
							q.leftDown := false;
							fold acc(rightOpen(q),write);
							fold acc(udValid(q),write);
							fold acc(udParentValid(n),write);
						}
					}
				}
			}
						end := false;
						while (!end)
							invariant acc(this.root1,write);
							invariant this.root1 != null && acc(this.root1.parent,1/2);
							invariant n!=null;
							invariant acc(valid(n),write);
							invariant acc(udParentValid(n),write);
							invariant acc(n.root,4/10);
							invariant unfolding acc(valid(n),write) in n.root==(this.root1);
							invariant this.root1!=null;
							invariant end==>unfolding acc(udParentValid(n),write) in n.parent==null;
						{
							unfold acc(udParentValid(n),write);
							r := n.parent;
							if (r==null){
								end := true;
								fold acc(udParentValid(n),write);
							}else{
								unfold acc(udValid(r),write);
								if (r.left==n){
									unfold acc(leftOpen(r),write);
									fold   acc(leftValid(r),write);
								}else{
									unfold acc(rightOpen(r),write);
									fold   acc(rightValid(r),write);
								}
								fold acc(validRest(r),write);
								fold acc(valid(r),write);
								n:=r;
							}
						}
						unfold acc(udParentValid(n),write);
						fold acc(valid1(this),write);

		}
	}




// next class


	field key    : Int
	field left   : Ref
	field right  : Ref
	field parent : Ref

	 field leftDown : Bool
	 field root : Ref

	predicate valid(this: Ref){
		   acc(validRest(this),write)
		&& acc(leftValid(this),write)
		&& acc(rightValid(this),write)
	}

	predicate validRest(this: Ref){
		   acc(this.key   ,write)
		&& acc(this.root,    3/10)
		&& acc(this.left  ,3/4)
		&& acc(this.right ,3/4)
		&& acc(this.leftDown,write)
		&& (this.right!=(this.left) || this.right==null)
	}

	predicate rightValid(this: Ref){
		   acc(this.right ,1/4)
		&& acc(this.root,1/10)
		&& (this.right!=null ==> acc(valid(this.right),write))
		&& (this.right!=null ==> acc(this.right.parent,write))
		&& (this.right!=null ==> this.right.parent==this)
		&& (this.right!=null ==> acc(this.right.root,1/2))
		&& (this.right!=null ==> this.right.root==(this.root))
	}
	predicate leftValid(this: Ref){
		   acc(this.left  ,1/4)
		&& acc(this.root,1/10)
		&& (this.left!=null ==> acc(valid(this.left),write))
		&& (this.left!=null ==> acc(this.left.parent,write))
		&& (this.left!=null ==> this.left.parent == this)
		&& (this.left!=null ==> acc(this.left.root,1/2))
		&& (this.left!=null ==> this.left.root == (this.root))
	}

	predicate leftOpen(this: Ref){
		   acc(this.left  ,1/4)
		&& acc(this.root,1/10)
		&& (this.left!=null ==> acc(this.left.parent,1/2))
		&& (this.left!=null ==> this.left.parent==this)
	}

	predicate rightOpen(this: Ref){
		   acc(this.right  ,1/4)
		&& acc(this.root,1/10)
		&& (this.right!=null ==> acc(this.right.parent,1/2))
		&& (this.right!=null ==> this.right.parent==this)
	}

	predicate udParentValid(this: Ref) {
		   acc(this.parent,1/2)
		&& acc(this.root,1/10)
		&& (this.parent!=null ==> acc(udValid(this.parent),write))
		&& (this.parent!=null ==> acc(this.parent.leftDown,1/2))
		&& (this.parent!=null ==> acc(this.parent.left,1/2))
		&& (this.parent!=null ==> ( this.parent.leftDown <==> this.parent.left==this))
		&& (this.parent!=null ==> acc(this.parent.right,1/2))
 		&& (this.parent!=null ==> (!(this.parent.leftDown)<==>this.parent.right==this))
		&& (this.parent!=null ==> acc(this.parent.root,1/2))
		&& (this.parent!=null ==> this.root==(this.parent.root))
		&& (this.parent==null ==> this.root==this)
	}

	predicate udValid(this: Ref){
		   acc(this.key   ,write)
		&& acc(this.leftDown,1/2)
		&& acc(this.left  ,1/4)
		&& acc(this.right ,1/4)
		&& acc(this.root ,1/5)
		&& ( this.leftDown ==> acc(rightValid(this),write))
		&& ( this.leftDown ==> acc(leftOpen(this),write)  )
		&& ((this.leftDown ==> false) ==> acc(leftValid(this),write) )
		&& ((this.leftDown ==> false) ==> acc(rightOpen(this),write) )
		&& acc(udParentValid(this),write)
	}

	method init_2(this:Ref, k : Int)
		requires acc(this.key   ,write);
		requires acc(this.left  ,write);
		requires acc(this.right ,write);
		requires acc(this.leftDown ,write);
		requires acc(this.root,     write);
		ensures acc(valid(this),write);
	{
		this.left   := null;
		this.right  := null;
		this.key    := k;

		fold acc(leftValid(this),write);
		fold acc(rightValid(this),write);
		fold acc(validRest(this),write);
		fold acc(valid(this),write);
	}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(_x: Perm, _y: Perm): Perm
    function minus(_x: Perm, _y: Perm): Perm
    function geq(_x: Perm, _y: Perm): Bool
    function joinable(_x: Perm, _y: Perm): Bool

    function times(_x: Perm, _y: Perm): Perm

    //Auxiliary functions
    function share(_x: Rational): Perm
    function valid_share(_x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall _a: Int, _b: Int :: {biConstr(_a, _b)} biConstr(_a, _b) == share(_a/_b)}


    axiom axValid { forall _x: Rational :: {valid_share(_x)}
        valid_share(_x) <==> (_x >= 0/1 && _x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall _a: Rational, _b: Rational :: { share(_a), share(_b) }
        share(_a) == share(_b) ==> _a == _b
    }
    axiom axPlus { forall _a: Rational, _b: Rational :: { plus(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) ==> plus(share(_a), share(_b)) == share(_a + _b)
    }
    axiom axMinus { forall _a: Rational, _b: Rational :: { minus(share(_a), share(_b)) }
        geq(share(_a), share(_b)) ==> minus(share(_a), share(_b)) == share(_a - _b)
    }
    axiom axCanJoin { forall _a: Rational, _b: Rational :: { joinable(share(_a), share(_b)) }
        valid_share(_a) && valid_share(_b) ==> (joinable(share(_a), share(_b)) == valid_share(_a + _b))
    }
    axiom axGeq { forall _a: Rational, _b: Rational :: { geq(share(_a), share(_b)) }
        valid_share(_a) && valid_share(_b) ==> (geq(share(_a), share(_b)) <==> valid_share(_a - _b))
    }
    axiom axMul { forall _a: Rational, _b: Rational :: {times(share(_a), share(_b))} times(share(_a), share(_b)) == share(_a * _b)}

    axiom axJoinComm {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == plus(_q, _p)}
    axiom axJoinAssoc {forall _p: Perm, _q: Perm, _r: Perm :: {plus(plus(_p, _q), _r)} plus(plus(_p, _q), _r) == plus(_p, plus(_q, _r))}
    axiom axJoinCancel { forall _p: Perm, _q: Perm, _x: Perm :: {plus(_p, _x), plus(_q, _x)} plus(_p, _x) == plus(_q, _x) ==> _p == _q}

    axiom axUnitGeq { forall _p: Perm :: {geq(_p, unit())} geq(_p, unit())}
    axiom axUnitGeq2 { forall _p: Perm :: {geq(unit(),_p)} geq(unit(),_p) <==> _p == unit()}
    axiom axFullGeq { forall _p: Perm :: {geq(full(),_p)} geq(full(),_p)}
    axiom axFullGeq2 { forall _p: Perm :: {geq(_p, full())} geq(_p, full()) <==> _p == full()}
    axiom axGeqId { forall _p: Perm :: {geq(_p, _p)} geq(_p, _p)}
    axiom axMinusId { forall _p: Perm :: {minus(_p, _p)} minus(_p, _p) == unit()}


    axiom axUnitJoin { forall _p: Perm :: {plus(unit(),_p)} plus(unit(),_p) == _p}
    axiom axUnitJoinable { forall _p: Perm :: {joinable(_p, unit())} joinable(_p, unit())}
    axiom axJoinableComm { forall _p: Perm, _q: Perm :: {joinable(_p, _q)} joinable(_p, _q) == joinable(_q,_p)}
    axiom axTimes0 { forall _p: Perm :: {times(unit(),_p)} times(unit(),_p) == unit()}
    axiom axTimes1 { forall _p: Perm :: {times(full(),_p)} times(full(),_p) == _p}

    axiom axGeqPlus { forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(_a, _x)}
    axiom axGeqMinus {forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(minus(_a, _y), _x)}
    axiom axMinusUneq { forall _p: Perm, _q: Perm :: {geq(_p, _q)} geq(_p, _q) && _p != _q ==> minus(_p, _q) != unit()}

    axiom axPositive {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == unit() ==> _p == unit() && _q == unit()}
    axiom axPlusGeq {forall _p: Perm, _q: Perm :: {geq(plus(_p, _q), _p)} /*joinable(_p, _q) ==>*/ geq(plus(_p, _q), _p)}
    axiom axMinusCancel {forall _p: Perm, _q: Perm :: {minus(plus(_p, _q), _q)} minus(plus(_p, _q), _q) == _p}

}


domain _Scalar { //Fractional scalars
    function zeroS(): Scalar 
    function oneS(): Scalar
    function plusS(_x: Scalar, _y: Scalar): Scalar
    function minusS(_x: Scalar, _y: Scalar): Scalar
    function geqS(_x: Scalar, _y: Scalar): Bool
    //function joinable(_x: Perm, _y: Perm): Bool //not needed, joinability depends on perms' joinable predicate

    function timesS(_x: Scalar, _y: Scalar): Scalar
    function applyS(_x: Scalar, _y: Perm): Perm
    //Auxiliary functions
//Integer scalars
    function stack(_r: Rational) : Scalar
    axiom axStack0 { stack(0/1) == zeroS()}
    axiom axStack1 { stack(1/1) == oneS() }
    axiom axPlusStack { forall _n: Rational, _m: Rational :: {plusS(stack(_n), stack(_m))} _m >= 0/1 ==> _n >= 0/1 ==> plusS(stack(_n), stack(_m)) == stack(_m + _n)}
    axiom axGeqStack { forall _n: Rational, _m: Rational :: {geqS(stack(_n), stack(_m))} _m >= 0/1 ==> _n >= 0/1 ==> geqS(stack(_n), stack(_m)) <==> _n >= _m}
    axiom axMinusStack { forall _n: Rational, _m: Rational ::{minusS(stack(_n), stack(_m))} _m >= 0/1 ==> _n >= 0/1 ==> geqS(stack(_n), stack(_m)) ==> minusS(stack(_n), stack(_m)) == stack(_n - _m)}
    axiom axStackApply { forall _p: Rational, _n: Rational :: {applyS(stack(_n), share(_p))} valid_share(_n * _p) ==> applyS(stack(_n), share(_p)) == share(_n * _p)}
    axiom axStackTimes { forall _n: Rational, _m: Rational :: {timesS(stack(_n), stack(_m))} _m >= 0/1 ==> _n >= 0/1 ==> timesS(stack(_n), stack(_m)) == stack(_m * _n)}

//PLUS
    axiom axPlusZero{ forall _s: Scalar :: {plusS(zeroS(),_s)} plusS(zeroS(),_s) == _s}
    axiom axPlusComm {forall _s: Scalar, _t: Scalar :: {plusS(_s, _t)} plusS(_s, _t) == plusS(_t, _s)}

//APPLY
//one = identity function, zero = constant unit() function
    axiom applyZero { forall _p: Perm :: {applyS(zeroS(), _p)} applyS(zeroS(), _p) == unit() }
    axiom applyOne { forall _p: Perm :: {applyS(oneS(), _p)} applyS(oneS(), _p) == _p }


//TIMES

    axiom axTimes0S { forall _s: Scalar :: {timesS(zeroS(), _s)} timesS(zeroS(),_s) == zeroS()}
    axiom axTimes1S { forall _s: Scalar :: {timesS(oneS(),_s)} timesS(oneS(),_s) == _s}
    axiom axTimesComm {forall _s: Scalar, _t: Scalar :: {timesS(_s, _t)} timesS(_s, _t) == timesS(_t, _s)}

//GEQ
    axiom axGeqZero { forall _s: Scalar :: {geqS(_s, zeroS())} geqS(_s, zeroS())}
//MINUS
    axiom axMinusZero { forall _s: Scalar :: {geqS(_s, zeroS())} geqS(_s, zeroS())}

    //additional axioms
    axiom axGeqPlusS { forall _a: Scalar, _x: Scalar, _y: Scalar :: {geqS(_a, plusS(_x, _y))} geqS(_a, plusS(_x, _y)) ==> geqS(_a, _x)}
    axiom axgeqSMinusS {forall _a: Scalar, _x: Scalar, _y: Scalar :: {geqS(_a, plusS(_x, _y))} geqS(_a, plusS(_x, _y)) ==> geqS(minusS(_a, _y), _x)}
    axiom axMinusUneqS { forall _p: Scalar, _q: Scalar :: {geqS(_p, _q)} geqS(_p, _q) && _p != _q ==> minusS(_p, _q) != zeroS()}

    axiom axPositiveS {forall _p: Scalar, _q: Scalar :: {plusS(_p, _q)} plusS(_p, _q) == zeroS() ==> _p == zeroS() && _q == zeroS()}
    axiom axPlusgeqS {forall _p: Scalar, _q: Scalar :: {geqS(plusS(_p, _q), _p)}geqS(plusS(_p, _q), _p)}
    axiom axMinusCancelS {forall _p: Scalar, _q: Scalar :: {minusS(plusS(_p, _q), _q)} minusS(plusS(_p, _q), _q) == _p}

}