// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field f: Int
field g: Int

predicate F(x: Ref) { acc(x.f) }
predicate G(x: Ref) { acc(x.g) }

function fun2(x: Ref): Int
  requires acc(F(x)) && x != null
{ unfolding acc(F(x)) in x.f }

method test5() {
  var x: Ref
  x := new(f)
  x.f := 3

  fold acc(F(x))

  assert fun2(x) == 3
}

function fun1(x: Ref): Int
  requires acc(F(x)) && acc(G(x))
{ (unfolding acc(F(x)) in x.f) + (unfolding acc(G(x)) in x.g) }

method test4() {
  var x: Ref
  x := new(f, g)
  x.f := 3
  x.g := 7

  fold acc(F(x))
  fold acc(G(x))

  assert fun1(x) == 10
}

predicate pair(x: Ref) {
  acc(x.f) && acc(x.g)
}

function sum(x: Ref): Int
  requires acc(pair(x))
{ unfolding acc(pair(x)) in x.f + x.g }

method test1() {
  var x: Ref; x := new(f, g)
  var y: Ref; y := new(f, g)

  x.f := y.f
  y.g := x.g

  fold acc(pair(x))
  fold acc(pair(y))

  assert sum(x) == sum(y)

  unfold acc(pair(x))
  x.f := x.f + 1
  fold acc(pair(x))

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert sum(x) == sum(y)
}

function getf(z: Ref): Int
  requires acc(pair(z))
{ unfolding pair(z) in z.f }

method test3(y: Ref)
  requires acc(pair(y)) && getf(y) > 0
{
  var v: Int := unfolding acc(pair(y)) in y.g
  assert getf(y) == sum(y) - v
}

function add(x: Ref, y: Ref): Int
  requires acc(pair(x), 1/3)
  requires acc(pair(y), 1/3)
{ unfolding acc(pair(x), 1/3) in x.f + (unfolding acc(pair(y), 1/3) in y.f) + x.g }

method test2(a: Int)
  requires a > 10
{
  var x: Ref; x := new(f, g)
  var y: Ref; y := new(f, g)

  x.f := 1; x.g := a
  y.f := 2; y.g := -a

  fold acc(pair(x))
  fold acc(pair(y))

  assert add(x, x) == 2 + a
  assert add(x, y) == a + 3
  assert add(y, x) < 0

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert add(x, y) < 0
}

field n: Ref

predicate R(x: Ref) {
  acc(x.n) && (/*x.n != null ==>*/ acc(R(x.n)))
}

function fun3(y: Ref): Int
  requires acc(R(y))
{
  unfolding acc(R(y)) in
    y.n != null ? unfolding acc(R(y.n)) in 0 : 1
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(_x: Perm, _y: Perm): Perm
    function minus(_x: Perm, _y: Perm): Perm
    function geq(_x: Perm, _y: Perm): Bool
    function joinable(_x: Perm, _y: Perm): Bool

    function times(_x: Perm, _y: Perm): Perm

    //Auxiliary functions
    function share(_x: Rational): Perm
    function valid_share(_x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall _a: Int, _b: Int :: {biConstr(_a, _b)} biConstr(_a, _b) == share(_a/_b)}


    axiom axValid { forall _x: Rational :: {valid_share(_x)}
        valid_share(_x) <==> (_x >= 0/1 && _x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall _a: Rational, _b: Rational :: { share(_a), share(_b) }
        share(_a) == share(_b) ==> _a == _b
    }
    axiom axPlus { forall _a: Rational, _b: Rational :: { plus(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) ==> plus(share(_a), share(_b)) == share(_a + _b)
    }
    axiom axMinus { forall _a: Rational, _b: Rational :: { minus(share(_a), share(_b)) }
        geq(share(_a), share(_b)) ==> minus(share(_a), share(_b)) == share(_a - _b)
    }
    axiom axCanJoin { forall _a: Rational, _b: Rational :: { joinable(share(_a), share(_b)) }
        valid_share(_a) && valid_share(_b) ==> (joinable(share(_a), share(_b)) == valid_share(_a + _b))
    }
    axiom axGeq { forall _a: Rational, _b: Rational :: { geq(share(_a), share(_b)) }
        valid_share(_a) && valid_share(_b) ==> (geq(share(_a), share(_b)) <==> valid_share(_a - _b))
    }
    axiom axMul { forall _a: Rational, _b: Rational :: {times(share(_a), share(_b))} times(share(_a), share(_b)) == share(_a * _b)}

    axiom axJoinComm {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == plus(_q, _p)}
    axiom axJoinAssoc {forall _p: Perm, _q: Perm, _r: Perm :: {plus(plus(_p, _q), _r)} plus(plus(_p, _q), _r) == plus(_p, plus(_q, _r))}
    axiom axJoinCancel { forall _p: Perm, _q: Perm, _x: Perm :: {plus(_p, _x), plus(_q, _x)} plus(_p, _x) == plus(_q, _x) ==> _p == _q}

    axiom axUnitGeq { forall _p: Perm :: {geq(_p, unit())} geq(_p, unit())}
    axiom axUnitGeq2 { forall _p: Perm :: {geq(unit(),_p)} geq(unit(),_p) <==> _p == unit()}
    axiom axFullGeq { forall _p: Perm :: {geq(full(),_p)} geq(full(),_p)}
    axiom axFullGeq2 { forall _p: Perm :: {geq(_p, full())} geq(_p, full()) <==> _p == full()}
    axiom axGeqId { forall _p: Perm :: {geq(_p, _p)} geq(_p, _p)}
    axiom axMinusId { forall _p: Perm :: {minus(_p, _p)} minus(_p, _p) == unit()}


    axiom axUnitJoin { forall _p: Perm :: {plus(unit(),_p)} plus(unit(),_p) == _p}
    axiom axUnitJoinable { forall _p: Perm :: {joinable(_p, unit())} joinable(_p, unit())}
    axiom axJoinableComm { forall _p: Perm, _q: Perm :: {joinable(_p, _q)} joinable(_p, _q) == joinable(_q,_p)}
    axiom axTimes0 { forall _p: Perm :: {times(unit(),_p)} times(unit(),_p) == unit()}
    axiom axTimes1 { forall _p: Perm :: {times(full(),_p)} times(full(),_p) == _p}

    axiom axGeqPlus { forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(_a, _x)}
    axiom axGeqMinus {forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(minus(_a, _y), _x)}
    axiom axMinusUneq { forall _p: Perm, _q: Perm :: {geq(_p, _q)} geq(_p, _q) && _p != _q ==> minus(_p, _q) != unit()}

    axiom axPositive {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == unit() ==> _p == unit() && _q == unit()}
    axiom axPlusGeq {forall _p: Perm, _q: Perm :: {geq(plus(_p, _q), _p)} /*joinable(_p, _q) ==>*/ geq(plus(_p, _q), _p)}
    axiom axMinusCancel {forall _p: Perm, _q: Perm :: {minus(plus(_p, _q), _q)} minus(plus(_p, _q), _q) == _p}

}
