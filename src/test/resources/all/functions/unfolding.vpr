// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field f: Int
field g: Int

predicate F(x: Ref) { acc(x.f) }
predicate G(x: Ref) { acc(x.g) }

function fun2(x: Ref): Int
  requires acc(F(x)) && x != null
{ unfolding acc(F(x)) in x.f }

method test5() {
  var x: Ref
  x := new(f)
  x.f := 3

  fold acc(F(x))

  assert fun2(x) == 3
}

function fun1(x: Ref): Int
  requires acc(F(x)) && acc(G(x))
{ (unfolding acc(F(x)) in x.f) + (unfolding acc(G(x)) in x.g) }

method test4() {
  var x: Ref
  x := new(f, g)
  x.f := 3
  x.g := 7

  fold acc(F(x))
  fold acc(G(x))

  assert fun1(x) == 10
}

predicate pair(x: Ref) {
  acc(x.f) && acc(x.g)
}

function sum(x: Ref): Int
  requires acc(pair(x))
{ unfolding acc(pair(x)) in x.f + x.g }

method test1() {
  var x: Ref; x := new(f, g)
  var y: Ref; y := new(f, g)

  x.f := y.f
  y.g := x.g

  fold acc(pair(x))
  fold acc(pair(y))

  assert sum(x) == sum(y)

  unfold acc(pair(x))
  x.f := x.f + 1
  fold acc(pair(x))

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert sum(x) == sum(y)
}

function getf(z: Ref): Int
  requires acc(pair(z))
{ unfolding pair(z) in z.f }

method test3(y: Ref)
  requires acc(pair(y)) && getf(y) > 0
{
  var v: Int := unfolding acc(pair(y)) in y.g
  assert getf(y) == sum(y) - v
}

function add(x: Ref, y: Ref): Int
  requires acc(pair(x), 1/3)
  requires acc(pair(y), 1/3)
{ unfolding acc(pair(x), 1/3) in x.f + (unfolding acc(pair(y), 1/3) in y.f) + x.g }

method test2(a: Int)
  requires a > 10
{
  var x: Ref; x := new(f, g)
  var y: Ref; y := new(f, g)

  x.f := 1; x.g := a
  y.f := 2; y.g := -a

  fold acc(pair(x))
  fold acc(pair(y))

  assert add(x, x) == 2 + a
  assert add(x, y) == a + 3
  assert add(y, x) < 0

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert add(x, y) < 0
}

field n: Ref

predicate R(x: Ref) {
  acc(x.n) && (/*x.n != null ==>*/ acc(R(x.n)))
}

function fun3(y: Ref): Int
  requires acc(R(y))
{
  unfolding acc(R(y)) in
    y.n != null ? unfolding acc(R(y.n)) in 0 : 1
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axUnitJoinable { forall p: Perm :: {joinable(p, unit())} joinable(p, unit())}
    axiom axJoinableComm { forall p: Perm, q: Perm :: {joinable(p, q)} joinable(p, q) == joinable(q, p)}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}

    axiom axGeqPlus { forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(a, x)}
    axiom axGeqMinus {forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(minus(a, y), x)}
    axiom axMinusUneq { forall p: Perm, q: Perm :: {geq(p, q)} geq(p, q) && p != q ==> minus(p, q) != unit()}

}
