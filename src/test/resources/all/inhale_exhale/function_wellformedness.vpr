// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

//:: IgnoreFile(/Silicon/issue/163/)
field x: Int

/*
Sanity checks.
*/

function s0(this: Ref): Int
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  requires this != null && this.x == 0
{
  0
}

function s0Abstract(this: Ref): Int
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  requires this != null && this.x == 0

function s1(this: Ref): Int
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  //:: ExpectedOutput(postcondition.violated:assertion.false)
  //:: UnexpectedOutput(postcondition.violated:insufficient.permission, /Silicon/issue/162/)
  //:: MissingOutput(postcondition.violated:assertion.false, /Silicon/issue/162/)
  ensures this != null && this.x == 0
{
  0
}

function s1Abstract(this: Ref): Int
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  ensures this != null && this.x == 0

//:: ExpectedOutput(function.not.wellformed:insufficient.permission)
function s2(this: Ref): Int
  requires this != null
{
  this.x
}

/*
Inhale.
*/

function i0(this: Ref): Int
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  requires [this != null && this.x == 0, true]
{
  0
}

function i0Abstract(this: Ref): Int
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  requires [this != null && this.x == 0, true]

function i1(this: Ref): Int
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  ensures [this != null && this.x == 0, true]
{
  0
}

function i1Abstract(this: Ref): Int
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  ensures [this != null && this.x == 0, true]

/*
Exhale.
*/

function e0(this: Ref): Int
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  requires [true, this != null && this.x == 0]
{
  0
}

function e0Abstract(this: Ref): Int
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  requires [true, this != null && this.x == 0]

function e1(this: Ref): Int
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  //:: ExpectedOutput(postcondition.violated:assertion.false)
  //:: UnexpectedOutput(postcondition.violated:insufficient.permission, /Silicon/issue/162/)
  //:: MissingOutput(postcondition.violated:assertion.false, /Silicon/issue/162/)
  ensures [true, this != null && this.x == 0]
{
  0
}

function e1Abstract(this: Ref): Int
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  ensures [true, this != null && this.x == 0]

/*
Both.
*/

function ie0(this: Ref): Int
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  requires [this != null && this.x == 0, this != null && this.x == 0]
{
  0
}

function ie0Abstract(this: Ref): Int
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  requires [this != null && this.x == 0, this != null && this.x == 0]

function ie1(this: Ref): Int
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  //:: ExpectedOutput(postcondition.violated:assertion.false)
  //:: UnexpectedOutput(postcondition.violated:insufficient.permission, /Silicon/issue/162/)
  //:: MissingOutput(postcondition.violated:assertion.false, /Silicon/issue/162/)
  ensures [this != null && this.x == 0, this != null && this.x == 0]
{
  0
}

function ie1Abstract(this: Ref): Int
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  ensures [this != null && this.x == 0, this != null && this.x == 0]

/*
More interesting combinations.
*/

/*
    Conditions to check for wellformedness:
    1.   acc(this.x) && true
    2.   true && this != null && this.x == 0 <-- should give an error
    Precondition verified with function body: acc(this.x) && true
*/
function t1(this: Ref): Int
  requires [acc(this.x), true]
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  requires [true, this != null && this.x == 0]
{
  0
}

function t1Abstract(this: Ref): Int
  requires [acc(this.x), true]
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  requires [true, this != null && this.x == 0]

/*
    Conditions to check for wellformedness:
    1.   true && this != null && this.x == 0 <-- should give an error
    2.   acc(this.x) && true
    Precondition verified with function body: true && this != null && this.x == 0
*/
function t2(this: Ref): Int
  requires [true, acc(this.x)]
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  requires [this != null && this.x == 0, true]
{
  0
}

function t2Abstract(this: Ref): Int
  requires [true, acc(this.x)]
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  requires [this != null && this.x == 0, true]

/*
    Conditions to check for wellformedness:
    1.  acc(this.x) && this.x == 0
    2.  true
    3.  acc(this.x) && this.x == 0 && true
    4.  acc(this.x) && this != null && this.x == 0
    Postcondition verified with function body: this != null && this.x == 0
*/
function t3(this: Ref): Int
  requires [acc(this.x) && this.x == 0, true]
  ensures [true, this != null && this.x == 0]
{
  0
}

function t3Abstract(this: Ref): Int
  requires [acc(this.x) && this.x == 0, true]
  ensures [true, this != null && this.x == 0]

/*
    Conditions to check for wellformedness:
    1.  true
    2.  acc(this.x) && this.x == 0
    3.  true && true
    4.  true && this != null && this.x == 0 <-- should give an error
    Postcondition verified with function body: this != null && this.x == 0
*/
function t4(this: Ref): Int
  requires [true, acc(this.x) && this.x == 0]
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  //:: ExpectedOutput(postcondition.violated:assertion.false)
  ensures [true, this != null && this.x == 0]
{
  0
}

function t4Abstract(this: Ref): Int
  requires [true, acc(this.x) && this.x == 0]
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  ensures [true, this != null && this.x == 0]

/*
    Conditions to check for wellformedness:
    1.  true
    2.  true
    3.  true && this != null && this.x == 0 <-- should give an error
    4.  true && true
    Postcondition verified with function body: true
*/
function t5(this: Ref): Int
  requires [true, acc(this.x)]
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  ensures [this != null && this.x == 0, true]
{
  0
}

function t5Abstract(this: Ref): Int
  requires [true, acc(this.x)]
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  ensures [this != null && this.x == 0, true]

/*
    Conditions to check for wellformedness:
    1.  acc(this.x)
    2.  true
    3.  acc(this.x) && this != null && this.x == 0
    4.  acc(this.x) && true
    Postcondition verified with function body: true
*/
function t6(this: Ref): Int
  requires [acc(this.x), true]
  ensures [this != null && this.x == 0, true]
{
  0
}

function t6Abstract(this: Ref): Int
  requires [acc(this.x), true]
  ensures [this != null && this.x == 0, true]

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axUnitJoinable { forall p: Perm :: {joinable(p, unit())} joinable(p, unit())}
    axiom axJoinableComm { forall p: Perm, q: Perm :: {joinable(p, q)} joinable(p, q) == joinable(q, p)}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}

    axiom axGeqPlus { forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(a, x)}
    axiom axGeqMinus {forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) <==> geq(minus(a, y), x)}

}
