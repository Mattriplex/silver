// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

//:: IgnoreFile(/Silicon/issue/163/)
field x: Int

/*
Sanity checks.
*/

function s0(this: Ref): Int
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  requires this != null && this.x == 0
{
  0
}

function s0Abstract(this: Ref): Int
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  requires this != null && this.x == 0

function s1(this: Ref): Int
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  //:: ExpectedOutput(postcondition.violated:assertion.false)
  //:: UnexpectedOutput(postcondition.violated:insufficient.permission, /Silicon/issue/162/)
  //:: MissingOutput(postcondition.violated:assertion.false, /Silicon/issue/162/)
  ensures this != null && this.x == 0
{
  0
}

function s1Abstract(this: Ref): Int
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  ensures this != null && this.x == 0

//:: ExpectedOutput(function.not.wellformed:insufficient.permission)
function s2(this: Ref): Int
  requires this != null
{
  this.x
}

/*
Inhale.
*/

function i0(this: Ref): Int
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  requires [this != null && this.x == 0, true]
{
  0
}

function i0Abstract(this: Ref): Int
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  requires [this != null && this.x == 0, true]

function i1(this: Ref): Int
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  ensures [this != null && this.x == 0, true]
{
  0
}

function i1Abstract(this: Ref): Int
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  ensures [this != null && this.x == 0, true]

/*
Exhale.
*/

function e0(this: Ref): Int
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  requires [true, this != null && this.x == 0]
{
  0
}

function e0Abstract(this: Ref): Int
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  requires [true, this != null && this.x == 0]

function e1(this: Ref): Int
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  //:: ExpectedOutput(postcondition.violated:assertion.false)
  //:: UnexpectedOutput(postcondition.violated:insufficient.permission, /Silicon/issue/162/)
  //:: MissingOutput(postcondition.violated:assertion.false, /Silicon/issue/162/)
  ensures [true, this != null && this.x == 0]
{
  0
}

function e1Abstract(this: Ref): Int
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  ensures [true, this != null && this.x == 0]

/*
Both.
*/

function ie0(this: Ref): Int
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  requires [this != null && this.x == 0, this != null && this.x == 0]
{
  0
}

function ie0Abstract(this: Ref): Int
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  requires [this != null && this.x == 0, this != null && this.x == 0]

function ie1(this: Ref): Int
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  //:: ExpectedOutput(postcondition.violated:assertion.false)
  //:: UnexpectedOutput(postcondition.violated:insufficient.permission, /Silicon/issue/162/)
  //:: MissingOutput(postcondition.violated:assertion.false, /Silicon/issue/162/)
  ensures [this != null && this.x == 0, this != null && this.x == 0]
{
  0
}

function ie1Abstract(this: Ref): Int
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  ensures [this != null && this.x == 0, this != null && this.x == 0]

/*
More interesting combinations.
*/

/*
    Conditions to check for wellformedness:
    1.   acc(this.x) && true
    2.   true && this != null && this.x == 0 <-- should give an error
    Precondition verified with function body: acc(this.x) && true
*/
function t1(this: Ref): Int
  requires [acc(this.x), true]
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  requires [true, this != null && this.x == 0]
{
  0
}

function t1Abstract(this: Ref): Int
  requires [acc(this.x), true]
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  requires [true, this != null && this.x == 0]

/*
    Conditions to check for wellformedness:
    1.   true && this != null && this.x == 0 <-- should give an error
    2.   acc(this.x) && true
    Precondition verified with function body: true && this != null && this.x == 0
*/
function t2(this: Ref): Int
  requires [true, acc(this.x)]
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  requires [this != null && this.x == 0, true]
{
  0
}

function t2Abstract(this: Ref): Int
  requires [true, acc(this.x)]
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  requires [this != null && this.x == 0, true]

/*
    Conditions to check for wellformedness:
    1.  acc(this.x) && this.x == 0
    2.  true
    3.  acc(this.x) && this.x == 0 && true
    4.  acc(this.x) && this != null && this.x == 0
    Postcondition verified with function body: this != null && this.x == 0
*/
function t3(this: Ref): Int
  requires [acc(this.x) && this.x == 0, true]
  ensures [true, this != null && this.x == 0]
{
  0
}

function t3Abstract(this: Ref): Int
  requires [acc(this.x) && this.x == 0, true]
  ensures [true, this != null && this.x == 0]

/*
    Conditions to check for wellformedness:
    1.  true
    2.  acc(this.x) && this.x == 0
    3.  true && true
    4.  true && this != null && this.x == 0 <-- should give an error
    Postcondition verified with function body: this != null && this.x == 0
*/
function t4(this: Ref): Int
  requires [true, acc(this.x) && this.x == 0]
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  //:: ExpectedOutput(postcondition.violated:assertion.false)
  ensures [true, this != null && this.x == 0]
{
  0
}

function t4Abstract(this: Ref): Int
  requires [true, acc(this.x) && this.x == 0]
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  ensures [true, this != null && this.x == 0]

/*
    Conditions to check for wellformedness:
    1.  true
    2.  true
    3.  true && this != null && this.x == 0 <-- should give an error
    4.  true && true
    Postcondition verified with function body: true
*/
function t5(this: Ref): Int
  requires [true, acc(this.x)]
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  ensures [this != null && this.x == 0, true]
{
  0
}

function t5Abstract(this: Ref): Int
  requires [true, acc(this.x)]
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  ensures [this != null && this.x == 0, true]

/*
    Conditions to check for wellformedness:
    1.  acc(this.x)
    2.  true
    3.  acc(this.x) && this != null && this.x == 0
    4.  acc(this.x) && true
    Postcondition verified with function body: true
*/
function t6(this: Ref): Int
  requires [acc(this.x), true]
  ensures [this != null && this.x == 0, true]
{
  0
}

function t6Abstract(this: Ref): Int
  requires [acc(this.x), true]
  ensures [this != null && this.x == 0, true]

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(_x: Perm, _y: Perm): Perm
    function minus(_x: Perm, _y: Perm): Perm
    function geq(_x: Perm, _y: Perm): Bool
    function joinable(_x: Perm, _y: Perm): Bool

    function times(_x: Perm, _y: Perm): Perm

    //Auxiliary functions
    function share(_x: Rational): Perm
    function valid_share(_x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall _a: Int, _b: Int :: {biConstr(_a, _b)} biConstr(_a, _b) == share(_a/_b)}


    axiom axValid { forall _x: Rational :: {valid_share(_x)}
        valid_share(_x) <==> (_x >= 0/1 && _x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall _a: Rational, _b: Rational :: { share(_a), share(_b) }
        share(_a) == share(_b) ==> _a == _b
    }
    axiom axPlus { forall _a: Rational, _b: Rational :: { plus(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) ==> plus(share(_a), share(_b)) == share(_a + _b)
    }
    axiom axMinus { forall _a: Rational, _b: Rational :: { minus(share(_a), share(_b)) }
        geq(share(_a), share(_b)) ==> minus(share(_a), share(_b)) == share(_a - _b)
    }
    axiom axCanJoin { forall _a: Rational, _b: Rational :: { joinable(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) <==> valid_share(_a) && valid_share(_b) && valid_share(_a + _b)
    }
    axiom axGeq { forall _a: Rational, _b: Rational :: { geq(share(_a), share(_b)) }
        geq(share(_a), share(_b)) <==> valid_share(_a) && valid_share(_b) && valid_share(_a - _b)
    }
    axiom axMul { forall _a: Rational, _b: Rational :: {times(share(_a), share(_b))} times(share(_a), share(_b)) == share(_a * _b)}

    axiom axJoinComm {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == plus(_q, _p)}
    axiom axJoinAssoc {forall _p: Perm, _q: Perm, _r: Perm :: {plus(plus(_p, _q), _r)} plus(plus(_p, _q), _r) == plus(_p, plus(_q, _r))}
    axiom axJoinCancel { forall _p: Perm, _q: Perm, _x: Perm :: {plus(_p, _x), plus(_q, _x)} plus(_p, _x) == plus(_q, _x) ==> _p == _q}

    axiom axUnitGeq { forall _p: Perm :: {geq(_p, unit())} geq(_p, unit())}
    axiom axUnitGeq2 { forall _p: Perm :: {geq(unit(),_p)} geq(unit(),_p) <==> _p == unit()}
    axiom axFullGeq { forall _p: Perm :: {geq(full(),_p)} geq(full(),_p)}
    axiom axFullGeq2 { forall _p: Perm :: {geq(_p, full())} geq(_p, full()) <==> _p == full()}

    axiom axUnitJoin { forall _p: Perm :: {plus(unit(),_p)} plus(unit(),_p) == _p}
    axiom axUnitJoinable { forall _p: Perm :: {joinable(_p, unit())} joinable(_p, unit())}
    axiom axJoinableComm { forall _p: Perm, _q: Perm :: {joinable(_p, _q)} joinable(_p, _q) == joinable(_q,_p)}
    axiom axTimes0 { forall _p: Perm :: {times(unit(),_p)} times(unit(),_p) == unit()}
    axiom axTimes1 { forall _p: Perm :: {times(full(),_p)} times(unit(),_p) == _p}

    axiom axGeqPlus { forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(_a, _x)}
    axiom axGeqMinus {forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(minus(_a, _y), _x)}
    axiom axMinusUneq { forall _p: Perm, _q: Perm :: {geq(_p, _q)} geq(_p, _q) && _p != _q ==> minus(_p, _q) != unit()}

}
