// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

method t1(x: Int, xs: Seq[Int]) {
    var n: Seq[Int] := Seq[Int]()
    assert |n| == 0
    assert n != Seq(x)
    assert |Seq(1)| == 1
    //:: ExpectedOutput(assert.failed:assertion.false)
    assert |Seq(0)| == 0
}

method t2() {
    assert 1 in Seq(1,2,3)
    assert |[-1..10)| == 11
    assert Seq(1) ++ Seq(2) == Seq(1,2)

    var a: Seq[Int] := Seq(0,1,-11,22)
    assert a[2] == -11

    assert a[..1] == Seq(0)
    assert a[1..] == Seq(1,-11,22)
    assert a[1..2] == Seq(1)

    assert a[1 := 22] == (a[1 := -1][1 := 22])
    assert a[1 := 22] == Seq(0,22,-11,22)
    assert |a[1 := 22]| == 4
    assert a[1 := 22][1] == 22
    assert a[1 := 22][2] == -11
    //:: ExpectedOutput(assert.failed:assertion.false)
    assert a[1 := 22][0] == 22
}

method test3() {
  var xs: Seq[Int] := Seq(0, 1, 2, 3, 4, 5, 6, 7)
  var bs: Seq[Bool] := Seq(true, true, false, true) ++ Seq(false, true)

  assert |xs[1..][..6]| == |bs|
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert |xs[1..]| == |xs|
}

method test4(s:Seq[Int], i : Int, j:Int) 
  requires 0 <= i
  requires i <= j
{
  assert s == s[..i] ++ s[i..]
  assert s == s[..i] ++ s[i..j] ++ s[j..]
  assert (s[..i] ++ s[i..j]) ++ s[j..] == s[..i] ++ (s[i..j] ++ s[j..])
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert |s[j..]| == |s| - j
}

method test5(s:Seq[Int], i : Int, j:Int) 
{
  assert s == s[..i] ++ s[i..]
}

method test6() {
  assert Seq(3,4,5,6)[0] == 3
  assert Seq(3,4,5,6)[1] == 4
  assert Seq(3,4,5,6)[2] == 5
  assert Seq(3,4,5,6)[3] == 6
    //:: ExpectedOutput(assert.failed:assertion.false)
  assert Seq(3,4,5,6)[3] == 5
}

function trivial(i:Int) : Bool { true }

method test_index_definedness_small(i : Int) 
  requires i < 4
{
  //:: ExpectedOutput(assert.failed:seq.index.negative)  
  assert trivial(Seq(3,4,5,6)[i])
}

method test_index_definedness_large(i : Int) 
  requires i >= 0
{ 
  //:: ExpectedOutput(assert.failed:seq.index.length)  
  assert trivial(Seq(3,4,5,6)[i])
}

method test_build_index_definedness_small(i : Int) 
  requires i < 4
{
  //:: ExpectedOutput(assert.failed:seq.index.negative)
  //:: MissingOutput(assert.failed:seq.index.negative, /carbon/issue/232/)
  assert trivial(Seq(3,4,5,6)[i := 3][0])
}

method test_build_index_definedness_large(i : Int) 
  requires i >= 0
{    
  //:: ExpectedOutput(assignment.failed:seq.index.length)
  //:: MissingOutput(assignment.failed:seq.index.length, /carbon/issue/232/)
  var s : Seq[Int] := Seq(3,4,5,6)[i := 3]
  assert trivial(s[0])
}


//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}
}
