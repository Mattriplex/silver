// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field f: Int

predicate P(x: Ref) {
  acc(x.f)
}

method test1(x: Ref) {
  //:: ExpectedOutput(inhale.failed:negative.permission)
  inhale acc(x.f, -1/2)
}

method test2(x: Ref)
  //:: ExpectedOutput(not.wellformed:negative.permission)
  requires acc(P(x), -write)

method test3(x: Ref, p: Perm) {
  //:: ExpectedOutput(inhale.failed:negative.permission)
  inhale acc(x.f, p)
}

method test3b(x: Ref, p: Perm) {
  inhale none <= p ==> acc(x.f, p)
}

method test4(x: Ref, p: Perm) {
  inhale P(x)
  //:: ExpectedOutput(unfold.failed:negative.permission)
  //:: ExpectedOutput(unfold.failed:insufficient.permission)
  //:: MissingOutput(unfold.failed:insufficient.permission, /Silicon/issue/34/)
  unfold acc(P(x), p)
}

//:: ExpectedOutput(predicate.not.wellformed:negative.permission)
//:: MissingOutput(predicate.not.wellformed:negative.permission, /Carbon/issue/380/)
predicate Q(x: Ref, p: Perm) {
  acc(x.f, p)
}

method test5(x: Ref, p: Perm) {
  inhale Q(x, p)
  //:: ExpectedOutput(inhale.failed:negative.permission)
  inhale unfolding Q(x, p) in x != null
}


method test20(xs: Set[Ref], p: Perm)
  //:: ExpectedOutput(not.wellformed:negative.permission)
  requires forall x: Ref :: x in xs ==> acc(x.f, p)

method test21(xs: Set[Ref], p: Perm) {
  while (true)
    //:: ExpectedOutput(while.failed:negative.permission)
    //:: MissingOutput(while.failed:negative.permission, /Silicon/issue/34/)
    //:: ExpectedOutput(invariant.not.established:insufficient.permission)
    //:: MissingOutput(invariant.not.established:insufficient.permission, /Silicon/issue/34/)
    //:: ExpectedOutput(invariant.not.established:negative.permission)
    //:: MissingOutput(invariant.not.established:negative.permission, /Silicon/issue/34/)
    //:: ExpectedOutput(not.wellformed:negative.permission)
    invariant forall x: Ref :: x in xs ==> acc(P(x), p)
  {}
}

method test22(xs: Set[Ref], p: Perm) {
  inhale forall x: Ref :: x in xs ==> acc(x.f, none <= p ? p : none)
}


domain foo {
  function permfun(x: Ref): Perm
}

method test23(p: Perm, y: Ref) {
  var xs: Set[Ref]
  assume forall x: Ref :: x in xs ==> none <= permfun(x)

  xs := xs union Set(y)

  //:: ExpectedOutput(inhale.failed:negative.permission)
  inhale forall x: Ref :: x in xs ==> acc(x.f, permfun(x))
}

method test23b(p: Perm, y: Ref) {
  var xs: Set[Ref]
  assume y in xs
  assume forall x: Ref :: x in xs ==> none <= permfun(x)

  xs := xs union Set(y)

  assert forall x: Ref :: x in xs ==> none <= permfun(x)
  inhale forall x: Ref :: x in xs ==> acc(x.f, permfun(x))
}


method test31() {
  inhale forall r: Ref :: {r.f} acc(r.f, wildcard)
}

method test32(r: Ref) {
  inhale acc(r.f, wildcard)
}


method test40(x: Ref) {
  inhale forall r: Ref :: false ==> acc(r.f, none) // Silicon: enables QP algorithms for f

  //:: ExpectedOutput(inhale.failed:negative.permission)
  inhale acc(x.f, -1/2)
}

function funky(x: Ref): Bool
  //:: ExpectedOutput(not.wellformed:negative.permission)
  requires acc(x.f, -1/2)

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(_x: Perm, _y: Perm): Perm
    function minus(_x: Perm, _y: Perm): Perm
    function geq(_x: Perm, _y: Perm): Bool
    function joinable(_x: Perm, _y: Perm): Bool

    function times(_x: Perm, _y: Perm): Perm

    //Auxiliary functions
    function share(_x: Rational): Perm
    function valid_share(_x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall _a: Int, _b: Int :: {biConstr(_a, _b)} biConstr(_a, _b) == share(_a/_b)}


    axiom axValid { forall _x: Rational :: {valid_share(_x)}
        valid_share(_x) <==> (_x >= 0/1 && _x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall _a: Rational, _b: Rational :: { share(_a), share(_b) }
        share(_a) == share(_b) ==> _a == _b
    }
    axiom axPlus { forall _a: Rational, _b: Rational :: { plus(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) ==> plus(share(_a), share(_b)) == share(_a + _b)
    }
    axiom axMinus { forall _a: Rational, _b: Rational :: { minus(share(_a), share(_b)) }
        geq(share(_a), share(_b)) ==> minus(share(_a), share(_b)) == share(_a - _b)
    }
    axiom axCanJoin { forall _a: Rational, _b: Rational :: { joinable(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) <==> valid_share(_a) && valid_share(_b) && valid_share(_a + _b)
    }
    axiom axGeq { forall _a: Rational, _b: Rational :: { geq(share(_a), share(_b)) }
        geq(share(_a), share(_b)) <==> valid_share(_a) && valid_share(_b) && valid_share(_a - _b)
    }
    axiom axMul { forall _a: Rational, _b: Rational :: {times(share(_a), share(_b))} times(share(_a), share(_b)) == share(_a * _b)}

    axiom axJoinComm {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == plus(_q, _p)}
    axiom axJoinAssoc {forall _p: Perm, _q: Perm, _r: Perm :: {plus(plus(_p, _q), _r)} plus(plus(_p, _q), _r) == plus(_p, plus(_q, _r))}
    axiom axJoinCancel { forall _p: Perm, _q: Perm, _x: Perm :: {plus(_p, _x), plus(_q, _x)} plus(_p, _x) == plus(_q, _x) ==> _p == _q}

    axiom axUnitGeq { forall _p: Perm :: {geq(_p, unit())} geq(_p, unit())}
    axiom axUnitGeq2 { forall _p: Perm :: {geq(unit(),_p)} geq(unit(),_p) <==> _p == unit()}
    axiom axFullGeq { forall _p: Perm :: {geq(full(),_p)} geq(full(),_p)}
    axiom axFullGeq2 { forall _p: Perm :: {geq(_p, full())} geq(_p, full()) <==> _p == full()}
    axiom axGeqId { forall _p: Perm :: {geq(_p, _p)} geq(_p, _p)}
    axiom axMinusId { forall _p: Perm :: {minus(_p, _p)} minus(_p, _p) == unit()}


    axiom axUnitJoin { forall _p: Perm :: {plus(unit(),_p)} plus(unit(),_p) == _p}
    axiom axUnitJoinable { forall _p: Perm :: {joinable(_p, unit())} joinable(_p, unit())}
    axiom axJoinableComm { forall _p: Perm, _q: Perm :: {joinable(_p, _q)} joinable(_p, _q) == joinable(_q,_p)}
    axiom axTimes0 { forall _p: Perm :: {times(unit(),_p)} times(unit(),_p) == unit()}
    axiom axTimes1 { forall _p: Perm :: {times(full(),_p)} times(full(),_p) == _p}

    axiom axGeqPlus { forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(_a, _x)}
    axiom axGeqMinus {forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(minus(_a, _y), _x)}
    axiom axMinusUneq { forall _p: Perm, _q: Perm :: {geq(_p, _q)} geq(_p, _q) && _p != _q ==> minus(_p, _q) != unit()}

    axiom axPositive {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == unit() ==> _p == unit() && _q == unit()}
    axiom axPlusGeq {forall _p: Perm, _q: Perm :: {geq(plus(_p, _q), _p)} joinable(_p, _q) ==> geq(plus(_p, _q), _p)}
    axiom axMinusCancel {forall _p: Perm, _q: Perm :: {minus(plus(_p, _q), _q)} minus(plus(_p, _q), _q) == _p}

}
