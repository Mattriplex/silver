// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field f: Int

predicate P(x: Ref) {
  acc(x.f)
}

method test1(x: Ref) {
  //:: ExpectedOutput(inhale.failed:negative.permission)
  inhale acc(x.f, -1/2)
}

method test2(x: Ref)
  //:: ExpectedOutput(not.wellformed:negative.permission)
  requires acc(P(x), -write)

method test3(x: Ref, p: Perm) {
  //:: ExpectedOutput(inhale.failed:negative.permission)
  inhale acc(x.f, p)
}

method test3b(x: Ref, p: Perm) {
  inhale none <= p ==> acc(x.f, p)
}

method test4(x: Ref, p: Perm) {
  inhale P(x)
  //:: ExpectedOutput(unfold.failed:negative.permission)
  //:: ExpectedOutput(unfold.failed:insufficient.permission)
  //:: MissingOutput(unfold.failed:insufficient.permission, /Silicon/issue/34/)
  unfold acc(P(x), p)
}

//:: ExpectedOutput(predicate.not.wellformed:negative.permission)
//:: MissingOutput(predicate.not.wellformed:negative.permission, /Carbon/issue/380/)
predicate Q(x: Ref, p: Perm) {
  acc(x.f, p)
}

method test5(x: Ref, p: Perm) {
  inhale Q(x, p)
  //:: ExpectedOutput(inhale.failed:negative.permission)
  inhale unfolding Q(x, p) in x != null
}


method test20(xs: Set[Ref], p: Perm)
  //:: ExpectedOutput(not.wellformed:negative.permission)
  requires forall x: Ref :: x in xs ==> acc(x.f, p)

method test21(xs: Set[Ref], p: Perm) {
  while (true)
    //:: ExpectedOutput(while.failed:negative.permission)
    //:: MissingOutput(while.failed:negative.permission, /Silicon/issue/34/)
    //:: ExpectedOutput(invariant.not.established:insufficient.permission)
    //:: MissingOutput(invariant.not.established:insufficient.permission, /Silicon/issue/34/)
    //:: ExpectedOutput(invariant.not.established:negative.permission)
    //:: MissingOutput(invariant.not.established:negative.permission, /Silicon/issue/34/)
    //:: ExpectedOutput(not.wellformed:negative.permission)
    invariant forall x: Ref :: x in xs ==> acc(P(x), p)
  {}
}

method test22(xs: Set[Ref], p: Perm) {
  inhale forall x: Ref :: x in xs ==> acc(x.f, none <= p ? p : none)
}


domain foo {
  function permfun(x: Ref): Perm
}

method test23(p: Perm, y: Ref) {
  var xs: Set[Ref]
  assume forall x: Ref :: x in xs ==> none <= permfun(x)

  xs := xs union Set(y)

  //:: ExpectedOutput(inhale.failed:negative.permission)
  inhale forall x: Ref :: x in xs ==> acc(x.f, permfun(x))
}

method test23b(p: Perm, y: Ref) {
  var xs: Set[Ref]
  assume y in xs
  assume forall x: Ref :: x in xs ==> none <= permfun(x)

  xs := xs union Set(y)

  assert forall x: Ref :: x in xs ==> none <= permfun(x)
  inhale forall x: Ref :: x in xs ==> acc(x.f, permfun(x))
}


method test31() {
  inhale forall r: Ref :: {r.f} acc(r.f, wildcard)
}

method test32(r: Ref) {
  inhale acc(r.f, wildcard)
}


method test40(x: Ref) {
  inhale forall r: Ref :: false ==> acc(r.f, none) // Silicon: enables QP algorithms for f

  //:: ExpectedOutput(inhale.failed:negative.permission)
  inhale acc(x.f, -1/2)
}

function funky(x: Ref): Bool
  //:: ExpectedOutput(not.wellformed:negative.permission)
  requires acc(x.f, -1/2)

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}
}
