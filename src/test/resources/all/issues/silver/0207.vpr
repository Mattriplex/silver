// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

domain Foo {
  function foo(): Foo
  function bar(f: Foo): Foo
}

define qux(f) f == foo()

method test(f: Foo)
  requires qux(bar(f))



/* Originally filed example */

define isNull(t) t == nullNode()

domain BST {
  function value(t: BST): Int
  function left(t: BST): BST
  function right(t: BST): BST
  function nullNode(): BST
  function isParent(p: BST, c: BST): Bool

//  axiom isNull_recursive {
//    forall t: BST :: {nullNode()} /* Illegal trigger */
//      isNull(t) ==> isNull(left(t)) && isNull(right(t))
//  }
  axiom left_smaller {
    forall t: BST :: {value(t), value(left(t))}
      !isNull(left(t)) ==> value(t) > value(left(t))
  }
  axiom left_sub_tree_smaller {
    forall t: BST, c: BST :: {value(t), value(c)}{isParent(left(t), c)}
      !isNull(t) && !isNull(c) && isParent(left(t), c) ==> value(c) < value(t)
  }
  axiom right_sub_tree_larger {
    forall t: BST, c: BST :: {value(t), value(c)}
      !isNull(t) && !isNull(c) && isParent(right(t), c) ==> value(c) > value(t)
  }
  axiom isParent_reflexive {
    forall t: BST :: {isParent(t,t)}
      isParent(t,t)
  }
  axiom isParent_base {
    forall t: BST :: {isParent(t, left(t))}{isParent(t, right(t))}
      isParent(t, left(t)) && isParent(t, right(t))
  }
  axiom isParent_recursive {
    forall p: BST, c: BST :: {isParent(p, left(c))}{isParent(p, right(c))}
      isParent(p, c) ==> isParent(p, left(c)) && isParent(p, right(c))
  }
  axiom isParent_left {
    forall p: BST, c: BST :: {isParent(left(p), c)}
      !isNull(p) && isParent(p, c) && value(p) > value(c) ==> !isNull(left(p)) && isParent(left(p), c)
  }
}

method getMin(t: BST) returns (min: Int)
  requires !isNull(t)
  requires forall t1: BST :: t1 == t || !isParent(t1, t) // t is root
  ensures forall t1: BST :: {value(t1)}
    !isNull(t1) && isParent(t, t1) ==> value(t1) >= min
{
  assume false /* Program verification not necessary */

  var currentNode: BST := t
  while (!isNull(left(currentNode)))
    invariant isParent(t, currentNode)
    invariant !isNull(currentNode)
    invariant t == currentNode || value(currentNode) < value(t)
    invariant t != currentNode && !isNull(left(t)) ==> isParent(left(t), currentNode)
    invariant forall pc: BST :: {value(pc), value(currentNode)}
      !isNull(pc) && isParent(pc, currentNode) ==> value(pc) >= value(currentNode)
  {
    currentNode := left(currentNode)
  }
  min := value(currentNode)
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axUnitJoinable { forall p: Perm :: {joinable(p, unit())} joinable(p, unit())}
    axiom axJoinableComm { forall p: Perm, q: Perm :: {joinable(p, q)} joinable(p, q) == joinable(q, p)}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}

    axiom axGeqPlus { forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(a, x)}
    axiom axGeqMinus {forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) <==> geq(minus(a, y), x)}

}
