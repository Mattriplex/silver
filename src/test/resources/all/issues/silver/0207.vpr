// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

domain Foo {
  function foo(): Foo
  function bar(f: Foo): Foo
}

define qux(f) f == foo()

method test(f: Foo)
  requires qux(bar(f))



/* Originally filed example */

define isNull(t) t == nullNode()

domain BST {
  function value(t: BST): Int
  function left(t: BST): BST
  function right(t: BST): BST
  function nullNode(): BST
  function isParent(p: BST, c: BST): Bool

//  axiom isNull_recursive {
//    forall t: BST :: {nullNode()} /* Illegal trigger */
//      isNull(t) ==> isNull(left(t)) && isNull(right(t))
//  }
  axiom left_smaller {
    forall t: BST :: {value(t), value(left(t))}
      !isNull(left(t)) ==> value(t) > value(left(t))
  }
  axiom left_sub_tree_smaller {
    forall t: BST, c: BST :: {value(t), value(c)}{isParent(left(t), c)}
      !isNull(t) && !isNull(c) && isParent(left(t), c) ==> value(c) < value(t)
  }
  axiom right_sub_tree_larger {
    forall t: BST, c: BST :: {value(t), value(c)}
      !isNull(t) && !isNull(c) && isParent(right(t), c) ==> value(c) > value(t)
  }
  axiom isParent_reflexive {
    forall t: BST :: {isParent(t,t)}
      isParent(t,t)
  }
  axiom isParent_base {
    forall t: BST :: {isParent(t, left(t))}{isParent(t, right(t))}
      isParent(t, left(t)) && isParent(t, right(t))
  }
  axiom isParent_recursive {
    forall p: BST, c: BST :: {isParent(p, left(c))}{isParent(p, right(c))}
      isParent(p, c) ==> isParent(p, left(c)) && isParent(p, right(c))
  }
  axiom isParent_left {
    forall p: BST, c: BST :: {isParent(left(p), c)}
      !isNull(p) && isParent(p, c) && value(p) > value(c) ==> !isNull(left(p)) && isParent(left(p), c)
  }
}

method getMin(t: BST) returns (min: Int)
  requires !isNull(t)
  requires forall t1: BST :: t1 == t || !isParent(t1, t) // t is root
  ensures forall t1: BST :: {value(t1)}
    !isNull(t1) && isParent(t, t1) ==> value(t1) >= min
{
  assume false /* Program verification not necessary */

  var currentNode: BST := t
  while (!isNull(left(currentNode)))
    invariant isParent(t, currentNode)
    invariant !isNull(currentNode)
    invariant t == currentNode || value(currentNode) < value(t)
    invariant t != currentNode && !isNull(left(t)) ==> isParent(left(t), currentNode)
    invariant forall pc: BST :: {value(pc), value(currentNode)}
      !isNull(pc) && isParent(pc, currentNode) ==> value(pc) >= value(currentNode)
  {
    currentNode := left(currentNode)
  }
  min := value(currentNode)
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(_x: Perm, _y: Perm): Perm
    function minus(_x: Perm, _y: Perm): Perm
    function geq(_x: Perm, _y: Perm): Bool
    function joinable(_x: Perm, _y: Perm): Bool

    function times(_x: Perm, _y: Perm): Perm

    //Auxiliary functions
    function share(_x: Rational): Perm
    function valid_share(_x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall _a: Int, _b: Int :: {biConstr(_a, _b)} biConstr(_a, _b) == share(_a/_b)}


    axiom axValid { forall _x: Rational :: {valid_share(_x)}
        valid_share(_x) <==> (_x >= 0/1 && _x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall _a: Rational, _b: Rational :: { share(_a), share(_b) }
        share(_a) == share(_b) ==> _a == _b
    }
    axiom axPlus { forall _a: Rational, _b: Rational :: { plus(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) ==> plus(share(_a), share(_b)) == share(_a + _b)
    }
    axiom axMinus { forall _a: Rational, _b: Rational :: { minus(share(_a), share(_b)) }
        geq(share(_a), share(_b)) ==> minus(share(_a), share(_b)) == share(_a - _b)
    }
    axiom axCanJoin { forall _a: Rational, _b: Rational :: { joinable(share(_a), share(_b)) }
        valid_share(_a) && valid_share(_b) ==> (joinable(share(_a), share(_b)) == valid_share(_a + _b))
    }
    axiom axGeq { forall _a: Rational, _b: Rational :: { geq(share(_a), share(_b)) }
        valid_share(_a) && valid_share(_b) ==> (geq(share(_a), share(_b)) <==> valid_share(_a - _b))
    }
    axiom axMul { forall _a: Rational, _b: Rational :: {times(share(_a), share(_b))} times(share(_a), share(_b)) == share(_a * _b)}

    axiom axJoinComm {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == plus(_q, _p)}
    axiom axJoinAssoc {forall _p: Perm, _q: Perm, _r: Perm :: {plus(plus(_p, _q), _r)} plus(plus(_p, _q), _r) == plus(_p, plus(_q, _r))}
    axiom axJoinCancel { forall _p: Perm, _q: Perm, _x: Perm :: {plus(_p, _x), plus(_q, _x)} plus(_p, _x) == plus(_q, _x) ==> _p == _q}

    axiom axUnitGeq { forall _p: Perm :: {geq(_p, unit())} geq(_p, unit())}
    axiom axUnitGeq2 { forall _p: Perm :: {geq(unit(),_p)} geq(unit(),_p) <==> _p == unit()}
    axiom axFullGeq { forall _p: Perm :: {geq(full(),_p)} geq(full(),_p)}
    axiom axFullGeq2 { forall _p: Perm :: {geq(_p, full())} geq(_p, full()) <==> _p == full()}
    axiom axGeqId { forall _p: Perm :: {geq(_p, _p)} geq(_p, _p)}
    axiom axMinusId { forall _p: Perm :: {minus(_p, _p)} minus(_p, _p) == unit()}


    axiom axUnitJoin { forall _p: Perm :: {plus(unit(),_p)} plus(unit(),_p) == _p}
    axiom axUnitJoinable { forall _p: Perm :: {joinable(_p, unit())} joinable(_p, unit())}
    axiom axJoinableComm { forall _p: Perm, _q: Perm :: {joinable(_p, _q)} joinable(_p, _q) == joinable(_q,_p)}
    axiom axTimes0 { forall _p: Perm :: {times(unit(),_p)} times(unit(),_p) == unit()}
    axiom axTimes1 { forall _p: Perm :: {times(full(),_p)} times(full(),_p) == _p}

    axiom axGeqPlus { forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(_a, _x)}
    axiom axGeqMinus {forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(minus(_a, _y), _x)}
    axiom axMinusUneq { forall _p: Perm, _q: Perm :: {geq(_p, _q)} geq(_p, _q) && _p != _q ==> minus(_p, _q) != unit()}

    axiom axPositive {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == unit() ==> _p == unit() && _q == unit()}
    axiom axPlusGeq {forall _p: Perm, _q: Perm :: {geq(plus(_p, _q), _p)} /*joinable(_p, _q) ==>*/ geq(plus(_p, _q), _p)}
    axiom axMinusCancel {forall _p: Perm, _q: Perm :: {minus(plus(_p, _q), _q)} minus(plus(_p, _q), _q) == _p}

}
