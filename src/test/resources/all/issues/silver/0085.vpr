// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field foo: Int

method specialVariables()
{
  var resulter: Ref

  resulter := new(foo)

  resulter.foo := 1
}

method types()
{
  var Inter: Ref
  var Permer: Ref
  var Booler: Ref
  var Refer: Ref

  Inter := new(foo)
  Permer := new(foo)
  Booler := new(foo)
  Refer := new(foo)

  Inter.foo := 1
  Permer.foo := 1
  Booler.foo := 1
  Refer.foo := 1
}

method booleanConstants()
{
  var trueer: Ref
  var falseer: Ref

  trueer := new(foo)
  falseer := new(foo)

  trueer.foo := 1
  falseer.foo := 1
}

method nulll()
{
  var nuller: Ref

  nuller := new(foo)

  nuller.foo := 1
}

method declarationKeywords()
{
  var methoder: Ref
  var functioner: Ref
  var predicateer: Ref
  var programer: Ref
  var domainer: Ref
  var axiomer: Ref
  var varer: Ref
  var returnser: Ref
  var fielder: Ref
  var defineer: Ref

  methoder := new(foo)
  functioner := new(foo)
  predicateer := new(foo)
  programer := new(foo)
  domainer := new(foo)
  axiomer := new(foo)
  varer := new(foo)
  returnser := new(foo)
  fielder := new(foo)
  defineer := new(foo)

  methoder.foo := 1
  functioner.foo := 1
  predicateer.foo := 1
  programer.foo := 1
  domainer.foo := 1
  axiomer.foo := 1
  varer.foo := 1
  returnser.foo := 1
  fielder.foo := 1
  defineer.foo := 1
}

method specifications()
{
  var requireser: Ref
  var ensureser: Ref
  var invarianter: Ref

  requireser := new(foo)
  ensureser := new(foo)
  invarianter := new(foo)

  requireser.foo := 1
  ensureser.foo := 1
  invarianter.foo := 1
}

method statements()
{
  var folder: Ref
  var unfolder: Ref
  var inhaleer: Ref
  var exhaleer: Ref
  var newer: Ref
  var asserter: Ref
  var assumeer: Ref
  var gotoer: Ref

  folder := new(foo)
  unfolder := new(foo)
  inhaleer := new(foo)
  exhaleer := new(foo)
  newer := new(foo)
  asserter := new(foo)
  assumeer := new(foo)
  gotoer := new(foo)

  folder.foo := 1
  unfolder.foo := 1
  inhaleer.foo := 1
  exhaleer.foo := 1
  newer.foo := 1
  asserter.foo := 1
  assumeer.foo := 1
  gotoer.foo := 1
}

method controlStructures()
{
  var whileer: Ref
  var ifer: Ref
  var elseifer: Ref
  var elseer: Ref

  whileer := new(foo)
  ifer := new(foo)
  elseifer := new(foo)
  elseer := new(foo)

  whileer.foo := 1
  ifer.foo := 1
  elseifer.foo := 1
  elseer.foo := 1
}

method specialFreshBlock()
{
  var fresher: Ref
  var constraininger: Ref

  fresher := new(foo)
  constraininger := new(foo)

  fresher.foo := 1
  constraininger.foo := 1
}

method sequences()
{
  var Seqer: Ref

  Seqer := new(foo)

  Seqer.foo := 1
}

method setsAndMultisets()
{
  var Seter: Ref
  var Multiseter: Ref
  var unioner: Ref
  var intersectioner: Ref
  var setminuser: Ref
  var subseter: Ref

  Seter := new(foo)
  Multiseter := new(foo)
  unioner := new(foo)
  intersectioner := new(foo)
  setminuser := new(foo)
  subseter := new(foo)

  Seter.foo := 1
  Multiseter.foo := 1
  unioner.foo := 1
  intersectioner.foo := 1
  setminuser.foo := 1
  subseter.foo := 1
}

method proverHintExpressions()
{
  var unfoldinger: Ref
  var iner: Ref

  unfoldinger := new(foo)
  unfoldinger.foo := 1
  iner := new(foo)
  iner.foo := 1
}

method oldExpression()
{
  var older: Ref

  older := new(foo)
  older.foo := 1
}

method quantification()
{
  var foraller: Ref
  var existser: Ref

  foraller := new(foo)
  foraller.foo := 1
  existser := new(foo)
  existser.foo := 1
}

method permissionSyntax()
{
  var accer: Ref
  var wildcarder: Ref
  var writer: Ref
  var noneer: Ref
  var epsiloner: Ref
  var permer: Ref

  accer := new(foo)
  accer.foo := 1
  wildcarder := new(foo)
  wildcarder.foo := 1
  writer := new(foo)
  writer.foo := 1
  noneer := new(foo)
  noneer.foo := 1
  epsiloner := new(foo)
  epsiloner.foo := 1
  permer := new(foo)
  permer.foo := 1
}

method modifiers()
{
  var uniqueer: Ref

  uniqueer := new(foo)
  uniqueer.foo := 1
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(_x: Perm, _y: Perm): Perm
    function minus(_x: Perm, _y: Perm): Perm
    function geq(_x: Perm, _y: Perm): Bool
    function joinable(_x: Perm, _y: Perm): Bool

    function times(_x: Perm, _y: Perm): Perm

    //Auxiliary functions
    function share(_x: Rational): Perm
    function valid_share(_x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall _a: Int, _b: Int :: {biConstr(_a, _b)} biConstr(_a, _b) == share(_a/_b)}


    axiom axValid { forall _x: Rational :: {valid_share(_x)}
        valid_share(_x) <==> (_x >= 0/1 && _x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall _a: Rational, _b: Rational :: { share(_a), share(_b) }
        share(_a) == share(_b) ==> _a == _b
    }
    axiom axPlus { forall _a: Rational, _b: Rational :: { plus(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) ==> plus(share(_a), share(_b)) == share(_a + _b)
    }
    axiom axMinus { forall _a: Rational, _b: Rational :: { minus(share(_a), share(_b)) }
        geq(share(_a), share(_b)) ==> minus(share(_a), share(_b)) == share(_a - _b)
    }
    axiom axCanJoin { forall _a: Rational, _b: Rational :: { joinable(share(_a), share(_b)) }
        valid_share(_a) && valid_share(_b) ==> (joinable(share(_a), share(_b)) == valid_share(_a + _b))
    }
    axiom axGeq { forall _a: Rational, _b: Rational :: { geq(share(_a), share(_b)) }
        valid_share(_a) && valid_share(_b) ==> (geq(share(_a), share(_b)) <==> valid_share(_a - _b))
    }
    axiom axMul { forall _a: Rational, _b: Rational :: {times(share(_a), share(_b))} times(share(_a), share(_b)) == share(_a * _b)}

    axiom axJoinComm {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == plus(_q, _p)}
    axiom axJoinAssoc {forall _p: Perm, _q: Perm, _r: Perm :: {plus(plus(_p, _q), _r)} plus(plus(_p, _q), _r) == plus(_p, plus(_q, _r))}
    axiom axJoinCancel { forall _p: Perm, _q: Perm, _x: Perm :: {plus(_p, _x), plus(_q, _x)} plus(_p, _x) == plus(_q, _x) ==> _p == _q}

    axiom axUnitGeq { forall _p: Perm :: {geq(_p, unit())} geq(_p, unit())}
    axiom axUnitGeq2 { forall _p: Perm :: {geq(unit(),_p)} geq(unit(),_p) <==> _p == unit()}
    axiom axFullGeq { forall _p: Perm :: {geq(full(),_p)} geq(full(),_p)}
    axiom axFullGeq2 { forall _p: Perm :: {geq(_p, full())} geq(_p, full()) <==> _p == full()}
    axiom axGeqId { forall _p: Perm :: {geq(_p, _p)} geq(_p, _p)}
    axiom axMinusId { forall _p: Perm :: {minus(_p, _p)} minus(_p, _p) == unit()}


    axiom axUnitJoin { forall _p: Perm :: {plus(unit(),_p)} plus(unit(),_p) == _p}
    axiom axUnitJoinable { forall _p: Perm :: {joinable(_p, unit())} joinable(_p, unit())}
    axiom axJoinableComm { forall _p: Perm, _q: Perm :: {joinable(_p, _q)} joinable(_p, _q) == joinable(_q,_p)}
    axiom axTimes0 { forall _p: Perm :: {times(unit(),_p)} times(unit(),_p) == unit()}
    axiom axTimes1 { forall _p: Perm :: {times(full(),_p)} times(full(),_p) == _p}

    axiom axGeqPlus { forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(_a, _x)}
    axiom axGeqMinus {forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(minus(_a, _y), _x)}
    axiom axMinusUneq { forall _p: Perm, _q: Perm :: {geq(_p, _q)} geq(_p, _q) && _p != _q ==> minus(_p, _q) != unit()}

    axiom axPositive {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == unit() ==> _p == unit() && _q == unit()}
    axiom axPlusGeq {forall _p: Perm, _q: Perm :: {geq(plus(_p, _q), _p)} /*joinable(_p, _q) ==>*/ geq(plus(_p, _q), _p)}
    axiom axMinusCancel {forall _p: Perm, _q: Perm :: {minus(plus(_p, _q), _q)} minus(plus(_p, _q), _q) == _p}

}


domain _Scalar { //Fractional scalars
    function zeroS(): Scalar 
    function oneS(): Scalar
    function plusS(_x: Scalar, _y: Scalar): Scalar
    function minusS(_x: Scalar, _y: Scalar): Scalar
    function geqS(_x: Scalar, _y: Scalar): Bool
    //function joinable(_x: Perm, _y: Perm): Bool //not needed, joinability depends on perms' joinable predicate

    function timesS(_x: Scalar, _y: Scalar): Scalar
    function applyS(_x: Scalar, _y: Perm): Perm
    //Auxiliary functions
//Integer scalars
    function stack(_r: Rational) : Scalar
    axiom axStack0 { stack(0/1) == zeroS()}
    axiom axStack1 { stack(1/1) == oneS() }
    axiom axPlusStack { forall _n: Rational, _m: Rational :: {plusS(stack(_n), stack(_m))} _m >= 0/1 ==> _n >= 0/1 ==> plusS(stack(_n), stack(_m)) == stack(_m + _n)}
    axiom axGeqStack { forall _n: Rational, _m: Rational :: {geqS(stack(_n), stack(_m))} _m >= 0/1 ==> _n >= 0/1 ==> geqS(stack(_n), stack(_m)) <==> _n >= _m}
    axiom axMinusStack { forall _n: Rational, _m: Rational ::{minusS(stack(_n), stack(_m))} _m >= 0/1 ==> _n >= 0/1 ==> geqS(stack(_n), stack(_m)) ==> minusS(stack(_n), stack(_m)) == stack(_n - _m)}
    axiom axStackApply { forall _p: Rational, _n: Rational :: {applyS(stack(_n), share(_p))} valid_share(_n * _p) ==> applyS(stack(_n), share(_p)) == share(_n * _p)}
    axiom axStackTimes { forall _n: Rational, _m: Rational :: {timesS(stack(_n), stack(_m))} _m >= 0/1 ==> _n >= 0/1 ==> timesS(stack(_n), stack(_m)) == stack(_m * _n)}

//PLUS
    axiom axPlusZero{ forall _s: Scalar :: {plusS(zeroS(),_s)} plusS(zeroS(),_s) == _s}
    axiom axPlusComm {forall _s: Scalar, _t: Scalar :: {plusS(_s, _t)} plusS(_s, _t) == plusS(_t, _s)}

//APPLY
//one = identity function, zero = constant unit() function
    axiom applyZero { forall _p: Perm :: {applyS(zeroS(), _p)} applyS(zeroS(), _p) == unit() }
    axiom applyOne { forall _p: Perm :: {applyS(oneS(), _p)} applyS(oneS(), _p) == _p }


//TIMES

    axiom axTimes0S { forall _s: Scalar :: {timesS(zeroS(), _s)} timesS(zeroS(),_s) == zeroS()}
    axiom axTimes1S { forall _s: Scalar :: {timesS(oneS(),_s)} timesS(oneS(),_s) == _s}
    axiom axTimesComm {forall _s: Scalar, _t: Scalar :: {timesS(_s, _t)} timesS(_s, _t) == timesS(_t, _s)}

//GEQ
    axiom axGeqZero { forall _s: Scalar :: {geqS(_s, zeroS())} geqS(_s, zeroS())}
//MINUS
    axiom axMinusZero { forall _s: Scalar :: {geqS(_s, zeroS())} geqS(_s, zeroS())}

    //additional axioms
    axiom axGeqPlusS { forall _a: Scalar, _x: Scalar, _y: Scalar :: {geqS(_a, plusS(_x, _y))} geqS(_a, plusS(_x, _y)) ==> geqS(_a, _x)}
    axiom axgeqSMinusS {forall _a: Scalar, _x: Scalar, _y: Scalar :: {geqS(_a, plusS(_x, _y))} geqS(_a, plusS(_x, _y)) ==> geqS(minusS(_a, _y), _x)}
    axiom axMinusUneqS { forall _p: Scalar, _q: Scalar :: {geqS(_p, _q)} geqS(_p, _q) && _p != _q ==> minusS(_p, _q) != zeroS()}

    axiom axPositiveS {forall _p: Scalar, _q: Scalar :: {plusS(_p, _q)} plusS(_p, _q) == zeroS() ==> _p == zeroS() && _q == zeroS()}
    axiom axPlusgeqS {forall _p: Scalar, _q: Scalar :: {geqS(plusS(_p, _q), _p)}geqS(plusS(_p, _q), _p)}
    axiom axMinusCancelS {forall _p: Scalar, _q: Scalar :: {minusS(plusS(_p, _q), _q)} minusS(plusS(_p, _q), _q) == _p}

}