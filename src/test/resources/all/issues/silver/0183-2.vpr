// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

function prio(this: Ref): Int

/*****************************************************************
 * List Nodes
 *****************************************************************/

field data: Int
field next: Ref

predicate lseg(this: Ref, end: Ref)
{
  this != end ==>
	acc(this.data) && acc(this.next) && lseg(this.next, end)
}



/*****************************************************************
 * Lists
 *****************************************************************/

field head: Ref

predicate List(this: Ref)
{
  acc(this.head) && lseg(this.head, null)
}

method insert(this: Ref, elem: Int) returns (idx: Int)
  requires List(this)
  ensures  List(this)
{
  idx := 0;  var tmp: Ref
  unfold List(this)
  if(this.head != null) { unfold lseg(this.head, null) } 

  if(this.head == null || elem <= this.head.data)
  {
    //:: ExpectedOutput(parser.error)
    ... // allocate new node at this.head, fold predicates
    tmp := new(data,next) // allocate new node
    tmp.data := elem;  tmp.next := this.head
    fold lseg(this.head, null)
    fold lseg(tmp, null);  this.head := tmp
  } else {
    var hd : Ref := this.head
    var ptr: Ref := hd // running variable
    idx := idx + 1

    fold lseg(hd, hd)  // for loop invariant $\label{lseg-establish-inv}$
    while(ptr.next != null &&
        unfolding lseg(ptr.next, null) in ptr.next.data < elem)
      invariant lseg(hd, ptr) && acc(ptr.next) && acc(ptr.data) //$\label{lseg-loopinv}$
      invariant lseg(ptr.next, null) //$\label{lseg-loopinv-end}$
    {
      unfold lseg(ptr.next, null)
      idx := idx + 1;  var ptrn: Ref := ptr.next
      fold lseg(ptrn, ptrn);  fold lseg(ptr, ptrn)
      concat(hd, ptr, ptrn) // add to end of list segment
      ptr := ptrn
    }
    //... // allocate new node at ptr.next, fold predicates
    tmp := new(data,next)
    tmp.data := elem
    tmp.next := ptr.next
    ptr.next := tmp
    fold lseg(ptr.next, null);  fold lseg(ptr, null)
    concat(hd, ptr, null) // concat two lsegs to obtain full list $\label{lseg-obtain-list}$
  } //$\label{lseg-insert-end}$
  fold List(this)
}

method concat(this: Ref, ptr: Ref, end: Ref)
  requires lseg(this, ptr) && lseg(ptr, end)
  requires end != null ==> acc(end.next, 1/2) // not forming a cycle
  ensures  lseg(this, end)
  ensures  end != null ==> acc(end.next, 1/2)
{
	if(this != ptr) {
		unfold lseg(this, ptr);  concat(this.next, ptr, end)
		fold lseg(this, end)
  }
}


//@TIMING:{"total":0.034,"timings":[9,91,92]}
//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axUnitJoinable { forall p: Perm :: {joinable(p, unit())} joinable(p, unit())}
    axiom axJoinableComm { forall p: Perm, q: Perm :: {joinable(p, q)} joinable(p, q) == joinable(q, p)}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}

    axiom axGeqPlus { forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(a, x)}
    axiom axGeqMinus {forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) && joinable(x, y) <==> geq(minus(a, y), x) && geq(a, y)}

}
