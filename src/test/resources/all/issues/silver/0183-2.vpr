// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

function prio(this: Ref): Int

/*****************************************************************
 * List Nodes
 *****************************************************************/

field data: Int
field next: Ref

predicate lseg(this: Ref, end: Ref)
{
  this != end ==>
	acc(this.data) && acc(this.next) && lseg(this.next, end)
}



/*****************************************************************
 * Lists
 *****************************************************************/

field head: Ref

predicate List(this: Ref)
{
  acc(this.head) && lseg(this.head, null)
}

method insert(this: Ref, elem: Int) returns (idx: Int)
  requires List(this)
  ensures  List(this)
{
  idx := 0;  var tmp: Ref
  unfold List(this)
  if(this.head != null) { unfold lseg(this.head, null) } 

  if(this.head == null || elem <= this.head.data)
  {
    //:: ExpectedOutput(parser.error)
    ... // allocate new node at this.head, fold predicates
    tmp := new(data,next) // allocate new node
    tmp.data := elem;  tmp.next := this.head
    fold lseg(this.head, null)
    fold lseg(tmp, null);  this.head := tmp
  } else {
    var hd : Ref := this.head
    var ptr: Ref := hd // running variable
    idx := idx + 1

    fold lseg(hd, hd)  // for loop invariant $\label{lseg-establish-inv}$
    while(ptr.next != null &&
        unfolding lseg(ptr.next, null) in ptr.next.data < elem)
      invariant lseg(hd, ptr) && acc(ptr.next) && acc(ptr.data) //$\label{lseg-loopinv}$
      invariant lseg(ptr.next, null) //$\label{lseg-loopinv-end}$
    {
      unfold lseg(ptr.next, null)
      idx := idx + 1;  var ptrn: Ref := ptr.next
      fold lseg(ptrn, ptrn);  fold lseg(ptr, ptrn)
      concat(hd, ptr, ptrn) // add to end of list segment
      ptr := ptrn
    }
    //... // allocate new node at ptr.next, fold predicates
    tmp := new(data,next)
    tmp.data := elem
    tmp.next := ptr.next
    ptr.next := tmp
    fold lseg(ptr.next, null);  fold lseg(ptr, null)
    concat(hd, ptr, null) // concat two lsegs to obtain full list $\label{lseg-obtain-list}$
  } //$\label{lseg-insert-end}$
  fold List(this)
}

method concat(this: Ref, ptr: Ref, end: Ref)
  requires lseg(this, ptr) && lseg(ptr, end)
  requires end != null ==> acc(end.next, 1/2) // not forming a cycle
  ensures  lseg(this, end)
  ensures  end != null ==> acc(end.next, 1/2)
{
	if(this != ptr) {
		unfold lseg(this, ptr);  concat(this.next, ptr, end)
		fold lseg(this, end)
  }
}


//@TIMING:{"total":0.034,"timings":[9,91,92]}
//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(_x: Perm, _y: Perm): Perm
    function minus(_x: Perm, _y: Perm): Perm
    function geq(_x: Perm, _y: Perm): Bool
    function joinable(_x: Perm, _y: Perm): Bool

    function times(_x: Perm, _y: Perm): Perm

    //Auxiliary functions
    function share(_x: Rational): Perm
    function valid_share(_x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall _a: Int, _b: Int :: {biConstr(_a, _b)} biConstr(_a, _b) == share(_a/_b)}


    axiom axValid { forall _x: Rational :: {valid_share(_x)}
        valid_share(_x) <==> (_x >= 0/1 && _x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall _a: Rational, _b: Rational :: { share(_a), share(_b) }
        share(_a) == share(_b) ==> _a == _b
    }
    axiom axPlus { forall _a: Rational, _b: Rational :: { plus(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) ==> plus(share(_a), share(_b)) == share(_a + _b)
    }
    axiom axMinus { forall _a: Rational, _b: Rational :: { minus(share(_a), share(_b)) }
        geq(share(_a), share(_b)) ==> minus(share(_a), share(_b)) == share(_a - _b)
    }
    axiom axCanJoin { forall _a: Rational, _b: Rational :: { joinable(share(_a), share(_b)) }
        valid_share(_a) && valid_share(_b) ==> (joinable(share(_a), share(_b)) == valid_share(_a + _b))
    }
    axiom axGeq { forall _a: Rational, _b: Rational :: { geq(share(_a), share(_b)) }
        valid_share(_a) && valid_share(_b) ==> (geq(share(_a), share(_b)) <==> valid_share(_a - _b))
    }
    axiom axMul { forall _a: Rational, _b: Rational :: {times(share(_a), share(_b))} times(share(_a), share(_b)) == share(_a * _b)}

    axiom axJoinComm {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == plus(_q, _p)}
    axiom axJoinAssoc {forall _p: Perm, _q: Perm, _r: Perm :: {plus(plus(_p, _q), _r)} plus(plus(_p, _q), _r) == plus(_p, plus(_q, _r))}
    axiom axJoinCancel { forall _p: Perm, _q: Perm, _x: Perm :: {plus(_p, _x), plus(_q, _x)} plus(_p, _x) == plus(_q, _x) ==> _p == _q}

    axiom axUnitGeq { forall _p: Perm :: {geq(_p, unit())} geq(_p, unit())}
    axiom axUnitGeq2 { forall _p: Perm :: {geq(unit(),_p)} geq(unit(),_p) <==> _p == unit()}
    axiom axFullGeq { forall _p: Perm :: {geq(full(),_p)} geq(full(),_p)}
    axiom axFullGeq2 { forall _p: Perm :: {geq(_p, full())} geq(_p, full()) <==> _p == full()}
    axiom axGeqId { forall _p: Perm :: {geq(_p, _p)} geq(_p, _p)}
    axiom axMinusId { forall _p: Perm :: {minus(_p, _p)} minus(_p, _p) == unit()}


    axiom axUnitJoin { forall _p: Perm :: {plus(unit(),_p)} plus(unit(),_p) == _p}
    axiom axUnitJoinable { forall _p: Perm :: {joinable(_p, unit())} joinable(_p, unit())}
    axiom axJoinableComm { forall _p: Perm, _q: Perm :: {joinable(_p, _q)} joinable(_p, _q) == joinable(_q,_p)}
    axiom axTimes0 { forall _p: Perm :: {times(unit(),_p)} times(unit(),_p) == unit()}
    axiom axTimes1 { forall _p: Perm :: {times(full(),_p)} times(full(),_p) == _p}

    axiom axGeqPlus { forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(_a, _x)}
    axiom axGeqMinus {forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(minus(_a, _y), _x)}
    axiom axMinusUneq { forall _p: Perm, _q: Perm :: {geq(_p, _q)} geq(_p, _q) && _p != _q ==> minus(_p, _q) != unit()}

    axiom axPositive {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == unit() ==> _p == unit() && _q == unit()}
    axiom axPlusGeq {forall _p: Perm, _q: Perm :: {geq(plus(_p, _q), _p)} /*joinable(_p, _q) ==>*/ geq(plus(_p, _q), _p)}
    axiom axMinusCancel {forall _p: Perm, _q: Perm :: {minus(plus(_p, _q), _q)} minus(plus(_p, _q), _q) == _p}

}
