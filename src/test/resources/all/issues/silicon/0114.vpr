// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field f: Int

function fun1(j: Int): Int { 10 }

predicate P(x: Ref, b: Bool) { b ==> acc(x.f) }


method test02(x: Ref, b: Bool) {
  inhale P(x, b)

  //:: UnexpectedOutput(assert.failed:assertion.false, /silicon/issue/114/)
  assert forall j: Int :: {fun1(j)} unfolding P(x, b) in fun1(j) > 0
}


method test03(x: Ref, b: Bool) {
  assert forall j: Int :: {fun1(j)} b ? fun1(j) > 0 : fun1(j) > 1
}


function fun2(b: Bool, x: Ref, y: Ref, j: Int): Int
  requires b ? acc(x.f) : acc(y.f)
{ 10 }

method test04(x: Ref, y: Ref, b: Bool) {
  inhale acc(x.f) && acc(y.f)

  assert forall j: Int :: {fun2(b, x, y, j)} fun2(b, x, y, j) > 0
}


domain D {
  function fun3(i: Int): Bool
}

method test05(x: Ref, y: Ref, b: Bool) {
  inhale acc(x.f) && acc(y.f)

  inhale forall j: Int :: {fun2(b, x, y, j)} 0 < j && j < 10 ==> fun3(j)
  inhale fun2(b, x, y, 5) > 0

  //:: UnexpectedOutput(assert.failed:assertion.false, /silicon/issue/114/)
  assert fun3(5)
}


method test01(x: Ref, b: Bool, c: Bool)
  requires acc(P(x, c))
{
  assert forall j: Int :: fun1(j) > 0
  assert forall j: Int :: false ? true : fun1(j) > 0
  assert forall j: Int :: b ? fun1(j) > 5 : fun1(j) > 0

  assert forall j: Int :: true ==> fun1(j) > 0
  assert forall j: Int :: b ==> fun1(j) > 0

  //:: UnexpectedOutput(assert.failed:assertion.false, /silicon/issue/114/)
  assert forall j: Int :: unfolding acc(P(x, c)) in fun1(j) > 0

  //:: MissingOutput(assert.failed:assertion.false, /silicon/issue/34/)
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axUnitJoinable { forall p: Perm :: {joinable(p, unit())} joinable(p, unit())}
    axiom axJoinableComm { forall p: Perm, q: Perm :: {joinable(p, q)} joinable(p, q) == joinable(q, p)}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}

    axiom axGeqPlus { forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(a, x)}
    axiom axGeqMinus {forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(minus(a, y), x)}
    axiom axMinusUneq { forall p: Perm, q: Perm :: {geq(p, q)} geq(p, q) && p != q ==> minus(p, q) != unit()}

}
