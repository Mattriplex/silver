// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

domain Vector9D {

  function Vector9D_ctor(f1: Int, f2: Int, f3: Int, f4: Int, f5: Int, f6: Int, f7: Int, f8: Int, f9: Int): Vector9D
  function Vector9D_ctor_syn(f1: Int, f2: Int, f3: Int, f4: Int, f5: Int, f6: Int, f7: Int, f8: Int, f9: Int): Vector9D

  function Vector9D_f1(v: Vector9D): Int

  function Vector9D_f2(v: Vector9D): Int

  function Vector9D_f3(v: Vector9D): Int

  function Vector9D_f4(v: Vector9D): Int

  function Vector9D_f5(v: Vector9D): Int

  function Vector9D_f6(v: Vector9D): Int

  function Vector9D_f7(v: Vector9D): Int

  function Vector9D_f8(v: Vector9D): Int

  function Vector9D_f9(v: Vector9D): Int

  axiom ax_synonim {
      forall f1: Int, f2: Int, f3: Int, f4: Int, f5: Int, f6: Int, f7: Int, f8: Int, f9: Int ::
        { Vector9D_ctor(f1, f2, f3, f4, f5, f6, f7, f8, f9) }
          Vector9D_ctor(f1, f2, f3, f4, f5, f6, f7, f8, f9) == Vector9D_ctor_syn(f1, f2, f3, f4, f5, f6, f7, f8, f9)
  }

  axiom ax_values_of_fields {
      forall f1: Int, f2: Int, f3: Int, f4: Int, f5: Int, f6: Int, f7: Int, f8: Int, f9: Int ::
        { Vector9D_ctor(f1, f2, f3, f4, f5, f6, f7, f8, f9) }
               (Vector9D_f1(Vector9D_ctor_syn(f1, f2, f3, f4, f5, f6, f7, f8, f9)) == f1)
            && (Vector9D_f2(Vector9D_ctor_syn(f1, f2, f3, f4, f5, f6, f7, f8, f9)) == f2)
            && (Vector9D_f3(Vector9D_ctor_syn(f1, f2, f3, f4, f5, f6, f7, f8, f9)) == f3)
            && (Vector9D_f4(Vector9D_ctor_syn(f1, f2, f3, f4, f5, f6, f7, f8, f9)) == f4)
            && (Vector9D_f5(Vector9D_ctor_syn(f1, f2, f3, f4, f5, f6, f7, f8, f9)) == f5)
            && (Vector9D_f6(Vector9D_ctor_syn(f1, f2, f3, f4, f5, f6, f7, f8, f9)) == f6)
            && (Vector9D_f7(Vector9D_ctor_syn(f1, f2, f3, f4, f5, f6, f7, f8, f9)) == f7)
            && (Vector9D_f8(Vector9D_ctor_syn(f1, f2, f3, f4, f5, f6, f7, f8, f9)) == f8)
            && (Vector9D_f9(Vector9D_ctor_syn(f1, f2, f3, f4, f5, f6, f7, f8, f9)) == f9)
  }
}

method main()
{
  var v1: Vector9D
  v1 := Vector9D_ctor(1, 2, 3, 4, 5, 6, 7, 8, 9)

  v1 := Vector9D_ctor(Vector9D_f1(v1), Vector9D_f2(v1), Vector9D_f3(v1), Vector9D_f4(v1), Vector9D_f5(v1), Vector9D_f6(v1), Vector9D_f7(v1), Vector9D_f8(v1), Vector9D_f9(v1))
  v1 := Vector9D_ctor(Vector9D_f1(v1), Vector9D_f2(v1), Vector9D_f3(v1), Vector9D_f4(v1), Vector9D_f5(v1), Vector9D_f6(v1), Vector9D_f7(v1), Vector9D_f8(v1), Vector9D_f9(v1))
  v1 := Vector9D_ctor(Vector9D_f1(v1), Vector9D_f2(v1), Vector9D_f3(v1), Vector9D_f4(v1), Vector9D_f5(v1), Vector9D_f6(v1), Vector9D_f7(v1), Vector9D_f8(v1), Vector9D_f9(v1))
  v1 := Vector9D_ctor(Vector9D_f1(v1), Vector9D_f2(v1), Vector9D_f3(v1), Vector9D_f4(v1), Vector9D_f5(v1), Vector9D_f6(v1), Vector9D_f7(v1), Vector9D_f8(v1), Vector9D_f9(v1))
  v1 := Vector9D_ctor(Vector9D_f1(v1), Vector9D_f2(v1), Vector9D_f3(v1), Vector9D_f4(v1), Vector9D_f5(v1), Vector9D_f6(v1), Vector9D_f7(v1), Vector9D_f8(v1), Vector9D_f9(v1))
  v1 := Vector9D_ctor(Vector9D_f1(v1), Vector9D_f2(v1), Vector9D_f3(v1), Vector9D_f4(v1), Vector9D_f5(v1), Vector9D_f6(v1), Vector9D_f7(v1), Vector9D_f8(v1), Vector9D_f9(v1))

  assert Vector9D_f1(v1) == 1
  assert Vector9D_f2(v1) == 2
  assert Vector9D_f3(v1) == 3
  assert Vector9D_f4(v1) == 4
  assert Vector9D_f5(v1) == 5
  assert Vector9D_f6(v1) == 6
  assert Vector9D_f7(v1) == 7
  assert Vector9D_f8(v1) == 8
  assert Vector9D_f9(v1) == 9
}
//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axUnitJoinable { forall p: Perm :: {joinable(p, unit())} joinable(p, unit())}
    axiom axJoinableComm { forall p: Perm, q: Perm :: {joinable(p, q)} joinable(p, q) == joinable(q, p)}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}

    axiom axGeqPlus { forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(a, x)}
    axiom axGeqMinus {forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) && joinable(x, y) <==> geq(minus(a, y), x) && geq(a, y)}

}
