// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field val: Int

predicate one(a: Ref) {
  acc(a.val)
}

predicate two(a: Ref, i: Int) {
  acc(a.val)
}

define access_vals(as) forall a: Ref :: { a.val } a in as ==> acc(a.val)
define access_one(as) forall a: Ref :: { one(a) } a in as ==> one(a)
define access_two(as, is) forall a: Ref, i: Int :: { two(a, i) } a in as && i in  is ==> two(a, i)

function foo_vals(as: Set[Ref]): Int
  requires access_vals(as)

function foo_ones(as: Set[Ref]): Int
  requires access_one(as)

function foo_twos(as: Set[Ref], is: Set[Int]): Int
  requires access_two(as, is)

method test_vals(as: Set[Ref]) {
  inhale access_vals(as)
  inhale foo_vals(as) == 0
  exhale foo_vals(as) == 0
}

method test_vals_2(as: Set[Ref], bs: Set[Ref]) {
  inhale access_vals(as) && access_vals(bs)
  inhale foo_vals(as) == 0

  var a1: Ref
  assume a1 in as
  a1.val := 1 + a1.val - 1

  var b1: Ref
  assume b1 in bs
  b1.val := 1
  exhale access_vals(bs)

  exhale foo_vals(as) == 0
}

method test_ones(as: Set[Ref]) {
  inhale access_one(as)
  inhale foo_ones(as) == 0
  exhale foo_ones(as) == 0
}

method test_ones_2(as: Set[Ref], bs: Set[Ref]) {
  inhale access_one(as) && access_one(bs)
  inhale foo_ones(as) == 0

  var a1: Ref
  assume a1 in as
  unfold one(a1)
  a1.val := 1 + a1.val - 1
  fold one(a1)

  var b1: Ref
  assume b1 in bs
  exhale one(b1)
  exhale access_one(bs setminus Set(b1))

  exhale foo_ones(as) == 0
}

method test_twos(as: Set[Ref], is: Set[Int]) {
  inhale access_two(as, is)
  inhale foo_twos(as, is) == 0
  exhale foo_twos(as, is) == 0
}

method test_twos_2(as: Set[Ref], is: Set[Int]) {
  inhale access_two(as, is)
  inhale foo_twos(as, is) == 0

  var a1: Ref; var i1: Int
  assume a1 in as && i1 in is
  unfold two(a1, i1)
  fold two(a1, i1)

  exhale foo_twos(as, is) == 0
}

method test_twos_3(as: Set[Ref], is: Set[Int], bs: Set[Ref], js: Set[Int]) {
  inhale access_two(as, is) && access_two(bs, js)
  inhale foo_twos(as, is) == 0

  var b1: Ref; var j1: Int
  assume b1 in bs && j1 in js
  exhale two(b1, j1)

  var a1: Ref; var i1: Int
  assume a1 in as && i1 in is
  unfold two(a1, i1)
  a1.val := 1 + a1.val - 1
  fold two(a1, i1)

  exhale access_two(bs setminus Set(b1), js setminus Set(j1))

  exhale foo_twos(as, is) == 0
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(_x: Perm, _y: Perm): Perm
    function minus(_x: Perm, _y: Perm): Perm
    function geq(_x: Perm, _y: Perm): Bool
    function joinable(_x: Perm, _y: Perm): Bool

    function times(_x: Perm, _y: Perm): Perm

    //Auxiliary functions
    function share(_x: Rational): Perm
    function valid_share(_x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall _a: Int, _b: Int :: {biConstr(_a, _b)} biConstr(_a, _b) == share(_a/_b)}


    axiom axValid { forall _x: Rational :: {valid_share(_x)}
        valid_share(_x) <==> (_x >= 0/1 && _x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall _a: Rational, _b: Rational :: { share(_a), share(_b) }
        share(_a) == share(_b) ==> _a == _b
    }
    axiom axPlus { forall _a: Rational, _b: Rational :: { plus(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) ==> plus(share(_a), share(_b)) == share(_a + _b)
    }
    axiom axMinus { forall _a: Rational, _b: Rational :: { minus(share(_a), share(_b)) }
        geq(share(_a), share(_b)) ==> minus(share(_a), share(_b)) == share(_a - _b)
    }
    axiom axCanJoin { forall _a: Rational, _b: Rational :: { joinable(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) <==> valid_share(_a) && valid_share(_b) && valid_share(_a + _b)
    }
    axiom axGeq { forall _a: Rational, _b: Rational :: { geq(share(_a), share(_b)) }
        geq(share(_a), share(_b)) <==> valid_share(_a) && valid_share(_b) && valid_share(_a - _b)
    }
    axiom axMul { forall _a: Rational, _b: Rational :: {times(share(_a), share(_b))} times(share(_a), share(_b)) == share(_a * _b)}

    axiom axJoinComm {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == plus(_q, _p)}
    axiom axJoinAssoc {forall _p: Perm, _q: Perm, _r: Perm :: {plus(plus(_p, _q), _r)} plus(plus(_p, _q), _r) == plus(_p, plus(_q, _r))}
    axiom axJoinCancel { forall _p: Perm, _q: Perm, _x: Perm :: {plus(_p, _x), plus(_q, _x)} plus(_p, _x) == plus(_q, _x) ==> _p == _q}

    axiom axUnitGeq { forall _p: Perm :: {geq(_p, unit())} geq(_p, unit())}
    axiom axUnitGeq2 { forall _p: Perm :: {geq(unit(),_p)} geq(unit(),_p) <==> _p == unit()}
    axiom axFullGeq { forall _p: Perm :: {geq(full(),_p)} geq(full(),_p)}
    axiom axFullGeq2 { forall _p: Perm :: {geq(_p, full())} geq(_p, full()) <==> _p == full()}
    axiom axGeqId { forall _p: Perm :: {geq(_p, _p)} geq(_p, _p)}
    axiom axMinusId { forall _p: Perm :: {minus(_p, _p)} minus(_p, _p) == unit()}


    axiom axUnitJoin { forall _p: Perm :: {plus(unit(),_p)} plus(unit(),_p) == _p}
    axiom axUnitJoinable { forall _p: Perm :: {joinable(_p, unit())} joinable(_p, unit())}
    axiom axJoinableComm { forall _p: Perm, _q: Perm :: {joinable(_p, _q)} joinable(_p, _q) == joinable(_q,_p)}
    axiom axTimes0 { forall _p: Perm :: {times(unit(),_p)} times(unit(),_p) == unit()}
    axiom axTimes1 { forall _p: Perm :: {times(full(),_p)} times(full(),_p) == _p}

    axiom axGeqPlus { forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(_a, _x)}
    axiom axGeqMinus {forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(minus(_a, _y), _x)}
    axiom axMinusUneq { forall _p: Perm, _q: Perm :: {geq(_p, _q)} geq(_p, _q) && _p != _q ==> minus(_p, _q) != unit()}

    axiom axPositive {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == unit() ==> _p == unit() && _q == unit()}
    axiom axPlusGeq {forall _p: Perm, _q: Perm :: {geq(plus(_p, _q), _p)} joinable(_p, _q) ==> geq(plus(_p, _q), _p)}
    axiom axMinusCancel {forall _p: Perm, _q: Perm :: {minus(plus(_p, _q), _q)} minus(plus(_p, _q), _q) == _p}

}
