// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field item: Int

function seqToSeqHelper_wild(xs: Seq[Ref], i: Int): Seq[Int]
  requires 0 <= i && i <= |xs|
  requires (forall j: Int :: 0 <= j && j < |xs| ==> acc(xs[j].item, wildcard))
  requires [i < |xs|, true]

  ensures |result| == |xs| - i
  ensures (forall j: Int :: i <= j && j < |xs| ==> result[j - i] == xs[j].item)
{
  Seq(xs[i].item) ++ seqToSeqHelper_wild(xs, i + 1)
}

function seqToSeqHelper_frac(xs: Seq[Ref], i: Int): Seq[Int]
  requires 0 <= i && i <= |xs|
  requires (forall j: Int :: 0 <= j && j < |xs| ==> acc(xs[j].item, 1/77))
  requires [i < |xs|, true]

  ensures |result| == |xs| - i
  ensures (forall j: Int :: i <= j && j < |xs| ==> result[j - i] == xs[j].item)
{
  Seq(xs[i].item) ++ seqToSeqHelper_frac(xs, i + 1)
}

method method_seqToSeqHelper(xs: Seq[Ref], i: Int) returns (res: Seq[Int])
  requires 0 <= i && i <= |xs|
  requires (forall j: Int :: 0 <= j && j < |xs| ==> acc(xs[j].item, wildcard))
  ensures 0 <= i && i <= |xs|
  ensures (forall j: Int :: 0 <= j && j < |xs| ==> acc(xs[j].item, wildcard))

  ensures |res| == |xs| - i
  ensures (forall j: Int :: i <= j && j < |xs| ==> res[j - i] == xs[j].item)
{
  if (i < |xs|) {
    var tail: Seq[Int]
    tail := method_seqToSeqHelper(xs, i + 1)
    res := Seq(xs[i].item) ++ tail
  } else {
    res := Seq()
  }
}

method method_seqToSeqHelper2(xs: Seq[Ref], i: Int) returns (res: Seq[Int])
  requires 0 <= i && i <= |xs|
  requires (forall j: Int :: 0 <= j && j < |xs| ==> acc(xs[j].item, wildcard))
  ensures 0 <= i && i <= |xs|
  ensures (forall j: Int :: 0 <= j && j < |xs| ==> acc(xs[j].item, wildcard))

  ensures |res| == |xs| - i
  ensures (forall j: Int :: i <= j && j < |xs| ==> res[j - i] == xs[j].item)
{
  if (i < |xs|) {
    var tail: Seq[Int]
    tail := seqToSeqHelper_wild(xs, i + 1) // with this instead of the line below, both methods fail
    res := Seq(xs[i].item) ++ tail
  } else {
    res := Seq()
  }
}




domain VCTArray[CT] {
  function loc(a: VCTArray[CT], i: Int): CT

  function alen(a: VCTArray[CT]): Int

  axiom len_nonneg {
    (forall a: VCTArray[CT] :: { alen(a) } alen(a) >= 0)
  }
}

function sumContrib(A: VCTArray[Ref], i: Int, P: Rational): Int
  requires 0/1 < P && P < 1/1;
  requires 0 <= i && i <= alen(A)
  requires (forall j: Int :: 0 <= j && j < alen(A) ==> acc(loc(A, j).item, wildcard))
{
  (i == alen(A) ? 0 : loc(A, i).item + sumContrib(A, i + 1, P))
}

method lemmaSumInit(xs: VCTArray[Ref], i: Int, P: Rational)
  requires 0/1 < P && P < 1/1;
  requires (forall i_fresh_rw_0: Int :: 0 <= i_fresh_rw_0 && i_fresh_rw_0 < alen(xs) ==> acc(loc(xs, i_fresh_rw_0).item, wildcard))
  requires (forall j: Int :: 0 <= j && j < alen(xs) ==> loc(xs, j).item == 0)
  requires 0 <= i && i <= alen(xs)
{
    assert sumContrib(xs, i, P) == (i == alen(xs) ? 0 : loc(xs, i).item + sumContrib(xs, i + 1, P))
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(_x: Perm, _y: Perm): Perm
    function minus(_x: Perm, _y: Perm): Perm
    function geq(_x: Perm, _y: Perm): Bool
    function joinable(_x: Perm, _y: Perm): Bool

    function times(_x: Perm, _y: Perm): Perm

    //Auxiliary functions
    function share(_x: Rational): Perm
    function valid_share(_x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall _a: Int, _b: Int :: {biConstr(_a, _b)} biConstr(_a, _b) == share(_a/_b)}


    axiom axValid { forall _x: Rational :: {valid_share(_x)}
        valid_share(_x) <==> (_x >= 0/1 && _x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall _a: Rational, _b: Rational :: { share(_a), share(_b) }
        share(_a) == share(_b) ==> _a == _b
    }
    axiom axPlus { forall _a: Rational, _b: Rational :: { plus(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) ==> plus(share(_a), share(_b)) == share(_a + _b)
    }
    axiom axMinus { forall _a: Rational, _b: Rational :: { minus(share(_a), share(_b)) }
        geq(share(_a), share(_b)) ==> minus(share(_a), share(_b)) == share(_a - _b)
    }
    axiom axCanJoin { forall _a: Rational, _b: Rational :: { joinable(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) <==> valid_share(_a) && valid_share(_b) && valid_share(_a + _b)
    }
    axiom axGeq { forall _a: Rational, _b: Rational :: { geq(share(_a), share(_b)) }
        geq(share(_a), share(_b)) <==> valid_share(_a) && valid_share(_b) && valid_share(_a - _b)
    }
    axiom axMul { forall _a: Rational, _b: Rational :: {times(share(_a), share(_b))} times(share(_a), share(_b)) == share(_a * _b)}

    axiom axJoinComm {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == plus(_q, _p)}
    axiom axJoinAssoc {forall _p: Perm, _q: Perm, _r: Perm :: {plus(plus(_p, _q), _r)} plus(plus(_p, _q), _r) == plus(_p, plus(_q, _r))}
    axiom axJoinCancel { forall _p: Perm, _q: Perm, _x: Perm :: {plus(_p, _x), plus(_q, _x)} plus(_p, _x) == plus(_q, _x) ==> _p == _q}

    axiom axUnitGeq { forall _p: Perm :: {geq(_p, unit())} geq(_p, unit())}
    axiom axUnitGeq2 { forall _p: Perm :: {geq(unit(),_p)} geq(unit(),_p) <==> _p == unit()}
    axiom axFullGeq { forall _p: Perm :: {geq(full(),_p)} geq(full(),_p)}
    axiom axFullGeq2 { forall _p: Perm :: {geq(_p, full())} geq(_p, full()) <==> _p == full()}
    axiom axGeqId { forall _p: Perm :: {geq(_p, _p)} geq(_p, _p)}
    axiom axMinusId { forall _p: Perm :: {minus(_p, _p)} minus(_p, _p) == unit()}


    axiom axUnitJoin { forall _p: Perm :: {plus(unit(),_p)} plus(unit(),_p) == _p}
    axiom axUnitJoinable { forall _p: Perm :: {joinable(_p, unit())} joinable(_p, unit())}
    axiom axJoinableComm { forall _p: Perm, _q: Perm :: {joinable(_p, _q)} joinable(_p, _q) == joinable(_q,_p)}
    axiom axTimes0 { forall _p: Perm :: {times(unit(),_p)} times(unit(),_p) == unit()}
    axiom axTimes1 { forall _p: Perm :: {times(full(),_p)} times(full(),_p) == _p}

    axiom axGeqPlus { forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(_a, _x)}
    axiom axGeqMinus {forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(minus(_a, _y), _x)}
    axiom axMinusUneq { forall _p: Perm, _q: Perm :: {geq(_p, _q)} geq(_p, _q) && _p != _q ==> minus(_p, _q) != unit()}

    axiom axPositive {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == unit() ==> _p == unit() && _q == unit()}
    axiom axPlusGeq {forall _p: Perm, _q: Perm :: {geq(plus(_p, _q), _p)} joinable(_p, _q) ==> geq(plus(_p, _q), _p)}
    axiom axMinusCancel {forall _p: Perm, _q: Perm :: {minus(plus(_p, _q), _q)} minus(plus(_p, _q), _q) == _p}

}
