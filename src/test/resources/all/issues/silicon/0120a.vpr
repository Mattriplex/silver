// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

domain GlobalKPermission {

  unique function globalK$(): Perm

  axiom globalKReadOnly {
    (globalK$() > none) && (write > globalK$())
  }
}

field old$methodPermission: Perm

field joinable$: Bool

field Nodenext$: Ref

field Nodeval$: Int

field old$Nodereverse_in_place$0: Seq[Int]

field par$Nodereverse_in_place$this$_4: Ref

field par$Nodereverse_in_place$k$: Perm

function Nodevals$(this$_2: Ref): Seq[Int]
  requires this$_2 != null
  requires acc(Nodelist$(this$_2), wildcard)
{
  (unfolding acc(Nodelist$(this$_2), wildcard) in (this$_2.Nodenext$ == null ? Seq(this$_2.Nodeval$) : Seq(this$_2.Nodeval$) ++ Nodevals$(this$_2.Nodenext$)))
}

function Nodereverse_vals$(this$_3: Ref): Seq[Int]
  requires this$_3 != null
  requires acc(Nodelist$(this$_3), wildcard)
{
  (unfolding acc(Nodelist$(this$_3), wildcard) in (this$_3.Nodenext$ == null ? Seq(this$_3.Nodeval$) : Nodereverse_vals$(this$_3.Nodenext$) ++ Seq(this$_3.Nodeval$)))
}

predicate Node$MonitorInvariant(this$: Ref) {
  true
}

predicate Nodelist$(this$_1: Ref) {
  acc(this$_1.Nodenext$, write) && acc(this$_1.Nodeval$, write) && ((this$_1.Nodenext$ != null) ==> acc(Nodelist$(this$_1.Nodenext$), write))
}

method Nodereverse_in_place$(this$_4: Ref, k$: Perm) returns (r: Ref)
  requires this$_4 != null
  requires k$ > none
  requires write > k$
  requires acc(Nodelist$(this$_4), write)
  ensures (r != null) && acc(Nodelist$(r), write)
  ensures Nodevals$(r) == old(Nodereverse_vals$(this$_4))
{
  var n$: Ref
  var a$: Ref
  var b$: Ref
  var c$: Ref
  var l: Ref
  var y: Ref
  l := this$_4
  r := null
  while (l != null)
    invariant (l != null) ==> acc(Nodelist$(l), write)
    invariant (r != null) ==> acc(Nodelist$(r), write)
    invariant old(Nodereverse_vals$(this$_4)) == (l == null ? Seq[Int]() : Nodereverse_vals$(l)) ++ (r == null ? Seq[Int]() : Nodevals$(r))
  {
    if (r != null) {
      unfold acc(Nodelist$(r), write)
      fold acc(Nodelist$(r), write)
    }
    unfold acc(Nodelist$(l), write)
    if (l.Nodenext$ != null) {
      unfold acc(Nodelist$(l.Nodenext$), write)
      fold acc(Nodelist$(l.Nodenext$), write)
    }
    y := l.Nodenext$
    l.Nodenext$ := r
    r := l
    fold acc(Nodelist$(r), write)
    l := y
  }
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}
}
