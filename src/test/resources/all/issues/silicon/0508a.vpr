// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field bool_prop: Bool
field item: Ref

domain identity_function[T] {
  function id(v: T): T
  axiom { forall v: T :: {id(v)} id(v) == v }
}



method test03a(trees: Set[Ref])
  requires (forall r: Ref :: {r in trees} r in trees ==> acc(r.item, 1/2))
  requires (forall r: Ref :: {r in trees} r in trees ==> acc(r.item.bool_prop, 1/2))
{
  assert forall s: Ref :: {s in trees} s in trees ==> acc(s.item.bool_prop, wildcard)
}

method test03b(trees: Set[Ref])
  requires (forall r: Ref :: {id(r)} r in trees ==> acc(id(r).item, 1/2))
  requires (forall r: Ref :: {id(r)} r in trees ==> acc(id(r).item.bool_prop, none))
{
  //:: ExpectedOutput(assert.failed:receiver.not.injective)
  //:: ExpectedOutput(assert.failed:insufficient.permission)
  //:: MissingOutput(assert.failed:receiver.not.injective, /carbon/issue/361/)
  //:: MissingOutput(assert.failed:insufficient.permission, /silicon/issue/34/)
  assert forall s: Ref :: {id(s)} s in trees ==> acc(id(s).item.bool_prop, wildcard)
}

 method test03c(trees: Set[Ref])
   requires (forall r: Ref :: {id(r)} r in trees ==> acc(id(r).item, 1/2))
   requires (forall r: Ref :: {id(r)} r in trees ==> acc(id(r).item.bool_prop, 1/2))
 {
   assert forall s: Ref :: {id(s)} s in trees ==> acc(id(s).item.bool_prop, wildcard)
 }



method test04(trees: Set[Ref])
  requires (forall r: Ref :: {r in trees} r in trees ==> acc(id(r).item, 1/2))
  requires (forall r: Ref :: {r in trees} r in trees ==> acc(id(r).item.bool_prop, 1/2))
{
  assert forall s: Ref :: {s in trees} s in trees ==> acc(id(s).item.bool_prop, wildcard)
}



method test01(trees: Seq[Ref], g: Int)
  requires 0 < g && |trees|==g
  requires (forall i: Int :: {trees[i]} 0 <= i && i < g ==> acc(trees[i].item, 1/2))
  requires (forall i: Int :: {trees[i]} 0 <= i && i < g ==> acc(trees[i].item.bool_prop, 1/2))
{
  assert forall j: Int :: {trees[j]} 0 <= j && j < g ==> acc(trees[j].item.bool_prop, wildcard)
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(_x: Perm, _y: Perm): Perm
    function minus(_x: Perm, _y: Perm): Perm
    function geq(_x: Perm, _y: Perm): Bool
    function joinable(_x: Perm, _y: Perm): Bool

    function times(_x: Perm, _y: Perm): Perm

    //Auxiliary functions
    function share(_x: Rational): Perm
    function valid_share(_x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall _a: Int, _b: Int :: {biConstr(_a, _b)} biConstr(_a, _b) == share(_a/_b)}


    axiom axValid { forall _x: Rational :: {valid_share(_x)}
        valid_share(_x) <==> (_x >= 0/1 && _x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall _a: Rational, _b: Rational :: { share(_a), share(_b) }
        share(_a) == share(_b) ==> _a == _b
    }
    axiom axPlus { forall _a: Rational, _b: Rational :: { plus(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) ==> plus(share(_a), share(_b)) == share(_a + _b)
    }
    axiom axMinus { forall _a: Rational, _b: Rational :: { minus(share(_a), share(_b)) }
        geq(share(_a), share(_b)) ==> minus(share(_a), share(_b)) == share(_a - _b)
    }
    axiom axCanJoin { forall _a: Rational, _b: Rational :: { joinable(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) <==> valid_share(_a) && valid_share(_b) && valid_share(_a + _b)
    }
    axiom axGeq { forall _a: Rational, _b: Rational :: { geq(share(_a), share(_b)) }
        geq(share(_a), share(_b)) <==> valid_share(_a) && valid_share(_b) && valid_share(_a - _b)
    }
    axiom axMul { forall _a: Rational, _b: Rational :: {times(share(_a), share(_b))} times(share(_a), share(_b)) == share(_a * _b)}

    axiom axJoinComm {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == plus(_q, _p)}
    axiom axJoinAssoc {forall _p: Perm, _q: Perm, _r: Perm :: {plus(plus(_p, _q), _r)} plus(plus(_p, _q), _r) == plus(_p, plus(_q, _r))}
    axiom axJoinCancel { forall _p: Perm, _q: Perm, _x: Perm :: {plus(_p, _x), plus(_q, _x)} plus(_p, _x) == plus(_q, _x) ==> _p == _q}

    axiom axUnitGeq { forall _p: Perm :: {geq(_p, unit())} geq(_p, unit())}
    axiom axUnitGeq2 { forall _p: Perm :: {geq(unit(),_p)} geq(unit(),_p) <==> _p == unit()}
    axiom axFullGeq { forall _p: Perm :: {geq(full(),_p)} geq(full(),_p)}
    axiom axFullGeq2 { forall _p: Perm :: {geq(_p, full())} geq(_p, full()) <==> _p == full()}

    axiom axUnitJoin { forall _p: Perm :: {plus(unit(),_p)} plus(unit(),_p) == _p}
    axiom axUnitJoinable { forall _p: Perm :: {joinable(_p, unit())} joinable(_p, unit())}
    axiom axJoinableComm { forall _p: Perm, _q: Perm :: {joinable(_p, _q)} joinable(_p, _q) == joinable(_q,_p)}
    axiom axTimes0 { forall _p: Perm :: {times(unit(),_p)} times(unit(),_p) == unit()}
    axiom axTimes1 { forall _p: Perm :: {times(full(),_p)} times(unit(),_p) == _p}

    axiom axGeqPlus { forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(_a, _x)}
    axiom axGeqMinus {forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(minus(_a, _y), _x)}
    axiom axMinusUneq { forall _p: Perm, _q: Perm :: {geq(_p, _q)} geq(_p, _q) && _p != _q ==> minus(_p, _q) != unit()}

}
