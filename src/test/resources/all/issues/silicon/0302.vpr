// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

domain Array {
  
  function loc(a: Array, i: Int): Ref
  
  function length(a: Array): Int
  
  function ref_to_array(ref: Ref): Array
  
  function ref_to_index(ref: Ref): Int
  
  axiom all_diff {
    (forall a: Array, i: Int :: { loc(a, i) } 0 <= i ==> ref_to_array(loc(a, i)) == a && ref_to_index(loc(a, i)) == i)
  }
  
  axiom length_nonneg {
    (forall a: Array :: length(a) >= 0)
  }
}

field val: Int

function p(q: Int, size: Int, rdAmount: Perm): Perm
  ensures (q % 2 != 0 && size >= 1 && q >= 0 && size >= 1 + q && ((q != 0 || result == write) && (q == 0 || result == write)) || q % 2 != 0 && (q + 1) % 2 == 0 && size >= 2 + q && q >= 0 && q >= -1 && size >= 1 + q && result == write || q % 2 != 0 && q % 2 == 0 && size >= 1 + q && q >= 0 && q >= 0 && size >= 1 + q && result == write || q % 2 != 0 && (q + 2) % 2 == 0 && size >= 3 + q && q >= 0 && q >= -2 && size >= 1 + q && result == write || q % 2 != 0 && (q + 1) % 2 == 0 && size >= 2 + q && q >= 0 && q >= -1 && size >= 1 + q && result == write || ((q + 1) % 2 != 0 && size >= 1 && q >= -1 && size >= 2 + q && ((q != 0 || result == rdAmount) && (q == 0 || result == none) && (q == 0 || result == none)) || (q + 1) % 2 != 0 && (q + 1) % 2 == 0 && size >= 2 + q && q >= -1 && q >= -1 && size >= 2 + q && result == none || (q + 1) % 2 != 0 && q % 2 == 0 && size >= 1 + q && q >= -1 && q >= 0 && size >= 2 + q && result == rdAmount || (q + 1) % 2 != 0 && (q + 2) % 2 == 0 && size >= 3 + q && q >= -1 && q >= -2 && size >= 2 + q && result == none || (q + 1) % 2 != 0 && (q + 1) % 2 == 0 && size >= 2 + q && q >= -1 && q >= -1 && size >= 2 + q && result == none) || (size >= 1 && size >= 2 && ((q != 0 || q == 1 || result == rdAmount) && (q == 0 || q == 1 || result == none) && (q == 1 || q == 0 || result == none) && (q != 1 || q != 0 || result == write) && (q != 1 || q == 0 || result == write)) || (q + 1) % 2 == 0 && size >= 2 + q && q >= -1 && size >= 2 && ((q == 1 || result == none) && (q != 1 || result == write)) || q % 2 == 0 && size >= 1 + q && q >= 0 && size >= 2 && ((q == 1 || result == rdAmount) && (q != 1 || result == write)) || (q + 2) % 2 == 0 && size >= 3 + q && q >= -2 && size >= 2 && ((q == 1 || result == none) && (q != 1 || result == write)) || (q + 1) % 2 == 0 && size >= 2 + q && q >= -1 && size >= 2 && ((q == 1 || result == none) && (q != 1 || result == write))) || ((q + 2) % 2 != 0 && size >= 1 && q >= -2 && size >= 3 + q && ((q != 0 || result == rdAmount) && (q == 0 || result == none) && (q == 0 || result == none)) || (q + 2) % 2 != 0 && (q + 1) % 2 == 0 && size >= 2 + q && q >= -2 && q >= -1 && size >= 3 + q && result == none || (q + 2) % 2 != 0 && q % 2 == 0 && size >= 1 + q && q >= -2 && q >= 0 && size >= 3 + q && result == rdAmount || (q + 2) % 2 != 0 && (q + 2) % 2 == 0 && size >= 3 + q && q >= -2 && q >= -2 && size >= 3 + q && result == none || (q + 2) % 2 != 0 && (q + 1) % 2 == 0 && size >= 2 + q && q >= -2 && q >= -1 && size >= 3 + q && result == none)) && (((q + 1) % 2 == 0 || size < 1 || q < -1 || size < 2 + q || (q != 0 || result >= rdAmount) && (q == 0 || result >= none) && (q == 0 || result >= none)) && ((q + 1) % 2 == 0 || q % 2 != 0 || size < 1 + q || q < -1 || q < 0 || size < 2 + q || result >= rdAmount) && ((q + 1) % 2 == 0 || (q + 1) % 2 != 0 || size < 2 + q || q < -1 || q < -1 || size < 2 + q || result >= none) && ((q + 1) % 2 == 0 || (q + 1) % 2 != 0 || size < 2 + q || q < -1 || q < -1 || size < 2 + q || result >= none) && ((q + 1) % 2 == 0 || (q + 2) % 2 != 0 || size < 3 + q || q < -1 || q < -2 || size < 2 + q || result >= none) && ((q % 2 == 0 || size < 1 || q < 0 || size < 1 + q || (q != 0 || result >= write) && (q == 0 || result >= write)) && (q % 2 == 0 || q % 2 != 0 || size < 1 + q || q < 0 || q < 0 || size < 1 + q || result >= write) && (q % 2 == 0 || (q + 1) % 2 != 0 || size < 2 + q || q < 0 || q < -1 || size < 1 + q || result >= write) && (q % 2 == 0 || (q + 1) % 2 != 0 || size < 2 + q || q < 0 || q < -1 || size < 1 + q || result >= write) && (q % 2 == 0 || (q + 2) % 2 != 0 || size < 3 + q || q < 0 || q < -2 || size < 1 + q || result >= write)) && ((size < 1 || size < 2 || (q != 0 || q == 1 || result >= rdAmount) && (q == 0 || q == 1 || result >= none) && (q == 1 || q == 0 || result >= none) && (q != 1 || q != 0 || result >= write) && (q != 1 || q == 0 || result >= write)) && (q % 2 != 0 || size < 1 + q || q < 0 || size < 2 || (q == 1 || result >= rdAmount) && (q != 1 || result >= write)) && ((q + 1) % 2 != 0 || size < 2 + q || q < -1 || size < 2 || (q == 1 || result >= none) && (q != 1 || result >= write)) && ((q + 1) % 2 != 0 || size < 2 + q || q < -1 || size < 2 || (q == 1 || result >= none) && (q != 1 || result >= write)) && ((q + 2) % 2 != 0 || size < 3 + q || q < -2 || size < 2 || (q == 1 || result >= none) && (q != 1 || result >= write))) && (((q + 2) % 2 == 0 || size < 1 || q < -2 || size < 3 + q || (q != 0 || result >= rdAmount) && (q == 0 || result >= none) && (q == 0 || result >= none)) && ((q + 2) % 2 == 0 || q % 2 != 0 || size < 1 + q || q < -2 || q < 0 || size < 3 + q || result >= rdAmount) && ((q + 2) % 2 == 0 || (q + 1) % 2 != 0 || size < 2 + q || q < -2 || q < -1 || size < 3 + q || result >= none) && ((q + 2) % 2 == 0 || (q + 1) % 2 != 0 || size < 2 + q || q < -2 || q < -1 || size < 3 + q || result >= none) && ((q + 2) % 2 == 0 || (q + 2) % 2 != 0 || size < 3 + q || q < -2 || q < -2 || size < 3 + q || result >= none)))

method testspec_skipping_indices1(arr: Array, size: Int, rdAmount: Perm)
  requires none < rdAmount && rdAmount < write
  requires (forall j: Int :: acc(loc(arr, j).val, p(j, size, rdAmount)))
  {
    //:: ExpectedOutput(assert.failed:insufficient.permission)    
    assert forall j:Int :: acc(loc(arr,j).val, (j < 0 || j >= size ? none : write)) // should fail! 
    assert forall j:Int :: acc(loc(arr,j).val, (j < 0 || j >= size ? none : (j % 2 == 0 ? rdAmount : write)))
    assert forall j:Int :: (j < 0 || j >= size ? none : (j % 2 == 0 ? rdAmount : write)) <= p(j, size, rdAmount)
    assert forall j:Int :: (j < 0 || j >= size ? none : (j % 2 == 0 ? rdAmount : write)) >= p(j, size, rdAmount)
    assert forall j:Int :: acc(loc(arr,j).val, (j < 0 || j >= size ? none : write)) // should fail, and does 
  }

method testspec_skipping_indices2(arr: Array, size: Int, rdAmount: Perm)
  requires none < rdAmount && rdAmount < write
  requires (forall j: Int :: acc(loc(arr, j).val, p(j, size, rdAmount)))
  {
    //assert forall j:Int :: acc(loc(arr,j).val, (j < 0 || j >= size ? none : write)) // should fail! 
    assert forall j:Int :: acc(loc(arr,j).val, (j < 0 || j >= size ? none : (j % 2 == 0 ? rdAmount : write)))
    assert forall j:Int :: (j < 0 || j >= size ? none : (j % 2 == 0 ? rdAmount : write)) <= p(j, size, rdAmount)
    assert forall j:Int :: (j < 0 || j >= size ? none : (j % 2 == 0 ? rdAmount : write)) >= p(j, size, rdAmount)
    //:: ExpectedOutput(assert.failed:insufficient.permission)
    assert forall j:Int :: acc(loc(arr,j).val, (j < 0 || j >= size ? none : write)) // should fail, and does 
  }

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(_x: Perm, _y: Perm): Perm
    function minus(_x: Perm, _y: Perm): Perm
    function geq(_x: Perm, _y: Perm): Bool
    function joinable(_x: Perm, _y: Perm): Bool

    function times(_x: Perm, _y: Perm): Perm

    //Auxiliary functions
    function share(_x: Rational): Perm
    function valid_share(_x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall _a: Int, _b: Int :: {biConstr(_a, _b)} biConstr(_a, _b) == share(_a/_b)}


    axiom axValid { forall _x: Rational :: {valid_share(_x)}
        valid_share(_x) <==> (_x >= 0/1 && _x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall _a: Rational, _b: Rational :: { share(_a), share(_b) }
        share(_a) == share(_b) ==> _a == _b
    }
    axiom axPlus { forall _a: Rational, _b: Rational :: { plus(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) ==> plus(share(_a), share(_b)) == share(_a + _b)
    }
    axiom axMinus { forall _a: Rational, _b: Rational :: { minus(share(_a), share(_b)) }
        geq(share(_a), share(_b)) ==> minus(share(_a), share(_b)) == share(_a - _b)
    }
    axiom axCanJoin { forall _a: Rational, _b: Rational :: { joinable(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) <==> valid_share(_a) && valid_share(_b) && valid_share(_a + _b)
    }
    axiom axGeq { forall _a: Rational, _b: Rational :: { geq(share(_a), share(_b)) }
        geq(share(_a), share(_b)) <==> valid_share(_a) && valid_share(_b) && valid_share(_a - _b)
    }
    axiom axMul { forall _a: Rational, _b: Rational :: {times(share(_a), share(_b))} times(share(_a), share(_b)) == share(_a * _b)}

    axiom axJoinComm {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == plus(_q, _p)}
    axiom axJoinAssoc {forall _p: Perm, _q: Perm, _r: Perm :: {plus(plus(_p, _q), _r)} plus(plus(_p, _q), _r) == plus(_p, plus(_q, _r))}
    axiom axJoinCancel { forall _p: Perm, _q: Perm, _x: Perm :: {plus(_p, _x), plus(_q, _x)} plus(_p, _x) == plus(_q, _x) ==> _p == _q}

    axiom axUnitGeq { forall _p: Perm :: {geq(_p, unit())} geq(_p, unit())}
    axiom axUnitGeq2 { forall _p: Perm :: {geq(unit(),_p)} geq(unit(),_p) <==> _p == unit()}
    axiom axFullGeq { forall _p: Perm :: {geq(full(),_p)} geq(full(),_p)}
    axiom axFullGeq2 { forall _p: Perm :: {geq(_p, full())} geq(_p, full()) <==> _p == full()}

    axiom axUnitJoin { forall _p: Perm :: {plus(unit(),_p)} plus(unit(),_p) == _p}
    axiom axUnitJoinable { forall _p: Perm :: {joinable(_p, unit())} joinable(_p, unit())}
    axiom axJoinableComm { forall _p: Perm, _q: Perm :: {joinable(_p, _q)} joinable(_p, _q) == joinable(_q,_p)}
    axiom axTimes0 { forall _p: Perm :: {times(unit(),_p)} times(unit(),_p) == unit()}
    axiom axTimes1 { forall _p: Perm :: {times(full(),_p)} times(unit(),_p) == _p}

    axiom axGeqPlus { forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(_a, _x)}
    axiom axGeqMinus {forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(minus(_a, _y), _x)}
    axiom axMinusUneq { forall _p: Perm, _q: Perm :: {geq(_p, _q)} geq(_p, _q) && _p != _q ==> minus(_p, _q) != unit()}

}
