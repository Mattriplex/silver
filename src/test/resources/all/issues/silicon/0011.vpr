// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field b: Bool
field c: Ref
field d: Ref
field f: Int

method succeeds1(k: Perm, x: Ref) returns (r: Bool)
  requires k > none
  requires acc(x.c, k) && acc(x.d, k) && acc(x.b, k)
  requires x.c != null && x.d != null
  requires x.b <==> x.c == x.d
  requires acc(x.c.f, 1/2) && acc(x.d.f, 1/2)
  ensures acc(x.c,k ) && acc(x.d, k) && acc(x.b, k)
  ensures x.c != null && x.d != null
  ensures x.b ==> acc(x.d.f)
  ensures r == true
{
  if (x.b) {
    assert acc(x.c.f)
  }

  r := x.b ? x.c == x.d : true
}

method succeeds2(k: Perm, x: Ref) returns (r: Bool)
  requires k > none
  requires acc(x.c, k) && acc(x.d, k) && acc(x.b, k)
  requires x.c != null && x.d != null
  requires x.b <==> x.c == x.d
  requires acc(x.c.f, k) && acc(x.d.f)
  ensures acc(x.c, k) && acc(x.d, k) && acc(x.b, k)
  ensures x.c != null && x.d != null
  ensures acc(x.c.f, k) && acc(x.d.f)
  ensures x.b ==> x.c.f == x.d.f
{}

method fails0(k: Perm, b1: Bool, x: Ref)
  requires acc(x.f, 1/2) && acc(x.f, 1/2)
  ensures acc(x.f)
  //:: ExpectedOutput(postcondition.violated:insufficient.permission)
  ensures acc(x.f)
{}

method fails1(k: Perm, x: Ref) returns (r: Bool)
  requires k > none
  requires acc(x.c, k) && acc(x.d, k) && acc(x.b, k)
  requires x.c != null && x.d != null
  requires x.b <==> x.c == x.d
  requires acc(x.c.f, 1/2) && acc(x.d.f, 1/2)
  ensures acc(x.c, k) && acc(x.d, k) && acc(x.b, k)
  ensures x.c != null && x.d != null
  ensures x.b ==> acc(x.d.f)
  //:: ExpectedOutput(postcondition.violated:insufficient.permission)
  ensures x.b ==> acc(x.c.f)
  ensures r == true
{
  if (x.b) {
    assert acc(x.c.f)
  }

  r := x.b ? x.c == x.d : true
}

method fails2(k: Perm, x: Ref) returns (r: Bool)
  requires k > none
  requires acc(x.c, k) && acc(x.d, k) && acc(x.b, k)
  requires x.c != null && x.d != null
  requires acc(x.c.f, k) && acc(x.d.f)
  ensures acc(x.c, k) && acc(x.d, k) && acc(x.b, k)
  ensures x.c != null && x.d != null
  ensures acc(x.c.f, k) && acc(x.d.f)
  //:: ExpectedOutput(postcondition.violated:assertion.false)
  ensures x.b <==> x.c.f == x.d.f
    /* c.x and d.x might be equal although c != d and hence !b */
{}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axUnitJoinable { forall p: Perm :: {joinable(p, unit())} joinable(p, unit())}
    axiom axJoinableComm { forall p: Perm, q: Perm :: {joinable(p, q)} joinable(p, q) == joinable(q, p)}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}

    axiom axGeqPlus { forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(a, x)}
    axiom axGeqMinus {forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) <==> geq(minus(a, y), x)}

}
