// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

function silver_length(this: Ref): Int
    requires acc(valid__List(this), wildcard)
    ensures result >= 0
{
    (unfolding acc(valid__List(this), wildcard) in
        (variantOfList(this.List__variant) == fn$$List__Nil()) ? 0: 1 + silver_length(this.List__Node__1))
}


method length_iter(list$1: Ref, rd$1: Perm) returns (res$1: Int)
  requires none < rd$1 && rd$1 < write
  requires acc(valid__List(list$1), rd$1)
  //:: ExpectedOutput(postcondition.violated:insufficient.permission)
  ensures acc(valid__List(list$1), rd$1)
{
    var current$1: Ref
    current$1 := list$1

    var counter$1: Int
    counter$1 := 0

    while (true)
        invariant acc(valid__List(current$1), rd$1)
    {
      unfold acc(valid__List(current$1), rd$1)
      var tail$1: Ref
      tail$1 := current$1.List__Node__1
      if (true && variantOfList(current$1.List__variant) == fn$$List__Node()) {
          counter$1 := counter$1 + 1

          current$1 := tail$1
          assert perm(valid__List(current$1)) > none

        } else {
            fold acc(valid__List(current$1), rd$1)
            goto loop_end
        }

    }
    label loop_end

    res$1 := counter$1
  // Emitting folds for outstanding predicates
}

// Emitting data type definitions


// Emitting silver definition for List
domain List {
    unique function fn$$List__Node(): List
    unique function fn$$List__Nil(): List

    function variantOfList(self: Ref): List

    function isList(self: Ref): Bool

    axiom ax_variantOfList {
        forall x: Ref ::
                variantOfList(x) == fn$$List__Node()||
    variantOfList(x) == fn$$List__Nil()
    }

    axiom ax_isList {
        forall x: Ref ::
            isList(x) == (    variantOfList(x) == fn$$List__Node()||
    variantOfList(x) == fn$$List__Nil())
    }
}

field List__variant: Ref
field List__Node__0: Int
field List__Node__1: Ref


predicate valid__List(this: Ref) {
  acc(this.List__variant) &&
  isList(this.List__variant) &&
  (variantOfList(this.List__variant) == fn$$List__Node() ==> (
    acc(this.List__Node__0)&&
    acc(this.List__Node__1)&&
    acc(valid__List(this.List__Node__1))
  )) &&
  (variantOfList(this.List__variant) == fn$$List__Nil() ==> (
    acc(this.List__Node__0)&&
    acc(this.List__Node__1)
  ))
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(_x: Perm, _y: Perm): Perm
    function minus(_x: Perm, _y: Perm): Perm
    function geq(_x: Perm, _y: Perm): Bool
    function joinable(_x: Perm, _y: Perm): Bool

    function times(_x: Perm, _y: Perm): Perm

    //Auxiliary functions
    function share(_x: Rational): Perm
    function valid_share(_x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall _a: Int, _b: Int :: {biConstr(_a, _b)} biConstr(_a, _b) == share(_a/_b)}


    axiom axValid { forall _x: Rational :: {valid_share(_x)}
        valid_share(_x) <==> (_x >= 0/1 && _x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall _a: Rational, _b: Rational :: { share(_a), share(_b) }
        share(_a) == share(_b) ==> _a == _b
    }
    axiom axPlus { forall _a: Rational, _b: Rational :: { plus(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) ==> plus(share(_a), share(_b)) == share(_a + _b)
    }
    axiom axMinus { forall _a: Rational, _b: Rational :: { minus(share(_a), share(_b)) }
        geq(share(_a), share(_b)) ==> minus(share(_a), share(_b)) == share(_a - _b)
    }
    axiom axCanJoin { forall _a: Rational, _b: Rational :: { joinable(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) <==> valid_share(_a) && valid_share(_b) && valid_share(_a + _b)
    }
    axiom axGeq { forall _a: Rational, _b: Rational :: { geq(share(_a), share(_b)) }
        geq(share(_a), share(_b)) <==> valid_share(_a) && valid_share(_b) && valid_share(_a - _b)
    }
    axiom axMul { forall _a: Rational, _b: Rational :: {times(share(_a), share(_b))} times(share(_a), share(_b)) == share(_a * _b)}

    axiom axJoinComm {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == plus(_q, _p)}
    axiom axJoinAssoc {forall _p: Perm, _q: Perm, _r: Perm :: {plus(plus(_p, _q), _r)} plus(plus(_p, _q), _r) == plus(_p, plus(_q, _r))}
    axiom axJoinCancel { forall _p: Perm, _q: Perm, _x: Perm :: {plus(_p, _x), plus(_q, _x)} plus(_p, _x) == plus(_q, _x) ==> _p == _q}

    axiom axUnitGeq { forall _p: Perm :: {geq(_p, unit())} geq(_p, unit())}
    axiom axUnitGeq2 { forall _p: Perm :: {geq(unit(),_p)} geq(unit(),_p) <==> _p == unit()}
    axiom axFullGeq { forall _p: Perm :: {geq(full(),_p)} geq(full(),_p)}
    axiom axFullGeq2 { forall _p: Perm :: {geq(_p, full())} geq(_p, full()) <==> _p == full()}
    axiom axGeqId { forall _p: Perm :: {geq(_p, _p)} geq(_p, _p)}
    axiom axMinusId { forall _p: Perm :: {minus(_p, _p)} minus(_p, _p) == unit()}


    axiom axUnitJoin { forall _p: Perm :: {plus(unit(),_p)} plus(unit(),_p) == _p}
    axiom axUnitJoinable { forall _p: Perm :: {joinable(_p, unit())} joinable(_p, unit())}
    axiom axJoinableComm { forall _p: Perm, _q: Perm :: {joinable(_p, _q)} joinable(_p, _q) == joinable(_q,_p)}
    axiom axTimes0 { forall _p: Perm :: {times(unit(),_p)} times(unit(),_p) == unit()}
    axiom axTimes1 { forall _p: Perm :: {times(full(),_p)} times(full(),_p) == _p}

    axiom axGeqPlus { forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(_a, _x)}
    axiom axGeqMinus {forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(minus(_a, _y), _x)}
    axiom axMinusUneq { forall _p: Perm, _q: Perm :: {geq(_p, _q)} geq(_p, _q) && _p != _q ==> minus(_p, _q) != unit()}

    axiom axPositive {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == unit() ==> _p == unit() && _q == unit()}
    axiom axPlusGeq {forall _p: Perm, _q: Perm :: {geq(plus(_p, _q), _p)} joinable(_p, _q) ==> geq(plus(_p, _q), _p)}
    axiom axMinusCancel {forall _p: Perm, _q: Perm :: {minus(plus(_p, _q), _q)} minus(plus(_p, _q), _q) == _p}

}
