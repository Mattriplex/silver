// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

function silver_length(this: Ref): Int
    requires acc(valid__List(this), wildcard)
    ensures result >= 0
{
    (unfolding acc(valid__List(this), wildcard) in
        (variantOfList(this.List__variant) == fn$$List__Nil()) ? 0: 1 + silver_length(this.List__Node__1))
}


method length_iter(list$1: Ref, rd$1: Perm) returns (res$1: Int)
  requires none < rd$1 && rd$1 < write
  requires acc(valid__List(list$1), rd$1)
  //:: ExpectedOutput(postcondition.violated:insufficient.permission)
  ensures acc(valid__List(list$1), rd$1)
{
    var current$1: Ref
    current$1 := list$1

    var counter$1: Int
    counter$1 := 0

    while (true)
        invariant acc(valid__List(current$1), rd$1)
    {
      unfold acc(valid__List(current$1), rd$1)
      var tail$1: Ref
      tail$1 := current$1.List__Node__1
      if (true && variantOfList(current$1.List__variant) == fn$$List__Node()) {
          counter$1 := counter$1 + 1

          current$1 := tail$1
          assert perm(valid__List(current$1)) > none

        } else {
            fold acc(valid__List(current$1), rd$1)
            goto loop_end
        }

    }
    label loop_end

    res$1 := counter$1
  // Emitting folds for outstanding predicates
}

// Emitting data type definitions


// Emitting silver definition for List
domain List {
    unique function fn$$List__Node(): List
    unique function fn$$List__Nil(): List

    function variantOfList(self: Ref): List

    function isList(self: Ref): Bool

    axiom ax_variantOfList {
        forall x: Ref ::
                variantOfList(x) == fn$$List__Node()||
    variantOfList(x) == fn$$List__Nil()
    }

    axiom ax_isList {
        forall x: Ref ::
            isList(x) == (    variantOfList(x) == fn$$List__Node()||
    variantOfList(x) == fn$$List__Nil())
    }
}

field List__variant: Ref
field List__Node__0: Int
field List__Node__1: Ref


predicate valid__List(this: Ref) {
  acc(this.List__variant) &&
  isList(this.List__variant) &&
  (variantOfList(this.List__variant) == fn$$List__Node() ==> (
    acc(this.List__Node__0)&&
    acc(this.List__Node__1)&&
    acc(valid__List(this.List__Node__1))
  )) &&
  (variantOfList(this.List__variant) == fn$$List__Nil() ==> (
    acc(this.List__Node__0)&&
    acc(this.List__Node__1)
  ))
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axUnitJoinable { forall p: Perm :: {joinable(p, unit())} joinable(p, unit())}
    axiom axJoinableComm { forall p: Perm, q: Perm :: {joinable(p, q)} joinable(p, q) == joinable(q, p)}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}

    axiom axGeqPlus { forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(a, x)}
    axiom axGeqMinus {forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(minus(a, y), x)}
    axiom axMinusUneq { forall p: Perm, q: Perm :: {geq(p, q)} geq(p, q) && p != q ==> minus(p, q) != unit()}

}
