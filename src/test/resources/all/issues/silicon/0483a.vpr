domain VCTArray[CT] {

  function loc(a: VCTArray[CT], i: Int): CT

  function alen(a: VCTArray[CT]): Int

  axiom len_nonneg {
    (forall a: VCTArray[CT] :: { alen(a) } alen(a) >= 0)
  }
}

field Integer__item: Int

// check that all elements in given Seq are bounded by maxLen
function CheckBounded(order: Seq[Int], maxLen: Int): Bool
ensures |order| <= maxLen && (forall i: Int :: 0 <= i && i < |order| ==> 0 <= order[i] && order[i] < maxLen)


// check that newL is a reordered version of origL with given order newO, i.e. newL[i] == origL[order[i]]
function IsReordered(origL: VCTArray[Ref], newO: Seq[Int], newL: VCTArray[Ref], maxLen: Int): Bool
  requires (forall i: Int :: 0 <= i && i < alen(origL) ==> acc(loc(origL, i).Integer__item, 1 / 2))
  requires origL != newL ==> (forall i: Int :: 0 <= i && i < alen(newL) ==> acc(loc(newL, i).Integer__item, 1 / 2))
  ensures result == (maxLen <= alen(origL) && maxLen <= alen(newL) && CheckBounded(newO, maxLen) && (forall i: Int :: 0 <= i && i < |newO| ==> loc(newL, i).Integer__item == loc(origL, newO[i]).Integer__item))
{
    (maxLen <= alen(origL) && maxLen <= alen(newL) && CheckBounded(newO, maxLen) && (forall i: Int :: 0 <= i && i < |newO| ==> loc(newL, i).Integer__item == loc(origL, newO[i]).Integer__item))
}

// Lemma proving that a reordering is a permutation if given order has no gaps
method PermutationLemma(origL: VCTArray[Ref], order: Seq[Int], newL: VCTArray[Ref]) returns (sys__result: Bool)
  requires (forall i: Int :: 0 <= i && i < alen(origL) ==> acc(loc(origL, i).Integer__item, 2 / 3))
  requires origL != newL ==> (forall i: Int :: 0 <= i && i < alen(newL) ==> acc(loc(newL, i).Integer__item, 2 / 3))
{
  var rep__1: Bool
  rep__1 := IsReordered(origL, order, newL, |order|)

          assert (rep__1 ==> (forall i__2: Int :: 0 <= i__2 && i__2 < |order| ==> loc(newL, i__2).Integer__item == loc(origL, order[i__2]).Integer__item))
  sys__result := (rep__1 ==> (forall i__2: Int :: 0 <= i__2 && i__2 < |order| ==> loc(newL, i__2).Integer__item == loc(origL, order[i__2]).Integer__item))
          assert (rep__1 ==> (forall i__2: Int :: 0 <= i__2 && i__2 < |order| ==> loc(newL, i__2).Integer__item == loc(origL, order[i__2]).Integer__item))
  assert sys__result
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}
}
