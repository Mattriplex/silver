// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/
   //:: IgnoreFile(/carbon/issue/999/)

field root : Ref

	predicate headvalid(this:Ref){
		   acc(this.root,write)
		&& (this.root!=null ==> acc(valid(this.root)))
		&& (this.root!=null ==> acc(this.root.height       ,1/2))
		&& (this.root!=null ==> acc(this.root.balanceFactor,1/2))
	}

	method headinit(this:Ref)
		requires acc(this.root,write);
		ensures acc(headvalid(this));
	{
		this.root := null;
		fold acc(headvalid(this));
	}


	method headhas(this:Ref, k : Int) returns (b : Bool)
		requires acc(headvalid(this));
		ensures acc(headvalid(this));
	{
	 var bb : Bool;
		unfold acc(headvalid(this));
		if (this.root==null){
			b := false;
		}else{
			bb:= has(this.root,k);
			b := bb;
		}
		fold acc(headvalid(this));
	}


// new class

	field key    : Int
	field height : Int
	field left  : Ref
	field right : Ref
        field balanceFactor : Int

	predicate valid(this:Ref){
		   acc(this.key   ,write)
		&& acc(this.height,1/2)
		&& acc(this.left  ,write)
		&& acc(this.right ,write)
		&& acc(this.balanceFactor,1/2)
		&& (this.left!=null ==> acc(valid(this.left)))
		&& (this.left!=null ==> acc(this.left.height       ,1/2))
		&& (this.left!=null ==> acc(this.left.balanceFactor,1/2))
		&& (this.left!=null ==> this.left.height > 0)
		&& (this.right!=null ==> acc(valid(this.right)))
		&& (this.right!=null ==> acc(this.right.height       ,1/2))
		&& (this.right!=null ==> acc(this.right.balanceFactor,1/2))
		&& (this.right!=null ==> this.right.height > 0)
		&& this.height == ( (this.left==null?0:(this.left.height))>(this.right==null?0:(this.right.height)) ? (this.left==null?0:(this.left.height))+1 : (this.right==null?0:(this.right.height))+1 )
		&& this.balanceFactor == ((this.left==null?0:(this.left.height)) - (this.right==null?0:(this.right.height)))
		&& this.balanceFactor<= 1
		&& this.balanceFactor>=-1
		&& this.height > 0
	}

	method init(this:Ref, k : Int)
		requires acc(this.key   ,write);
		requires acc(this.height,write);
		requires acc(this.left  ,write);
		requires acc(this.right ,write);
		requires acc(this.balanceFactor,write)
		ensures acc(valid(this));
		ensures acc(this.height,1/2);
		ensures acc(this.balanceFactor,1/2);
		ensures this.height == 1;
		ensures this.balanceFactor == 0;
	{
		this.left   := null;
		this.right  := null;
		this.key    := k;
		close(this);
	}








	method has(this:Ref, k : Int) returns (b : Bool)
		requires acc(valid(this));
		ensures acc(valid(this));
	{
		unfold acc(valid(this));
		if (k==(this.key)){
			b := true;
		}else{ //k!=this.key
			if (k < (this.key)){
				if (this.left!=null){
					b := has(this.left,k);
				}else{
					b := false;
				}
			}else{ //k > this.key;
				if (this.right!=null){
					b := has(this.right,k);
				}else{
					b := false;
				}
			}
		}
		fold acc(valid(this));
	}

	method getBalanceFactor(this:Ref, rd:Perm) returns ( bf : Int )
	  requires rd > none
		requires acc(valid(this));
		requires acc(this.balanceFactor,rd);

		ensures acc(valid(this));
		ensures acc(this.balanceFactor,rd);
		ensures bf == (this.balanceFactor);

		ensures unfolding acc(valid(this)) in bf>0 ==> this.left !=null;
		ensures unfolding acc(valid(this)) in bf<0 ==> this.right!=null;
	{
		unfold acc(valid(this));
		var lh : Int := (this.left ==null ? 0 : this.left .height );
		var rh : Int := (this.right==null ? 0 : this.right.height );
		bf := lh-rh;

		fold acc(valid(this));
	}

	//////////////////////////////////////////////////////////
	method getBalanceFactorI(this:Ref, rd:Perm) returns ( bf : Int )
	  requires rd > none
		requires acc(this.left,rd);
		requires this.left!=null ==> acc(valid(this.left));
		requires this.left!=null ==> acc(this.left.height,rd);
		requires acc(this.right,rd);
		requires this.right!=null ==> acc(valid(this.right));
		requires this.right!=null ==> acc(this.right.height,rd);
		ensures acc(this.left,rd);
		ensures this.left!=null ==> acc(valid(this.left));
		ensures this.left!=null ==> acc(this.left.height,rd);
		ensures acc(this.right,rd);
		ensures this.right!=null ==> acc(valid(this.right));
		ensures this.right!=null ==> acc(this.right.height,rd);
		ensures bf == ((this.left==null?0:this.left.height)-(this.right==null?0:this.right.height));
		ensures bf>0 ==> this.left !=null; /* POST1 */
	{
		var lh : Int := (this.left ==null ? 0 : this.left .height );
		var rh : Int := (this.right==null ? 0 : this.right.height );
		bf := lh-rh;

    /* The following assertions enables proving POST1: from the unfolded
     * body, the verifier learns that this.right.height > 0.
     */
		assert this.right != null ==> unfolding acc(valid(this.right)) in true;
	}

	method close(this:Ref)
		requires acc(this.key   ,write);
		requires acc(this.height,write);
		requires acc(this.left  ,write);
		requires acc(this.right ,write);
		requires acc(this.balanceFactor,write);
		requires this.left!=null ==> acc(valid(this.left));
		requires this.left!=null ==> acc(this.left.height       ,1/2);
		requires this.left!=null ==> acc(this.left.balanceFactor,1/2);
		requires this.right!=null ==> acc(valid(this.right));
		requires this.right!=null ==> acc(this.right.height       ,1/2);
		requires this.right!=null ==> acc(this.right.balanceFactor,1/2);
		requires ( this.left==null ? 0 : this.left.height )-( this.right==null ? 0 : this.right.height ) <= 1;
		requires ( this.left==null ? 0 : this.left.height )-( this.right==null ? 0 : this.right.height ) >=-1;
		ensures acc(valid(this));
		ensures acc(this.height       ,1/2);
		ensures acc(this.balanceFactor,1/2);
		ensures this.height ==
			( ( old(this.left)==null ? 0 : old(this.left.height) )>( old(this.right)==null ? 0 : old(this.right.height) )
				?
					( old(this.left)==null ? 0 : old(this.left.height) )+1
				:
					( old(this.right)==null ? 0 : old(this.right.height))+1
			);
		ensures this.balanceFactor ==
			(( old(this.left)==null ? 0 : old(this.left.height) )-( old(this.right)==null ? 0 : old(this.right.height) ));
	{
		var lh : Int := (this.left ==null ? 0 : this.left .height );
		var rh : Int := (this.right==null ? 0 : this.right.height );

		this.height := ( (( this.left==null ? 0 : this.left.height )>( this.right==null ? 0 : this.right.height )) ? ( this.left==null ? 0 : this.left.height )+1 : ( this.right==null ? 0 : this.right.height )+1);
		this.balanceFactor := ( this.left==null ? 0 : this.left.height )-( this.right==null ? 0 : this.right.height );

    /* The following two asserts enable subsequently folding valid(this): from the unfolded
     * bodies the verifier learns that this.left.height > 0 (and analogous for this.right).
     */
		assert this.left != null ==> unfolding acc(valid(this.left))  in true;
		assert this.right!= null ==> unfolding acc(valid(this.right)) in true;

		fold acc(valid(this));
	}


	method rebalanceRL(this:Ref) returns ( r : Ref )
		requires acc(this.key   ,write);
		requires acc(this.height,write);
		requires acc(this.left  ,write);
		requires acc(this.right ,write);
		requires acc(this.balanceFactor,write);
		requires this.left!=null;
		requires acc(valid(this.left));
		requires acc(this.left.height       ,1/2);
		requires acc(this.left.balanceFactor,1/2);
		requires this.right!=null ==> acc(valid(this.right));
		requires this.right!=null ==> acc(this.right.height       ,1/2)
		requires this.right!=null ==> acc(this.right.balanceFactor,1/2)
		requires this.left.height-(this.right==null?0:this.right.height)==2;
		requires this.left.balanceFactor==-1;
		ensures r != null && acc(valid(r));
		ensures acc(r.height       ,1/2);
		ensures acc(r.balanceFactor,1/2);
		ensures r.height == old(this.left.height);
	{
		unfold acc(valid(this.left));
		r := this.left.right;
		unfold acc(valid(r));

		this.left.right := r.left;
		close(this.left);
		r.left     := this.left;
		this.left       := r.right;

		close(this);
		r.right    := this;
		close(r);
	}

	method rebalanceRR(this:Ref) returns ( r : Ref )
		requires acc(this.key   ,write);
		requires acc(this.height,write);
		requires acc(this.left  ,write);
		requires acc(this.right ,write);
		requires acc(this.balanceFactor,write);
		requires this.left!=null;
		requires acc(valid(this.left));
		requires acc(this.left.height       ,1/2);
		requires acc(this.left.balanceFactor,1/2);
		requires this.right!=null ==> acc(valid(this.right));
		requires this.right!=null ==> acc(this.right.height       ,1/2)
		requires this.right!=null ==> acc(this.right.balanceFactor,1/2)
		requires this.left.height - (this.right==null?0:this.right.height)==2;
		requires this.left.balanceFactor>=0;
		ensures r != null && acc(valid(r));
		ensures acc(r.height       ,1/2);
		ensures acc(r.balanceFactor,1/2);
		ensures r.height == old(this.left.height) || r.height == (old(this.left.height)+1);
	{
		unfold acc(valid(this.left));
		r       := this.left;
		this.left    := r.right;
		close(this);
		r.right := this;
		close(r);
	}


	method rebalanceLR(this:Ref) returns ( r : Ref )
		requires acc(this.key   ,write);
		requires acc(this.height,write);
		requires acc(this.left  ,write);
		requires acc(this.right ,write);
		requires acc(this.balanceFactor,write);
		requires this.left!=null==>acc(valid(this.left));
		requires this.left!=null==>acc(this.left.height       ,1/2);
		requires this.left!=null==>acc(this.left.balanceFactor,1/2);
		requires this.right!=null;
		requires acc(valid(this.right));
		requires acc(this.right.height       ,1/2);
		requires acc(this.right.balanceFactor,1/2);
		requires (this.left==null?0:this.left.height)-(this.right.height)==-2;
		requires this.right.balanceFactor==1;
		ensures r != null && acc(valid(r));
		ensures acc(r.height       ,1/2);
		ensures acc(r.balanceFactor,1/2);
		ensures r.height == old(this.right.height);
	{
		unfold acc(valid(this.right));
		r := this.right.left;
		unfold acc(valid(r));
		this.right.left := r.right;
		close(this.right);
		r.right    := this.right;
		this.right      := r.left;
		close(this);
		r.left     := this;
		close(r);
	}

	method rebalanceLL(this:Ref) returns ( r : Ref )
		requires acc(this.key   ,write);
		requires acc(this.height,write);
		requires acc(this.left  ,write);
		requires acc(this.right ,write);
		requires acc(this.balanceFactor,write);
		requires this.left!=null==>acc(valid(this.left));
		requires this.left!=null==>acc(this.left.height       ,1/2);
		requires this.left!=null==>acc(this.left.balanceFactor,1/2);
		requires this.right!=null;
		requires acc(valid(this.right));
		requires acc(this.right.height       ,1/2);
		requires acc(this.right.balanceFactor,1/2);
		requires (this.left==null?0:this.left.height)-(this.right.height)==-2;
		requires this.right.balanceFactor<=0;
		ensures r != null && acc(valid(r));
		ensures acc(r.height       ,1/2);
		ensures acc(r.balanceFactor,1/2);
		ensures r.height == old(this.right.height) || r.height == (old(this.right.height)+1);
	{
		unfold acc(valid(this.right));
		r       := this.right;
		this.right    := r.left;
		close(this);
		r.left := this;
		close(r);
	}


//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(_x: Perm, _y: Perm): Perm
    function minus(_x: Perm, _y: Perm): Perm
    function geq(_x: Perm, _y: Perm): Bool
    function joinable(_x: Perm, _y: Perm): Bool

    function times(_x: Perm, _y: Perm): Perm

    //Auxiliary functions
    function share(_x: Rational): Perm
    function valid_share(_x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall _a: Int, _b: Int :: {biConstr(_a, _b)} biConstr(_a, _b) == share(_a/_b)}


    axiom axValid { forall _x: Rational :: {valid_share(_x)}
        valid_share(_x) <==> (_x >= 0/1 && _x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall _a: Rational, _b: Rational :: { share(_a), share(_b) }
        share(_a) == share(_b) ==> _a == _b
    }
    axiom axPlus { forall _a: Rational, _b: Rational :: { plus(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) ==> plus(share(_a), share(_b)) == share(_a + _b)
    }
    axiom axMinus { forall _a: Rational, _b: Rational :: { minus(share(_a), share(_b)) }
        geq(share(_a), share(_b)) ==> minus(share(_a), share(_b)) == share(_a - _b)
    }
    axiom axCanJoin { forall _a: Rational, _b: Rational :: { joinable(share(_a), share(_b)) }
        valid_share(_a) && valid_share(_b) ==> (joinable(share(_a), share(_b)) == valid_share(_a + _b))
    }
    axiom axGeq { forall _a: Rational, _b: Rational :: { geq(share(_a), share(_b)) }
        valid_share(_a) && valid_share(_b) ==> (geq(share(_a), share(_b)) <==> valid_share(_a - _b))
    }
    axiom axMul { forall _a: Rational, _b: Rational :: {times(share(_a), share(_b))} times(share(_a), share(_b)) == share(_a * _b)}

    axiom axJoinComm {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == plus(_q, _p)}
    axiom axJoinAssoc {forall _p: Perm, _q: Perm, _r: Perm :: {plus(plus(_p, _q), _r)} plus(plus(_p, _q), _r) == plus(_p, plus(_q, _r))}
    axiom axJoinCancel { forall _p: Perm, _q: Perm, _x: Perm :: {plus(_p, _x), plus(_q, _x)} plus(_p, _x) == plus(_q, _x) ==> _p == _q}

    axiom axUnitGeq { forall _p: Perm :: {geq(_p, unit())} geq(_p, unit())}
    axiom axUnitGeq2 { forall _p: Perm :: {geq(unit(),_p)} geq(unit(),_p) <==> _p == unit()}
    axiom axFullGeq { forall _p: Perm :: {geq(full(),_p)} geq(full(),_p)}
    axiom axFullGeq2 { forall _p: Perm :: {geq(_p, full())} geq(_p, full()) <==> _p == full()}
    axiom axGeqId { forall _p: Perm :: {geq(_p, _p)} geq(_p, _p)}
    axiom axMinusId { forall _p: Perm :: {minus(_p, _p)} minus(_p, _p) == unit()}


    axiom axUnitJoin { forall _p: Perm :: {plus(unit(),_p)} plus(unit(),_p) == _p}
    axiom axUnitJoinable { forall _p: Perm :: {joinable(_p, unit())} joinable(_p, unit())}
    axiom axJoinableComm { forall _p: Perm, _q: Perm :: {joinable(_p, _q)} joinable(_p, _q) == joinable(_q,_p)}
    axiom axTimes0 { forall _p: Perm :: {times(unit(),_p)} times(unit(),_p) == unit()}
    axiom axTimes1 { forall _p: Perm :: {times(full(),_p)} times(full(),_p) == _p}

    axiom axGeqPlus { forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(_a, _x)}
    axiom axGeqMinus {forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(minus(_a, _y), _x)}
    axiom axMinusUneq { forall _p: Perm, _q: Perm :: {geq(_p, _q)} geq(_p, _q) && _p != _q ==> minus(_p, _q) != unit()}

    axiom axPositive {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == unit() ==> _p == unit() && _q == unit()}
    axiom axPlusGeq {forall _p: Perm, _q: Perm :: {geq(plus(_p, _q), _p)} /*joinable(_p, _q) ==>*/ geq(plus(_p, _q), _p)}
    axiom axMinusCancel {forall _p: Perm, _q: Perm :: {minus(plus(_p, _q), _q)} minus(plus(_p, _q), _q) == _p}

}


domain _Scalar { //Fractional scalars
    function zeroS(): Scalar 
    function oneS(): Scalar
    function plusS(_x: Scalar, _y: Scalar): Scalar
    function minusS(_x: Scalar, _y: Scalar): Scalar
    function geqS(_x: Scalar, _y: Scalar): Bool
    //function joinable(_x: Perm, _y: Perm): Bool //not needed, joinability depends on perms' joinable predicate

    function timesS(_x: Scalar, _y: Scalar): Scalar
    function applyS(_x: Scalar, _y: Perm): Perm
    //Auxiliary functions
//Integer scalars
    function stack(_r: Rational) : Scalar
    axiom axStack0 { stack(0/1) == zeroS()}
    axiom axStack1 { stack(1/1) == oneS() }
    axiom axPlusStack { forall _n: Rational, _m: Rational :: {plusS(stack(_n), stack(_m))} _m >= 0/1 ==> _n >= 0/1 ==> plusS(stack(_n), stack(_m)) == stack(_m + _n)}
    axiom axGeqStack { forall _n: Rational, _m: Rational :: {geqS(stack(_n), stack(_m))} _m >= 0/1 ==> _n >= 0/1 ==> geqS(stack(_n), stack(_m)) <==> _n >= _m}
    axiom axMinusStack { forall _n: Rational, _m: Rational ::{minusS(stack(_n), stack(_m))} _m >= 0/1 ==> _n >= 0/1 ==> geqS(stack(_n), stack(_m)) ==> minusS(stack(_n), stack(_m)) == stack(_n - _m)}
    axiom axStackApply { forall _p: Rational, _n: Rational :: {applyS(stack(_n), share(_p))} valid_share(_n * _p) ==> applyS(stack(_n), share(_p)) == share(_n * _p)}
    axiom axStackTimes { forall _n: Rational, _m: Rational :: {timesS(stack(_n), stack(_m))} _m >= 0/1 ==> _n >= 0/1 ==> timesS(stack(_n), stack(_m)) == stack(_m * _n)}

//PLUS
    axiom axPlusZero{ forall _s: Scalar :: {plusS(zeroS(),_s)} plusS(zeroS(),_s) == _s}
    axiom axPlusComm {forall _s: Scalar, _t: Scalar :: {plusS(_s, _t)} plusS(_s, _t) == plusS(_t, _s)}

//APPLY
//one = identity function, zero = constant unit() function
    axiom applyZero { forall _p: Perm :: {applyS(zeroS(), _p)} applyS(zeroS(), _p) == unit() }
    axiom applyOne { forall _p: Perm :: {applyS(oneS(), _p)} applyS(oneS(), _p) == _p }


//TIMES

    axiom axTimes0S { forall _s: Scalar :: {timesS(zeroS(), _s)} timesS(zeroS(),_s) == zeroS()}
    axiom axTimes1S { forall _s: Scalar :: {timesS(oneS(),_s)} timesS(oneS(),_s) == _s}
    axiom axTimesComm {forall _s: Scalar, _t: Scalar :: {timesS(_s, _t)} timesS(_s, _t) == timesS(_t, _s)}

//GEQ
    axiom axGeqZero { forall _s: Scalar :: {geqS(_s, zeroS())} geqS(_s, zeroS())}
//MINUS
    axiom axMinusZero { forall _s: Scalar :: {geqS(_s, zeroS())} geqS(_s, zeroS())}

    //additional axioms
    axiom axGeqPlusS { forall _a: Scalar, _x: Scalar, _y: Scalar :: {geqS(_a, plusS(_x, _y))} geqS(_a, plusS(_x, _y)) ==> geqS(_a, _x)}
    axiom axgeqSMinusS {forall _a: Scalar, _x: Scalar, _y: Scalar :: {geqS(_a, plusS(_x, _y))} geqS(_a, plusS(_x, _y)) ==> geqS(minusS(_a, _y), _x)}
    axiom axMinusUneqS { forall _p: Scalar, _q: Scalar :: {geqS(_p, _q)} geqS(_p, _q) && _p != _q ==> minusS(_p, _q) != zeroS()}

    axiom axPositiveS {forall _p: Scalar, _q: Scalar :: {plusS(_p, _q)} plusS(_p, _q) == zeroS() ==> _p == zeroS() && _q == zeroS()}
    axiom axPlusgeqS {forall _p: Scalar, _q: Scalar :: {geqS(plusS(_p, _q), _p)}geqS(plusS(_p, _q), _p)}
    axiom axMinusCancelS {forall _p: Scalar, _q: Scalar :: {minusS(plusS(_p, _q), _q)} minusS(plusS(_p, _q), _q) == _p}

}