// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

predicate pred(r: Ref)

function fun(r: Ref, i: Int): Ref { r }

function fun2(r: Ref): Ref { r }

method t4b(xs: Seq[Ref], i: Int)
  requires forall x: Ref :: {fun2(x)} x in xs ==> pred(fun(x, i))
  ensures  forall y: Ref :: {fun(y, i)} y in xs ==> pred(fun2(y))
{}



field f: Ref

function at1(xs: Seq[Ref], i: Int): Ref
  requires 0 <= i && i < |xs|
{ xs[i] }

function at2(i: Int, xs: Seq[Ref]): Ref
  requires 0 <= i && i < |xs|
{ xs[i] }

method test02a(xs: Seq[Ref], k: Int) {
  inhale forall i: Int :: {at1(xs, i)} 0 <= i && i < |xs| ==> acc(at1(xs, i).f)

  /* Suppress "receiver at2(...) might not be invariant" error at the final assertion */
  inhale forall i: Int, j: Int :: 0 <= i && i < j && j < |xs| ==> xs[i] != xs[j]

  //:: ExpectedOutput(assert.failed:insufficient.permission)
  assert forall i: Int :: {at2(i, xs)} 0 <= i && i < |xs| ==> acc(at2(i, xs).f)
}

domain Dummy {
  function D(r1: Ref, r2: Ref): Bool
  axiom def_D { forall r1: Ref, r2: Ref :: D(r1, r2) }
}

method test02b(xs: Seq[Ref], k: Int) {
  inhale forall i: Int :: {at1(xs, i)} 0 <= i && i < |xs| ==> acc(at1(xs, i).f)

  /* Required for proving the final assertion */
  assert forall i: Int :: 0 <= i && i < |xs| ==> at1(xs, i) == at2(i, xs)

  assert forall i: Int :: {at2(i, xs)} 0 <= i && i < |xs| ==> acc(at2(i, xs).f)
}

method test03a(xs: Seq[Ref], k: Int) {
  inhale 0 <= k && k < |xs|
  inhale forall i: Int :: {at2(i, xs)} 0 <= i && i < |xs| ==> acc(at1(xs, i).f)
  //:: ExpectedOutput(assert.failed:assertion.false)
  //:: MissingOutput(assert.failed:assertion.false, /carbon/issue/242/)
  assert at1(xs, k) != null
}

method test03b(xs: Seq[Ref], k: Int) {
  inhale 0 <= k && k < |xs|
  inhale forall i: Int :: {at2(i, xs)} 0 <= i && i < |xs| ==> acc(at1(xs, i).f)
  assert at2(k, xs) != null
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axUnitJoinable { forall p: Perm :: {joinable(p, unit())} joinable(p, unit())}
    axiom axJoinableComm { forall p: Perm, q: Perm :: {joinable(p, q)} joinable(p, q) == joinable(q, p)}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}

    axiom axGeqPlus { forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(a, x)}
    axiom axGeqMinus {forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) <==> geq(minus(a, y), x)}

}
