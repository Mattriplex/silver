// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field Container_value: Ref

method nested_try_finally_fails(out: Ref)
  requires acc(out.Container_value)
{
  var error_0: Ref
  var try_finally_2: Int := 0

  goto try_finally_0

  label handlerMyException
    try_finally_2 := 0
    goto try_finally

  label try_finally
    assert try_finally_2 == 0 // Holds ...
    if (try_finally_2 > 1) {  // ... hence, the then-branch is dead
      var nonDet: Bool
      if (nonDet) {
        goto __end
      }
      exhale false // Holds (since unreachable)
      // In the CFG, there still is an edge from here to try_finally_0
    } elseif (try_finally_2 > 0) {
      goto __end
    } else {
      goto __end
    }

  // Part of a cycle: try_finally_0 -> handlerMyException -> try_finally -> try_finally_0
  label try_finally_0
    // Loop invariant does not provide permissions to access out.Container_value
    //:: ExpectedOutput(assignment.failed:insufficient.permission)
    out.Container_value := null
    goto handlerMyException

  label __end
}

method nested_try_finally_fixed(out: Ref)
  requires acc(out.Container_value)
{
  var error_0: Ref
  var try_finally_2: Int := 0

  goto try_finally_0

  label handlerMyException
    try_finally_2 := 0
    goto try_finally

  label try_finally
    assert try_finally_2 == 0
    if (try_finally_2 > 1) {
      var nonDet: Bool
      if (nonDet) {
        goto __end
      }
      exhale false
      goto __end /* FIX: No cycle in the CFG any more */
    } elseif (try_finally_2 > 0) {
      goto __end
    } else {
      goto __end
    }

  label try_finally_0
    // Not part of a loop, invariant is not needed, field access verifies
    out.Container_value := null
    goto handlerMyException

  label __end
}



field f: Int

method test(x: Ref) returns (b: Bool)
  requires acc(x.f)
{
  b := false

  label pseudo_loop_head
    invariant true

    assert !b
    //:: ExpectedOutput(assert.failed:insufficient.permission)
    assert acc(x.f)

    if (b) {
      // Dead, but yields a cycle in the CFG
      goto pseudo_loop_head
    }
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axUnitJoinable { forall p: Perm :: {joinable(p, unit())} joinable(p, unit())}
    axiom axJoinableComm { forall p: Perm, q: Perm :: {joinable(p, q)} joinable(p, q) == joinable(q, p)}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}

    axiom axGeqPlus { forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(a, x)}
    axiom axGeqMinus {forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) <==> geq(minus(a, y), x)}

}
