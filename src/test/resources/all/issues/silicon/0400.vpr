// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

//:: IgnoreFile(/carbon/issue/293/)

/*
 * First few tests don't include corner-cases
 */

method test_take_01() {
  var a: Seq[Int]
  a := Seq(1, 4, 5, 7, 8)
  assert a[..0] == Seq()
  assert a[..1] == Seq(1)
  assert a[..2] == Seq(1,4)
  assert a[..5] == a
}

method test_take_length_01() {
  var a: Seq[Int]
  a := Seq(1, 4, 5, 7, 8)
  assert |a[..0]| == 0
  assert |a[..1]| == 1
  assert |a[..2]| == 2
  assert |a[..5]| == |a|
}

method test_drop_01() {
  var a: Seq[Int]
  a := Seq(1, 4, 5, 7, 8)
  assert a[0..] == a
  assert a[2..] == Seq(5, 7, 8)
  assert a[4..] == Seq(8)
  assert a[5..] == Seq()
}

method test_drop_length_01() {
  var a: Seq[Int]
  a := Seq(1, 4, 5, 7, 8)
  assert |a[0..]| == |a|
  assert |a[2..]| == 3
  assert |a[4..]| == 1
  assert |a[5..]| == 0
}

method test_take_drop_01() {
  var a: Seq[Int]
  a := Seq(1, 4, 5, 7, 8)
  assert a[0..2] == a[..2][0..]
  assert a[2..4] == a[..4][2..]
  assert a[0..5] == a[..5][0..]
  assert a[1..1] == a[..1][1..]
}

method test_take_drop_length_01() {
  var a: Seq[Int]
  a := Seq(1, 4, 5, 7, 8)
  assert |a[0..2]| == 2
  assert |a[2..4]| == 2
  assert |a[0..5]| == 5
  assert |a[1..1]| == 0
}

/*
 * Corner cases for take
 */

method test_take_02() {
  var a: Seq[Int]
  a := Seq(1, 4, 5, 7, 8)

  assert a[..-1] == Seq()

  var e1: Int; assume e1 < -1
  assert a[..e1] == Seq()

  assert a[..6] == a

  var e2: Int; assume 6 < e2
  assert a[..e2] == a

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}

method test_take_length_02() {
  var a: Seq[Int]
  a := Seq(1, 4, 5, 7, 8)

  assert |a[..-1]| == 0

  var e1: Int; assume e1 < -1
  assert |a[..e1]| == 0

  assert |a[..6]| == 5

  var e2: Int; assume 6 < e2
  assert |a[..e2]| == 5
}

method test_take_index_01() {
  var a: Seq[Int]
  a := Seq(1, 4, 5, 7, 8)

  assert a[..10][3] == 7
}

/*
 * Corner cases for drop
 */

method test_drop_02() {
  var a: Seq[Int]
  a := Seq(1, 4, 5, 7, 8)

  assert a[-1..] == a

  var e1: Int; assume e1 < -1
  assert a[e1..] == a

  assert a[6..] == Seq()

  var e2: Int; assume 6 < e2
  assert a[e2..] == Seq()
}

method test_drop_length_02() {
  var a: Seq[Int]
  a := Seq(1, 4, 5, 7, 8)

  assert |a[-1..]| == 5

  var e1: Int; assume e1 < -1
  assert |a[e1..]| == 5

  assert |a[6..]| == 0

  var e2: Int; assume 6 < e2
  assert |a[e2..]| == 0

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}

method test_drop_index_01() {
  var a: Seq[Int]
  a := Seq(1, 4, 5, 7, 8)

  assert a[0..][3] == 7
  assert a[-1..][3] == 7
}

/*
 * Corner cases for take-drop
 */

method test_take_drop_02() {
  var a: Seq[Int]
  a := Seq(1, 4, 5, 7, 8)

  assert a[2..2] == Seq()
  assert a[3..2] == Seq()

  var e1: Int;
  var e2: Int;
  assume 0 <= e2 && e2 <= e1 && e1 <= |a|

  assert a[e1..e2] == Seq()

  var e3: Int;
  var e4: Int;
  assume e4 <= e3

  assert a[e3..e4] == Seq()
}

method test_take_drop_length_02() {
  var a: Seq[Int]
  a := Seq(1, 4, 5, 7, 8)

  assert |a[2..2]| == 0
  assert |a[3..2]| == 0

  var e1: Int;
  var e2: Int;
  assume 0 <= e2 && e2 <= e1 && e1 <= 5

  assert |a[e1..e2]| == 0

  var e3: Int;
  var e4: Int;
  assume e4 <= e3

  assert |a[e3..e4]| == 0
}

method reported_example() {
  var a: Seq[Int]
  a := Seq(1, 4, 5, 7, 8)
  assert a[-1..1] == a[0..1]
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axUnitJoinable { forall p: Perm :: {joinable(p, unit())} joinable(p, unit())}
    axiom axJoinableComm { forall p: Perm, q: Perm :: {joinable(p, q)} joinable(p, q) == joinable(q, p)}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}

    axiom axGeqPlus { forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(a, x)}
    axiom axGeqMinus {forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(minus(a, y), x)}
    axiom axMinusUneq { forall p: Perm, q: Perm :: {geq(p, q)} geq(p, q) && p != q ==> minus(p, q) != unit()}

}
