// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

//:: IgnoreFile(/carbon/issue/293/)

/*
 * First few tests don't include corner-cases
 */

method test_take_01() {
  var a: Seq[Int]
  a := Seq(1, 4, 5, 7, 8)
  assert a[..0] == Seq()
  assert a[..1] == Seq(1)
  assert a[..2] == Seq(1,4)
  assert a[..5] == a
}

method test_take_length_01() {
  var a: Seq[Int]
  a := Seq(1, 4, 5, 7, 8)
  assert |a[..0]| == 0
  assert |a[..1]| == 1
  assert |a[..2]| == 2
  assert |a[..5]| == |a|
}

method test_drop_01() {
  var a: Seq[Int]
  a := Seq(1, 4, 5, 7, 8)
  assert a[0..] == a
  assert a[2..] == Seq(5, 7, 8)
  assert a[4..] == Seq(8)
  assert a[5..] == Seq()
}

method test_drop_length_01() {
  var a: Seq[Int]
  a := Seq(1, 4, 5, 7, 8)
  assert |a[0..]| == |a|
  assert |a[2..]| == 3
  assert |a[4..]| == 1
  assert |a[5..]| == 0
}

method test_take_drop_01() {
  var a: Seq[Int]
  a := Seq(1, 4, 5, 7, 8)
  assert a[0..2] == a[..2][0..]
  assert a[2..4] == a[..4][2..]
  assert a[0..5] == a[..5][0..]
  assert a[1..1] == a[..1][1..]
}

method test_take_drop_length_01() {
  var a: Seq[Int]
  a := Seq(1, 4, 5, 7, 8)
  assert |a[0..2]| == 2
  assert |a[2..4]| == 2
  assert |a[0..5]| == 5
  assert |a[1..1]| == 0
}

/*
 * Corner cases for take
 */

method test_take_02() {
  var a: Seq[Int]
  a := Seq(1, 4, 5, 7, 8)

  assert a[..-1] == Seq()

  var e1: Int; assume e1 < -1
  assert a[..e1] == Seq()

  assert a[..6] == a

  var e2: Int; assume 6 < e2
  assert a[..e2] == a

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}

method test_take_length_02() {
  var a: Seq[Int]
  a := Seq(1, 4, 5, 7, 8)

  assert |a[..-1]| == 0

  var e1: Int; assume e1 < -1
  assert |a[..e1]| == 0

  assert |a[..6]| == 5

  var e2: Int; assume 6 < e2
  assert |a[..e2]| == 5
}

method test_take_index_01() {
  var a: Seq[Int]
  a := Seq(1, 4, 5, 7, 8)

  assert a[..10][3] == 7
}

/*
 * Corner cases for drop
 */

method test_drop_02() {
  var a: Seq[Int]
  a := Seq(1, 4, 5, 7, 8)

  assert a[-1..] == a

  var e1: Int; assume e1 < -1
  assert a[e1..] == a

  assert a[6..] == Seq()

  var e2: Int; assume 6 < e2
  assert a[e2..] == Seq()
}

method test_drop_length_02() {
  var a: Seq[Int]
  a := Seq(1, 4, 5, 7, 8)

  assert |a[-1..]| == 5

  var e1: Int; assume e1 < -1
  assert |a[e1..]| == 5

  assert |a[6..]| == 0

  var e2: Int; assume 6 < e2
  assert |a[e2..]| == 0

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}

method test_drop_index_01() {
  var a: Seq[Int]
  a := Seq(1, 4, 5, 7, 8)

  assert a[0..][3] == 7
  assert a[-1..][3] == 7
}

/*
 * Corner cases for take-drop
 */

method test_take_drop_02() {
  var a: Seq[Int]
  a := Seq(1, 4, 5, 7, 8)

  assert a[2..2] == Seq()
  assert a[3..2] == Seq()

  var e1: Int;
  var e2: Int;
  assume 0 <= e2 && e2 <= e1 && e1 <= |a|

  assert a[e1..e2] == Seq()

  var e3: Int;
  var e4: Int;
  assume e4 <= e3

  assert a[e3..e4] == Seq()
}

method test_take_drop_length_02() {
  var a: Seq[Int]
  a := Seq(1, 4, 5, 7, 8)

  assert |a[2..2]| == 0
  assert |a[3..2]| == 0

  var e1: Int;
  var e2: Int;
  assume 0 <= e2 && e2 <= e1 && e1 <= 5

  assert |a[e1..e2]| == 0

  var e3: Int;
  var e4: Int;
  assume e4 <= e3

  assert |a[e3..e4]| == 0
}

method reported_example() {
  var a: Seq[Int]
  a := Seq(1, 4, 5, 7, 8)
  assert a[-1..1] == a[0..1]
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(_x: Perm, _y: Perm): Perm
    function minus(_x: Perm, _y: Perm): Perm
    function geq(_x: Perm, _y: Perm): Bool
    function joinable(_x: Perm, _y: Perm): Bool

    function times(_x: Perm, _y: Perm): Perm

    //Auxiliary functions
    function share(_x: Rational): Perm
    function valid_share(_x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall _a: Int, _b: Int :: {biConstr(_a, _b)} biConstr(_a, _b) == share(_a/_b)}


    axiom axValid { forall _x: Rational :: {valid_share(_x)}
        valid_share(_x) <==> (_x >= 0/1 && _x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall _a: Rational, _b: Rational :: { share(_a), share(_b) }
        share(_a) == share(_b) ==> _a == _b
    }
    axiom axPlus { forall _a: Rational, _b: Rational :: { plus(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) ==> plus(share(_a), share(_b)) == share(_a + _b)
    }
    axiom axMinus { forall _a: Rational, _b: Rational :: { minus(share(_a), share(_b)) }
        geq(share(_a), share(_b)) ==> minus(share(_a), share(_b)) == share(_a - _b)
    }
    axiom axCanJoin { forall _a: Rational, _b: Rational :: { joinable(share(_a), share(_b)) }
        valid_share(_a) && valid_share(_b) ==> (joinable(share(_a), share(_b)) == valid_share(_a + _b))
    }
    axiom axGeq { forall _a: Rational, _b: Rational :: { geq(share(_a), share(_b)) }
        valid_share(_a) && valid_share(_b) ==> (geq(share(_a), share(_b)) <==> valid_share(_a - _b))
    }
    axiom axMul { forall _a: Rational, _b: Rational :: {times(share(_a), share(_b))} times(share(_a), share(_b)) == share(_a * _b)}

    axiom axJoinComm {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == plus(_q, _p)}
    axiom axJoinAssoc {forall _p: Perm, _q: Perm, _r: Perm :: {plus(plus(_p, _q), _r)} plus(plus(_p, _q), _r) == plus(_p, plus(_q, _r))}
    axiom axJoinCancel { forall _p: Perm, _q: Perm, _x: Perm :: {plus(_p, _x), plus(_q, _x)} plus(_p, _x) == plus(_q, _x) ==> _p == _q}

    axiom axUnitGeq { forall _p: Perm :: {geq(_p, unit())} geq(_p, unit())}
    axiom axUnitGeq2 { forall _p: Perm :: {geq(unit(),_p)} geq(unit(),_p) <==> _p == unit()}
    axiom axFullGeq { forall _p: Perm :: {geq(full(),_p)} geq(full(),_p)}
    axiom axFullGeq2 { forall _p: Perm :: {geq(_p, full())} geq(_p, full()) <==> _p == full()}
    axiom axGeqId { forall _p: Perm :: {geq(_p, _p)} geq(_p, _p)}
    axiom axMinusId { forall _p: Perm :: {minus(_p, _p)} minus(_p, _p) == unit()}


    axiom axUnitJoin { forall _p: Perm :: {plus(unit(),_p)} plus(unit(),_p) == _p}
    axiom axUnitJoinable { forall _p: Perm :: {joinable(_p, unit())} joinable(_p, unit())}
    axiom axJoinableComm { forall _p: Perm, _q: Perm :: {joinable(_p, _q)} joinable(_p, _q) == joinable(_q,_p)}
    axiom axTimes0 { forall _p: Perm :: {times(unit(),_p)} times(unit(),_p) == unit()}
    axiom axTimes1 { forall _p: Perm :: {times(full(),_p)} times(full(),_p) == _p}

    axiom axGeqPlus { forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(_a, _x)}
    axiom axGeqMinus {forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(minus(_a, _y), _x)}
    axiom axMinusUneq { forall _p: Perm, _q: Perm :: {geq(_p, _q)} geq(_p, _q) && _p != _q ==> minus(_p, _q) != unit()}

    axiom axPositive {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == unit() ==> _p == unit() && _q == unit()}
    axiom axPlusGeq {forall _p: Perm, _q: Perm :: {geq(plus(_p, _q), _p)} /*joinable(_p, _q) ==>*/ geq(plus(_p, _q), _p)}
    axiom axMinusCancel {forall _p: Perm, _q: Perm :: {minus(plus(_p, _q), _q)} minus(plus(_p, _q), _q) == _p}

}
