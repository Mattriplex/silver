// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

// chaliceSuite/general-tests/nestedPredicates.chalice
field Nodenext$: Ref

field Nodevalue$: Int

function NodegetNext$(this: Ref): Ref
  requires this != null
  requires acc(Nodevalid$(this), wildcard)
{
  (unfolding acc(Nodevalid$(this), wildcard) in this.Nodenext$)
}

predicate Nodevalid$(this: Ref) {
  acc(this.Nodenext$, wildcard) && acc(this.Nodevalue$, wildcard) && ((this.Nodenext$ != null) ==> acc(Nodevalid$(this.Nodenext$), write))
}

predicate Nodep$(this: Ref) {
  acc(this.Nodenext$, wildcard) && acc(this.Nodevalue$, wildcard) && ((this.Nodenext$ != null) ==> acc(Nodeq$(this.Nodenext$), write))
}

predicate Nodeq$(this: Ref) {
  acc(this.Nodenext$, wildcard) && acc(this.Nodevalue$, wildcard) && ((this.Nodenext$ != null) ==> acc(Nodep$(this.Nodenext$), write))
}

method NodetestNestingUnfold$(this: Ref)
  requires this != null
  requires acc(Nodevalid$(this), write)
{
  unfold acc(Nodevalid$(this), write)
  //:: UnexpectedOutput(assert.failed:assertion.false, /Silicon/issue/154/)
  assert this != this.Nodenext$
  if (this.Nodenext$ != null) {
    unfold acc(Nodevalid$(this.Nodenext$), write)
    assert this.Nodenext$ != this.Nodenext$.Nodenext$
    assert this != this.Nodenext$.Nodenext$
  }
}

method NodetestNestingFold$(this: Ref)
  requires this != null
  requires acc(this.Nodenext$, wildcard) && acc(this.Nodevalue$, wildcard) && acc(this.Nodenext$.Nodenext$, wildcard) && acc(this.Nodenext$.Nodevalue$, wildcard) && (this.Nodenext$ != null) && (this.Nodenext$.Nodenext$ != null) && acc(Nodevalid$(this.Nodenext$.Nodenext$), write)
{
  fold acc(Nodevalid$(this.Nodenext$), write)
  //:: UnexpectedOutput(assert.failed:assertion.false, /Silicon/issue/154/)
  assert this.Nodenext$ != this.Nodenext$.Nodenext$
  fold acc(Nodevalid$(this), write)
  assert this != this.Nodenext$
  assert this != this.Nodenext$.Nodenext$
}

method NodetestNestingUnfolding$(this: Ref)
  requires this != null
  requires acc(Nodevalid$(this), write)
{
  //:: UnexpectedOutput(assert.failed:assertion.false, /Silicon/issue/154/)
  assert this != (unfolding acc(Nodevalid$(this), write) in this.Nodenext$)
  if ((unfolding acc(Nodevalid$(this), write) in this.Nodenext$) != null) {
    assert (unfolding acc(Nodevalid$(this), write) in this.Nodenext$) != (unfolding acc(Nodevalid$(this), write) in (unfolding acc(Nodevalid$(this.Nodenext$), write) in this.Nodenext$.Nodenext$))
    assert this != (unfolding acc(Nodevalid$(this), write) in (unfolding acc(Nodevalid$(this.Nodenext$), write) in this.Nodenext$.Nodenext$))
  }
}

method NodetestNestingUnfoldTwo$(this: Ref)
  requires this != null
  requires acc(Nodep$(this), write)
{
  unfold acc(Nodep$(this), write)
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert this != this.Nodenext$
  if (this.Nodenext$ != null) {
    unfold acc(Nodeq$(this.Nodenext$), write)
    //:: ExpectedOutput(assert.failed:assertion.false)
    //:: MissingOutput(assert.failed:assertion.false, /Silicon/issue/34/)
    assert this.Nodenext$ != this.Nodenext$.Nodenext$
    assert this != this.Nodenext$.Nodenext$
  }
}

method NodetestNestingFoldTwo$(this: Ref)
  requires this != null
  requires acc(this.Nodenext$, wildcard) && acc(this.Nodevalue$, wildcard) && acc(this.Nodenext$.Nodenext$, wildcard) && acc(this.Nodenext$.Nodevalue$, wildcard) && (this.Nodenext$ != null) && (this.Nodenext$.Nodenext$ != null) && acc(Nodep$(this.Nodenext$.Nodenext$), write)
{
  fold acc(Nodeq$(this.Nodenext$), write)
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert this != this.Nodenext$
  //:: ExpectedOutput(assert.failed:assertion.false)
  //:: MissingOutput(assert.failed:assertion.false, /Silicon/issue/34/)
  assert this.Nodenext$ != this.Nodenext$.Nodenext$
  //:: ExpectedOutput(assert.failed:assertion.false)
  //:: MissingOutput(assert.failed:assertion.false, /Silicon/issue/34/)
  assert this != this.Nodenext$.Nodenext$
}

method NodetestNestingFoldThree$(this: Ref)
  requires this != null
  requires acc(this.Nodenext$, wildcard) && acc(this.Nodevalue$, wildcard) && acc(this.Nodenext$.Nodenext$, wildcard) && acc(this.Nodenext$.Nodevalue$, wildcard) && (this.Nodenext$ != null) && (this.Nodenext$.Nodenext$ != null) && acc(Nodep$(this.Nodenext$.Nodenext$), write)
{
  fold acc(Nodeq$(this.Nodenext$), write)
  fold acc(Nodep$(this), write)
  //:: UnexpectedOutput(assert.failed:assertion.false, /Silicon/issue/154/)
  assert this != this.Nodenext$
  //:: ExpectedOutput(assert.failed:assertion.false)
  //:: MissingOutput(assert.failed:assertion.false, /Silicon/issue/34/)
  assert this.Nodenext$ != this.Nodenext$.Nodenext$
  assert this != this.Nodenext$.Nodenext$
}

method NodetestNestingUnfoldingTwo$(this: Ref)
  requires this != null
  requires acc(Nodep$(this), write)
{
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert this != (unfolding acc(Nodep$(this), write) in this.Nodenext$)
  if ((unfolding acc(Nodep$(this), write) in this.Nodenext$) != null) {
    //:: ExpectedOutput(assert.failed:assertion.false)
    //:: MissingOutput(assert.failed:assertion.false, /Silicon/issue/34/)
    assert (unfolding acc(Nodep$(this), write) in this.Nodenext$) != (unfolding acc(Nodep$(this), write) in (unfolding acc(Nodeq$(this.Nodenext$), write) in this.Nodenext$.Nodenext$))
    assert this != (unfolding acc(Nodep$(this), write) in (unfolding acc(Nodeq$(this.Nodenext$), write) in this.Nodenext$.Nodenext$))
  }
}

method NodetestNestingUnfoldingPrecondition$(this: Ref, x: Ref)
  requires this != null
  requires acc(Nodevalid$(this), write) && (unfolding acc(Nodevalid$(this), write) in this.Nodenext$ == x)
{
  //:: UnexpectedOutput(assert.failed:assertion.false, /Silicon/issue/154/)
  assert this != x
}

method NodetestNestingUnfoldingPostcondition$(this: Ref, x: Ref)
  requires this != null
  requires acc(Nodevalid$(this), write)
  //:: UnexpectedOutput(postcondition.violated:assertion.false, /Silicon/issue/154/)
  ensures acc(Nodevalid$(this), write) && (unfolding acc(Nodevalid$(this), write) in true) && (this != NodegetNext$(this))
{
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axUnitJoinable { forall p: Perm :: {joinable(p, unit())} joinable(p, unit())}
    axiom axJoinableComm { forall p: Perm, q: Perm :: {joinable(p, q)} joinable(p, q) == joinable(q, p)}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}

    axiom axGeqPlus { forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(a, x)}
    axiom axGeqMinus {forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(minus(a, y), x)}
    axiom axMinusUneq { forall p: Perm, q: Perm :: {geq(p, q)} geq(p, q) && p != q ==> minus(p, q) != unit()}

}
