// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

/* Examples of nested branches, which (at some point) were not properly handled
 * by the code responsible for axiomatising functions. The problem was reported
 * by Alex Summers.
 */

field v: Int
field r: Ref
field l: Ref

function fun01(x: Ref, b1: Bool, b2: Bool): Int
  requires acc(x.v, 1/3)
  requires b1 ==> acc(x.v, 1/3)
  requires b2 ==> acc(x.v, 1/3)
{
  x.v
}

method test01(x: Ref, b1: Bool, b2: Bool)
  requires acc(x.v)
{
  x.v := 4
  assert fun01(x, b2, b1) == 4
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}


predicate P01(x: Ref, b: Bool) {
     (b ==> acc(x.v))
  && acc(x.r) && (x.r != null ==> acc(P01(x.r, b)))
}

function fun02(x: Ref, b: Bool): Bool
  requires acc(P01(x, b))
{
  unfolding acc(P01(x, b)) in (x.r == null ? b : fun02(x.r, b))
}

method test02(x: Ref, b: Bool)
  requires acc(P01(x, b))
{
  unfold P01(x, b)
  assume b && x.r == null
  fold P01(x, b)
  assert fun02(x, b)

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert !fun02(x, b)
}

method test03(x: Ref, b: Bool)
  requires acc(P01(x, b))
{
  unfold P01(x, b)
  assume b
  fold P01(x, b)
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert fun02(x, b)
}


predicate Tree(x: Ref) {
     acc(x.v)
  && acc(x.l) && (x.l != null ==> acc(Tree(x.l)))
  && acc(x.r) && (x.r != null ==> acc(Tree(x.r)))
}

function vals(x: Ref): Seq[Int]
  requires acc(Tree(x))
{
  unfolding acc(Tree(x)) in (x.l == null ? Seq[Int]() : vals(x.l)) ++ Seq(x.v) ++ (x.r == null ? Seq[Int]() : vals(x.r))
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}
}
