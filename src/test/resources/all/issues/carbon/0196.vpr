// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

predicate P(r: Ref) {forall e : Ref :: e in refs(r) ==> acc(Q(e), wildcard)}
predicate P2(r: Ref) {forall e : Ref :: e in refs(r) ==> acc(Q(e), 1/2)}
predicate R(r: Ref) {forall e : Ref :: e in refs(r) ==> acc(e.q, wildcard)}
predicate R2(r: Ref) {forall e : Ref :: e in refs(r) ==> acc(e.q, 1/2)}
predicate Q(r: Ref)
field q: Ref

function refs(r: Ref) : Set[Ref]

function get(r: Ref): Ref
    ensures result in refs(r)

function tester(r: Ref): Ref
    requires acc(Q(r), wildcard)

function testerFull(r: Ref): Ref
    requires acc(Q(r), write)

function testerfield(r: Ref): Ref
    requires acc(r.q, wildcard)

function testerfieldFull(r: Ref): Ref
    requires acc(r.q, write)


method pred1(r: Ref)
    requires acc(P(r), wildcard)
{
    unfold acc(P(r), wildcard)
    fold acc(P(r), wildcard)
    unfold acc(P(r), wildcard)
    var r2 : Ref := tester(get(r))
    //:: ExpectedOutput(application.precondition:insufficient.permission)
    var r3 : Ref := testerFull(get(r))
}

method pred2(r: Ref)
    requires acc(P(r), write)
{
    unfold acc(P(r))
    fold acc(P(r))
    unfold acc(P(r))
    var r2 : Ref := tester(get(r))
    //:: ExpectedOutput(application.precondition:insufficient.permission)
    var r3 : Ref := testerFull(get(r))
}

method pred3(r: Ref)
    requires acc(P(r), write)
{
    unfold acc(P(r), 1/2)
    fold acc(P(r), 1/2)
    unfold acc(P(r), 1/2)
    var r2 : Ref := tester(get(r))
    //:: ExpectedOutput(application.precondition:insufficient.permission)
    var r3 : Ref := testerFull(get(r))
}

method pred4(r: Ref)
    requires acc(P2(r), write)
{
    unfold acc(P2(r), wildcard)
    fold acc(P2(r), wildcard)
    unfold acc(P2(r), wildcard)
    var r2 : Ref := tester(get(r))
    //:: ExpectedOutput(application.precondition:insufficient.permission)
    var r3 : Ref := testerFull(get(r))
}

method func1(r: Ref)
    requires acc(R(r), wildcard)
{
    unfold acc(R(r), wildcard)
    fold acc(R(r), wildcard)
    unfold acc(R(r), wildcard)
    var r2 : Ref := testerfield(get(r))
    //:: ExpectedOutput(application.precondition:insufficient.permission)
    var r3 : Ref := testerfieldFull(get(r))
}

method func2(r: Ref)
    requires acc(R(r), write)
{
    unfold acc(R(r))
    fold acc(R(r))
    unfold acc(R(r))
    var r2 : Ref := testerfield(get(r))
    //:: ExpectedOutput(application.precondition:insufficient.permission)
    var r3 : Ref := testerfieldFull(get(r))
}

method func3(r: Ref)
    requires acc(R(r), write)
{
    unfold acc(R(r), 1/2)
    fold acc(R(r), 1/2)
    unfold acc(R(r), 1/2)
    var r2 : Ref := testerfield(get(r))
    //:: ExpectedOutput(application.precondition:insufficient.permission)
    var r3 : Ref := testerfieldFull(get(r))
}

method func4(r: Ref)
    requires acc(R2(r), write)
{
    unfold acc(R2(r), wildcard)
    fold acc(R2(r), wildcard)
    unfold acc(R2(r), wildcard)
    var r2 : Ref := testerfield(get(r))
    //:: ExpectedOutput(application.precondition:insufficient.permission)
    var r3 : Ref := testerfieldFull(get(r))
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axUnitJoinable { forall p: Perm :: {joinable(p, unit())} joinable(p, unit())}
    axiom axJoinableComm { forall p: Perm, q: Perm :: {joinable(p, q)} joinable(p, q) == joinable(q, p)}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}

    axiom axGeqPlus { forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(a, x)}
    axiom axGeqMinus {forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) && joinable(x, y) <==> geq(minus(a, y), x) && geq(a, y)}

}
