// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

//:: IgnoreFile(/silicon/issue/397/)

field next:Ref

define GRAPH(nodes) 
    !(null in nodes)
    && ( forall n:Ref :: {n.next} n in nodes ==> acc(n.next) )
    && ( forall n:Ref :: 
        {n.next in nodes}
        {n in nodes, n.next} 
            n in nodes && n.next != null ==> n.next in nodes )

domain Foobar {
    function foo(S:Set[Int], x:Ref, y:Ref): Bool
}

function hfun(g:Set[Ref]): Set[Int]
    requires GRAPH(g)

method reverse_impl(g:Set[Ref])
    requires GRAPH(g)
    ensures GRAPH(g)
    ensures forall x:Ref, y:Ref :: foo(hfun(g),x,y) == foo(old(hfun(g)),y,x)
    ensures forall x:Ref, y:Ref :: foo(hfun(g),x,y) != foo(old(hfun(g)),x,y)
    ensures hfun(g) != old( hfun(g) )

method reverse(g:Set[Ref]) 
    requires GRAPH(g)
{
    // Call a method which modifies the heap in a known way. 
    reverse_impl(g)

    // Nondeterministically choose a branch and try independently proving the assertions. 
    var b1:Bool
    var b2:Bool
    if ( b1 ) {
        // This property is obtained from the postcondition of reverse_impl.
        //  Carbon cannot prove it (because of an incompleteness bug in old expressions). 
        assert forall x:Ref, y:Ref :: foo(hfun(g),x,y) == foo(old(hfun(g)),y,x)

        // Discard this control-flow path. 
        assume false

    } elseif( b2 ) {
        // This property does not follow from reverse_impl's postcondition. 
        // Carbon can prove it (because of an unsoundness bug in old expressions). 
        //:: ExpectedOutput(assert.failed:assertion.false)
        assert forall x:Ref, y:Ref :: foo(hfun(g),x,y) == foo(old(hfun(g)),x,y)

        // The reason Carbon can prove this is that the following two heap-dependent 
        //  functions are assumed to be the same: 
        //:: ExpectedOutput(assert.failed:assertion.false)
        //:: MissingOutput(assert.failed:assertion.false, /Silicon/issue/34/)
        assert hfun(g) == old( hfun(g) )

        // Even though we explicitly have the opposite from the postcondition of reverse_impl: 
        assert hfun(g) != old( hfun(g) )

        // However, due to the incompleteness from b1, we cannot prove the second postcondition: 
        assert forall x:Ref, y:Ref :: foo(hfun(g),x,y) != foo(old(hfun(g)),x,y)

        // Therefore, in this case the unsoundness does not allow to prove false: 
        assert false

        // Discard this control-flow path. 
        assume false
    }

    // Somke test (supposed to fail). 
   //:: ExpectedOutput(assert.failed:assertion.false)
   //:: MissingOutput(assert.failed:assertion.false, /Silicon/issue/34/)
   assert false
}
//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axUnitJoinable { forall p: Perm :: {joinable(p, unit())} joinable(p, unit())}
    axiom axJoinableComm { forall p: Perm, q: Perm :: {joinable(p, q)} joinable(p, q) == joinable(q, p)}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}

    axiom axGeqPlus { forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(a, x)}
    axiom axGeqMinus {forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) <==> geq(minus(a, y), x)}

}
