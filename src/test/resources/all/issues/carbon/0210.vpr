// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

//:: IgnoreFile(/silicon/issue/397/)

field next:Ref

define GRAPH(nodes) 
    !(null in nodes)
    && ( forall n:Ref :: {n.next} n in nodes ==> acc(n.next) )
    && ( forall n:Ref :: 
        {n.next in nodes}
        {n in nodes, n.next} 
            n in nodes && n.next != null ==> n.next in nodes )

domain Foobar {
    function foo(S:Set[Int], x:Ref, y:Ref): Bool
}

function hfun(g:Set[Ref]): Set[Int]
    requires GRAPH(g)

method reverse_impl(g:Set[Ref])
    requires GRAPH(g)
    ensures GRAPH(g)
    ensures forall x:Ref, y:Ref :: foo(hfun(g),x,y) == foo(old(hfun(g)),y,x)
    ensures forall x:Ref, y:Ref :: foo(hfun(g),x,y) != foo(old(hfun(g)),x,y)
    ensures hfun(g) != old( hfun(g) )

method reverse(g:Set[Ref]) 
    requires GRAPH(g)
{
    // Call a method which modifies the heap in a known way. 
    reverse_impl(g)

    // Nondeterministically choose a branch and try independently proving the assertions. 
    var b1:Bool
    var b2:Bool
    if ( b1 ) {
        // This property is obtained from the postcondition of reverse_impl.
        //  Carbon cannot prove it (because of an incompleteness bug in old expressions). 
        assert forall x:Ref, y:Ref :: foo(hfun(g),x,y) == foo(old(hfun(g)),y,x)

        // Discard this control-flow path. 
        assume false

    } elseif( b2 ) {
        // This property does not follow from reverse_impl's postcondition. 
        // Carbon can prove it (because of an unsoundness bug in old expressions). 
        //:: ExpectedOutput(assert.failed:assertion.false)
        assert forall x:Ref, y:Ref :: foo(hfun(g),x,y) == foo(old(hfun(g)),x,y)

        // The reason Carbon can prove this is that the following two heap-dependent 
        //  functions are assumed to be the same: 
        //:: ExpectedOutput(assert.failed:assertion.false)
        //:: MissingOutput(assert.failed:assertion.false, /Silicon/issue/34/)
        assert hfun(g) == old( hfun(g) )

        // Even though we explicitly have the opposite from the postcondition of reverse_impl: 
        assert hfun(g) != old( hfun(g) )

        // However, due to the incompleteness from b1, we cannot prove the second postcondition: 
        assert forall x:Ref, y:Ref :: foo(hfun(g),x,y) != foo(old(hfun(g)),x,y)

        // Therefore, in this case the unsoundness does not allow to prove false: 
        assert false

        // Discard this control-flow path. 
        assume false
    }

    // Somke test (supposed to fail). 
   //:: ExpectedOutput(assert.failed:assertion.false)
   //:: MissingOutput(assert.failed:assertion.false, /Silicon/issue/34/)
   assert false
}
//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(_x: Perm, _y: Perm): Perm
    function minus(_x: Perm, _y: Perm): Perm
    function geq(_x: Perm, _y: Perm): Bool
    function joinable(_x: Perm, _y: Perm): Bool

    function times(_x: Perm, _y: Perm): Perm

    //Auxiliary functions
    function share(_x: Rational): Perm
    function valid_share(_x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall _a: Int, _b: Int :: {biConstr(_a, _b)} biConstr(_a, _b) == share(_a/_b)}


    axiom axValid { forall _x: Rational :: {valid_share(_x)}
        valid_share(_x) <==> (_x >= 0/1 && _x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall _a: Rational, _b: Rational :: { share(_a), share(_b) }
        share(_a) == share(_b) ==> _a == _b
    }
    axiom axPlus { forall _a: Rational, _b: Rational :: { plus(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) ==> plus(share(_a), share(_b)) == share(_a + _b)
    }
    axiom axMinus { forall _a: Rational, _b: Rational :: { minus(share(_a), share(_b)) }
        geq(share(_a), share(_b)) ==> minus(share(_a), share(_b)) == share(_a - _b)
    }
    axiom axCanJoin { forall _a: Rational, _b: Rational :: { joinable(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) <==> valid_share(_a) && valid_share(_b) && valid_share(_a + _b)
    }
    axiom axGeq { forall _a: Rational, _b: Rational :: { geq(share(_a), share(_b)) }
        geq(share(_a), share(_b)) <==> valid_share(_a) && valid_share(_b) && valid_share(_a - _b)
    }
    axiom axMul { forall _a: Rational, _b: Rational :: {times(share(_a), share(_b))} times(share(_a), share(_b)) == share(_a * _b)}

    axiom axJoinComm {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == plus(_q, _p)}
    axiom axJoinAssoc {forall _p: Perm, _q: Perm, _r: Perm :: {plus(plus(_p, _q), _r)} plus(plus(_p, _q), _r) == plus(_p, plus(_q, _r))}
    axiom axJoinCancel { forall _p: Perm, _q: Perm, _x: Perm :: {plus(_p, _x), plus(_q, _x)} plus(_p, _x) == plus(_q, _x) ==> _p == _q}

    axiom axUnitGeq { forall _p: Perm :: {geq(_p, unit())} geq(_p, unit())}
    axiom axUnitGeq2 { forall _p: Perm :: {geq(unit(),_p)} geq(unit(),_p) <==> _p == unit()}
    axiom axFullGeq { forall _p: Perm :: {geq(full(),_p)} geq(full(),_p)}
    axiom axFullGeq2 { forall _p: Perm :: {geq(_p, full())} geq(_p, full()) <==> _p == full()}

    axiom axUnitJoin { forall _p: Perm :: {plus(unit(),_p)} plus(unit(),_p) == _p}
    axiom axUnitJoinable { forall _p: Perm :: {joinable(_p, unit())} joinable(_p, unit())}
    axiom axJoinableComm { forall _p: Perm, _q: Perm :: {joinable(_p, _q)} joinable(_p, _q) == joinable(_q,_p)}
    axiom axTimes0 { forall _p: Perm :: {times(unit(),_p)} times(unit(),_p) == unit()}
    axiom axTimes1 { forall _p: Perm :: {times(full(),_p)} times(unit(),_p) == _p}

    axiom axGeqPlus { forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(_a, _x)}
    axiom axGeqMinus {forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(minus(_a, _y), _x)}
    axiom axMinusUneq { forall _p: Perm, _q: Perm :: {geq(_p, _q)} geq(_p, _q) && _p != _q ==> minus(_p, _q) != unit()}

}
