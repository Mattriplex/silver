// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

method test1()
{
  var m : Map[Int, Bool] := Map()
  assert |Map()| == 0
  assert |m| == 0
  
  var d : Set[Int] := domain(m)
  assert d == Set()
  
  var r : Set[Bool] := range(m)
  assert |range(m)| == 0
}

method test2()
{
  var m : Map[Int, Bool] := Map()
  m := m[2 := true]
  
  assert m[2]
  assert domain(m) == Set(2)
  assert range(m) == Set(true)
}

method test3()
{
  var m : Map[Int, Int] := Map(2 := 12, 3 := 24, 4 := 36)
  
  assert |m| == 3
  assert m[2] == 12 && m[3] == 24 && m[4] == 36
  assert domain(m) == Set(4, 2, 3)
  assert range(m) == Set(24, 12, 36)
  assert 3 in m
  assert !(1 in m)
}

method test4()
{
  var m1 : Map[Int, Bool] := Map(2 := false, 4 := true, 6 := false)
  var m2 : Map[Int, Bool] := Map(6 := false, 2 := false)
  
  assert !(4 in m2)
  assert m1 != m2
  assert m2[4 := true][4]
  assert m1 == m1[4 := true]
  assert m1 == m2[4 := true]
}

method test5(m : Map[Int, Map[Int, Bool]])
  requires forall i : Int :: { i in m } (0 <= i && i < 4 <==> i in m)
  requires forall i : Int, j : Int :: { j in m[i] } i in m ==> (0 <= j && j < 4 <==> j in m[i])
  requires forall i : Int, j : Int :: { m[i][j] } i in m && j in m ==> (m[i][j] <==> i == j)
{
  assert m[2][2]
  assert !m[1][2]
  assert domain(m) == Set(0, 1, 2, 3)
  assert domain(m[0]) == Set(0, 1, 2, 3)
  assert m[2] == Map(0 := false, 1 := false, 2 := true, 3 := false)
  assert Map(0 := false, 1 := false, 2 := true, 3 := false) in range(m)
}

field val : Int

method test6(m : Map[Int, Ref], x : Int)
  requires forall k : Int :: { k in m } k in m ==> acc(m[k].val)
{
  if (x in m)
  {
    m[x].val := m[x].val + x
  }
}


//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}
}
