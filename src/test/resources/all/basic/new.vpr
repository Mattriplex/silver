// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

// test aliasing information of newly created objects

   //:: IgnoreFile(/carbon/issue/999/)

method t1(this: Ref, a: Int, b: Bool, g: Ref) returns (c: Bool, d: Int)
    requires b && acc(this.value, write)
    ensures (d == 1) || (d == 2)
{
    var e: Int
    var f1: Ref
    var f2: Ref
    this.value := 1
    f1 := new()
    f2 := new()
    if (g != null) {
        exhale g != f1
    }
    exhale this.value <= 42
    exhale f1 != f2
    inhale (a == -11)
    exhale a < 0
    d := 2
    if (b) {
        d := 1
    } else {
        d := 3
    }
}

field value: Int

// test aliasing information of newly created objects
method t2(a: Ref, b: Ref) returns ()
{
    var l1: Ref
    var l2: Ref
    l1 := new()
    l2 := new()
    exhale a != l1
    exhale l1 != l2
    //:: ExpectedOutput(exhale.failed:assertion.false)
    exhale a != b
}

// test aliasing information of parameters 1
method t3(a: Ref, b: Ref) returns ()
{
    if (a == null) {
        if (b != null) {
            exhale a != b
        }
        //:: ExpectedOutput(exhale.failed:assertion.false)
        exhale a != b
    }
}

// test aliasing information of parameters 2
method t4(a: Ref, b: Ref) returns ()
{
    if (a == null) {
        if (b != null) {
            exhale a != b
        }
    }
}

/* test aliasing information between newly created objects and objects that already exist but are
 * "hidden" in predicates.
 */

field Node_v: Int
field Node_n: Ref

predicate Node_P(this: Ref) {
  acc(this.Node_v) && acc(this.Node_n) && 
    (this.Node_n != null ==> acc(Node_P(this.Node_n)))
}

method test5(n: Ref)
  requires n != null && acc(Node_P(n), wildcard)
{
  var m: Ref

  m := new()
  assert m != null
  assert m != n

  unfold acc(Node_P(n), wildcard)
  //:: UnexpectedOutput(assert.failed:assertion.false, /silicon/issue/29/)
  assert m != (n.Node_n)
  
  if (n.Node_n != null) {
    unfold acc(Node_P(n.Node_n), wildcard)
    assert m != (n.Node_n.Node_n)
  }
}

/* Test starred version of 'new' */

method test6() {
  var m: Ref
  m := new(*)

  exhale acc(m.Node_v)
  exhale acc(m.Node_n)
  exhale acc(m.value)
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axUnitJoinable { forall p: Perm :: {joinable(p, unit())} joinable(p, unit())}
    axiom axJoinableComm { forall p: Perm, q: Perm :: {joinable(p, q)} joinable(p, q) == joinable(q, p)}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}

    axiom axGeqPlus { forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(a, x)}
    axiom axGeqMinus {forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(minus(a, y), x)}
    axiom axMinusUneq { forall p: Perm, q: Perm :: {geq(p, q)} geq(p, q) && p != q ==> minus(p, q) != unit()}

}
