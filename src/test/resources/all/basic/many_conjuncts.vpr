// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/
   //:: IgnoreFile(/carbon/issue/999/)

/* Intended to test the overhead of Silicon's failure-driven heuristics, e.g. state consolidations.
 * At some point, the implementation had a bug which made the verification of the failing tests
 * (..._erroneous) horribly slow.
 */


field val : Int
field init: Bool
field rel: Int
field acq: Bool

predicate AcqConjunct(x: Ref, idx: Int)

domain parallelHeaps {
  function heap(x: Ref) : Int
  function is_ghost(x:Ref) : Bool
}

domain reads {
  function rd() : Perm
  axiom rdPositive { rd() > none }
}




method read(data: Ref, count: Ref, ghost: Ref) returns (v: Int)
  requires heap(data) == 0 && (heap(count) == 0 && (heap(ghost) == 0 && (is_ghost(ghost) && (acc(data.val, rd()) && (acc(ghost.val, rd()) && (acc(count.acq, wildcard) && count.acq == false && acc(AcqConjunct(count, 0), wildcard) && (acc(count.rel, wildcard) && count.rel == 0 && acc(count.init, wildcard))))))))
  ensures heap(data) == 0 && (heap(count) == 0 && (heap(ghost) == 0 && (is_ghost(ghost) && (acc(data.val, rd()) && (acc(ghost.val, rd()) && (acc(count.acq, wildcard) && count.acq == false && acc(AcqConjunct(count, 0), wildcard) && (acc(count.rel, wildcard) && count.rel == 0 && acc(count.init, wildcard)))))))) && (data.val == v && [true, perm(data.val) == none])
{
  v := data.val
}

method read_erroneous(data: Ref, count: Ref, ghost: Ref) returns (v: Int)
  requires heap(data) == 0 && (heap(count) == 0 && (heap(ghost) == 0 && (is_ghost(ghost) && (acc(data.val, rd()) && (acc(ghost.val, rd()) && (acc(count.acq, wildcard) && count.acq == false && acc(AcqConjunct(count, 0), wildcard) && (acc(count.rel, wildcard) && count.rel == 0 && acc(count.init, wildcard))))))))
  //:: ExpectedOutput(postcondition.violated:assertion.false)
  ensures heap(data) == 0 && (heap(count) == 0 && (heap(ghost) == 0 && (is_ghost(ghost) && (acc(data.val, rd()) && (acc(ghost.val, rd()) && (acc(count.acq, wildcard) && count.acq == false && acc(AcqConjunct(count, 0), wildcard) && (acc(count.rel, wildcard) && count.rel == 0 && acc(count.init, wildcard)))))))) && (data.val == v && [true, perm(data.val) == none] && false)
{
  v := data.val
}

method read2(data: Ref, count: Ref, ghost: Ref) returns (v: Int)
  requires
    heap(data) == 0 &&
    heap(count) == 0 &&
    heap(ghost) == 0 &&
    is_ghost(ghost) &&
    acc(data.val, rd()) &&
    acc(ghost.val, rd()) &&
    acc(count.acq, wildcard) &&
    count.acq == false &&
    acc(AcqConjunct(count, 0), wildcard) &&
    acc(count.rel, wildcard) &&
    count.rel == 0 &&
    acc(count.init, wildcard)

  ensures
    heap(data) == 0 &&
    heap(count) == 0 &&
    heap(ghost) == 0 &&
    is_ghost(ghost) &&
    acc(data.val, rd()) &&
    acc(ghost.val, rd()) &&
    acc(count.acq, wildcard) &&
    count.acq == false &&
    acc(AcqConjunct(count, 0), wildcard) &&
    acc(count.rel, wildcard) &&
    count.rel == 0 &&
    acc(count.init, wildcard) &&
    data.val == v &&
    [true, perm(data.val) == none]
{
  v := data.val
}

method read2_erroneous(data: Ref, count: Ref, ghost: Ref) returns (v: Int)
  requires
    heap(data) == 0 &&
    heap(count) == 0 &&
    heap(ghost) == 0 &&
    is_ghost(ghost) &&
    acc(data.val, rd()) &&
    acc(ghost.val, rd()) &&
    acc(count.acq, wildcard) &&
    count.acq == false &&
    acc(AcqConjunct(count, 0), wildcard) &&
    acc(count.rel, wildcard) &&
    count.rel == 0 &&
    acc(count.init, wildcard)

  ensures
    //:: ExpectedOutput(postcondition.violated:assertion.false)
    heap(data) == 0 &&
    heap(count) == 0 &&
    heap(ghost) == 0 &&
    is_ghost(ghost) &&
    acc(data.val, rd()) &&
    acc(ghost.val, rd()) &&
    acc(count.acq, wildcard) &&
    count.acq == false &&
    acc(AcqConjunct(count, 0), wildcard) &&
    acc(count.rel, wildcard) &&
    count.rel == 0 &&
    acc(count.init, wildcard) &&
    data.val == v &&
    [true, perm(data.val) == none] &&
    false
{
  v := data.val
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axUnitJoinable { forall p: Perm :: {joinable(p, unit())} joinable(p, unit())}
    axiom axJoinableComm { forall p: Perm, q: Perm :: {joinable(p, q)} joinable(p, q) == joinable(q, p)}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}

    axiom axGeqPlus { forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(a, x)}
    axiom axGeqMinus {forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(minus(a, y), x)}
    axiom axMinusUneq { forall p: Perm, q: Perm :: {geq(p, q)} geq(p, q) && p != q ==> minus(p, q) != unit()}

}
