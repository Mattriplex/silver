// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/


field f: Int

method t1() {
    var n: Int
    //:: ExpectedOutput(call.precondition:assertion.false)
    n := t3(-1)
}

method t2() {
    var n: Int := -10
    n := t3(1)
    assert n > 0
    //:: ExpectedOutput(assert.failed:assertion.false)
    assert false
}

method t3(n: Int) returns (r: Int)
    requires n > 0
    ensures r > 0
{
    r := n
}

// test aliasing of return values with other objects
method t4() {
    var a: Ref
    var b: Ref
    var c: Ref

    a, b := t4b()
    c := new()
    assert a != c
    //:: ExpectedOutput(assert.failed:assertion.false)
    assert a != b
}

method t4c() {
    var a: Ref
    var b: Ref
    var c: Ref

    c := new()
    a, b := t4b()
    //:: ExpectedOutput(assert.failed:assertion.false)
    assert a != c
}

method t4b() returns (a: Ref, b: Ref)
{
}

method t5_a(r: Ref)
     //:: ExpectedOutput(not.wellformed:insufficient.permission)
     requires r.f == 2
 {
 }

 method t5_b(r: Ref)
    requires r != null
     //:: ExpectedOutput(not.wellformed:insufficient.permission)
     requires r.f == 2
 {
 }

method t6_a(r: Ref)
    //:: ExpectedOutput(not.wellformed:insufficient.permission)
    ensures r.f == 2
{
    assume false
}

method t6_b(r: Ref)
    ensures r != null
    //:: ExpectedOutput(not.wellformed:insufficient.permission)
    ensures r.f == 2
{
    assume false
}

method t7(r: Ref)
    requires acc(r.f, write)
{
    r.f := 2
    exhale acc(r.f, wildcard)
    assert (r.f) == 2
}

method t8(r: Ref)
    requires acc(r.f, write)
    ensures acc(r.f, write)
{
    r.f := 2
    exhale acc(r.f, write)
    inhale acc(r.f, write)
    //:: ExpectedOutput(assert.failed:assertion.false)
    assert (r.f) == 2
}

method t9(r: Ref)
    requires acc(r.f, write)
    ensures acc(r.f, write)
{
    r.f := 2
    t8(r)
    //:: ExpectedOutput(assert.failed:assertion.false)
    assert (r.f) == 2
}

method t10(r: Ref, o: Ref)
    requires acc(r.f, write) && acc(o.f, write)
    ensures acc(r.f, write) && acc(o.f, write)
{
    r.f := 2
    o.f := 2
    assert o != r
    t9(o)
    assert (r.f) == 2
    //:: ExpectedOutput(assert.failed:assertion.false)
    assert (o.f) == 2
}

method t11() returns (r: Ref)
{
    var x: Ref
    var y: Ref
    x := t11()
    y := new()
    assert x != y
}

method bodyless() returns (r: Int)
    requires true
    ensures 0 <= r && r < 10

method testBodyless()
{
    var x: Int
    x := bodyless()
    assert 0 <= x && x < 10
}


//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axUnitJoinable { forall p: Perm :: {joinable(p, unit())} joinable(p, unit())}
    axiom axJoinableComm { forall p: Perm, q: Perm :: {joinable(p, q)} joinable(p, q) == joinable(q, p)}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}

    axiom axGeqPlus { forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(a, x)}
    axiom axGeqMinus {forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(minus(a, y), x)}
    axiom axMinusUneq { forall p: Perm, q: Perm :: {geq(p, q)} geq(p, q) && p != q ==> minus(p, q) != unit()}

}
