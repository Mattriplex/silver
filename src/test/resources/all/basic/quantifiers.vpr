// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field Cell_x: Int

function Cell_get(this: Ref): Int
	requires acc(this.Cell_x, write)
{ this.Cell_x }

function reqIGt0(i: Int): Int
	requires i >= 0
{ i }

function f(i: Int, j: Int): Int { i + j }

function g(i: Int): Int { i }

method forallCellGet10(c: Ref) returns (d: Ref)
	requires c != null
	requires acc(c.Cell_x, write)
	requires forall i1: Int :: (0 <= i1 && i1 < Cell_get(c)) ==> (Cell_get(c) > i1)
	ensures acc(c.Cell_x, write)
	ensures forall i2: Int :: (0 <= i2 && i2 < Cell_get(c)) ==> (Cell_get(c) > i2)
	ensures forall i3: Int :: (0 <= i3 && i3 < Cell_get(c)) ==> (Cell_get(c) != i3)
{}

method fail10ForallCellGet10(c: Ref) returns (d: Ref)
	requires c != null
	//:: ExpectedOutput(application.precondition:insufficient.permission)
	requires forall i: Int :: (0 <= i && i < Cell_get(c)) ==> (Cell_get(c) > i)
{}

method fail20ForallCellGet10(c: Ref) returns (d: Ref)
	requires c != null
	requires acc(c.Cell_x, write)
	requires Cell_get(c) > 0
	requires forall i1: Int :: (0 <= i1 && i1 < Cell_get(c)) ==> (Cell_get(c) >= i1)
	ensures c != null
	ensures acc(c.Cell_x, write)
	//:: ExpectedOutput(postcondition.violated:assertion.false)
	ensures forall i2: Int :: (0 <= i2 && i2 < Cell_get(c)) ==> (Cell_get(c) <= i2)
{}

method noQuantifiedPermissionsPre(s: Set[Ref])
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  requires forall r:Ref :: (r in s && r != null ==> r.Cell_x > 0)
  {}

method noQuantifiedPermissionsPost(s: Set[Ref])
  //:: ExpectedOutput(application.precondition:insufficient.permission)
  ensures forall r:Ref :: (r in s && r != null ==> Cell_get(r) >= Cell_get(r))
  {}

method succeedsRange10(a: Int)
	requires a > 1
{
	assert forall i: Int :: (1 <= i) ==> reqIGt0(i) == i
}

method failsRange10(a: Int)
{
  //:: ExpectedOutput(application.precondition:assertion.false)
  //:: UnexpectedOutput(assert.failed:assertion.false, /Carbon/issue/173/)
  assert forall i: Int :: (-1 <= i && i < a) ==> (reqIGt0(i) == i)
}

method succeedsExplicit10(a: Int)
{ assert forall i: Int :: (i in Seq(-2,2,4,6,8)) ==> (reqIGt0(i*i) > i) }

method failsExplicit10(a: Int)
{
  //:: ExpectedOutput(application.precondition:assertion.false)
  //:: UnexpectedOutput(assert.failed:assertion.false, /Carbon/issue/173/)
  assert (forall i: Int :: (i in Seq(-2,2,4,6,8)) ==> (reqIGt0(i) < (i*i)))
}

// method succeedsEmpty10() {
	// assert forall i: Int :: (i in Seq[Int]()) ==> (reqIGt0(i) == i)
	// assert forall i: Int :: (i in Seq[Int]()) ==> (1 == 2)
// }

method succeeds1(a: Int)
	requires a > 0
{
	assert forall i1: Int :: (0 <= i1 && i1 < a) ==> g(i1) >= 0

	assert exists i2: Int :: (i2 in Seq(0)) ==> true

	/* Fail in Chalice and Syxc */
	// assert exists i in [0,1,2,3] :: i > 0
	// assert exists i: int ::
		// (0 <= i && i < a) ==> g(i) >= 0
	// assert exists i: int :: (i in [0..a]) ==> g(i) >= 0
	// assert exists i in [0..a] :: g(i) >= 0
}

method succeeds2(a: Int)
	requires a > 0
{
	assert forall i: Int :: forall j: Int ::
		(0 <= i && i < a && 0 <= j && j < a) ==> f(i, j) >= 0

	/* Fail in Chalice and Syxc */
	// assert exists i, j: int ::
		// (0 <= i && i < a && 0 <= j && j < a) ==> f(i, j) >= 0
	// assert exists i, j: int :: (i in [0..a] && j in [0..a]) ==> f(i, j) >= 0
	// assert exists i, j in [0..a] :: f(i, j) >= 0
}

function f2(i: Int): Bool { true }

function g2(i: Int, j: Int): Bool { true }

method test1(A: Seq[Int]) {
	assume |A| > 10

	assume forall v1: Int ::
		(0 <= v1 && v1 < 3 && f2(v1)) ==> (exists j1: Int :: 0 <= j1 && j1 < 3 && j1 == v1)

  //:: ExpectedOutput(assert.failed:assertion.false)
	assert forall v2: Int ::
		(0 <= v2 && v2 < 3 && f2(v2)) ==> (exists j2: Int :: 0 <= j2 && j2 < 3 && j2 == v2)
    /* 2013-08-05 Malte: Fails, probably due to a triggering problem of Z3.
     *            Should hold otherwise.
     */
}

method test2(A: Seq[Int]) {
	assume |A| > 10

	assume forall v1: Int ::
		(0 <= v1 && v1 < 3 && f2(v1)) ==> (exists j1: Int :: 0 <= j1 && j1 < 3 && g2(j1, v1))

	assert forall v2: Int ::
		(0 <= v2 && v2 < 3 && f2(v2)) ==> (exists j2: Int :: 0 <= j2 && j2 < 3 && g2(j2, v2))
}

method test3(A: Seq[Int]) {
	assume |A| > 10

	assume forall v1: Int ::
		(0 <= v1 && v1 < 3 && f2(v1))	==> (exists j1: Int :: 0 <= j1 && j1 < 3 && A[j1] == v1)

	assert forall v2: Int ::
		(0 <= v2 && v2 < 3 && f2(v2)) ==> (exists j2: Int :: 0 <= j2 && j2 < 3 && A[j2] == v2)
}


method test4(A: Seq[Int]) {
	assume |A| > 10

	assume f2(0) ==> (exists j1: Int :: 0 <= j1 && j1 < 3 && j1 > 0)

	//:: ExpectedOutput(assert.failed:assertion.false)
	assert f2(0) ==> (exists j2: Int :: 0 <= j2 && j2 < 3 && j2 > 0)
    /* 2013-08-05 Malte: Fails, probably due to a triggering problem of Z3.
     *            Should hold otherwise.
     */
}

method test5(A: Seq[Int]) {
	assume |A| > 10

	assume f2(0) ==> (exists j1: Int :: 0 <= j1 && j1 < 3 && f2(j1))
	assert f2(0) ==> (exists j2: Int :: 0 <= j2 && j2 < 3 && f2(j2))
}

method test6(A: Seq[Ref]) {
	assume |A| > 10

	assume exists j1: Int :: 0 <= j1 && j1 < 3 && A[j1] != null
	assert exists j2: Int :: 0 <= j2 && j2 < 3 && A[j2] != null
}

// method test7(A: Seq[Int]) {
	// assume forall j1: Int ::
		// ((0 <= j1) && (j1 < |A|) && f2(j1)) ==> (0 <= A[j1])

	// assert forall j2: Int ::
		// (0 <= j2 && j2 < |A| && f2(j2)) ==> (0 <= A[j2])
// }

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(_x: Perm, _y: Perm): Perm
    function minus(_x: Perm, _y: Perm): Perm
    function geq(_x: Perm, _y: Perm): Bool
    function joinable(_x: Perm, _y: Perm): Bool

    function times(_x: Perm, _y: Perm): Perm

    //Auxiliary functions
    function share(_x: Rational): Perm
    function valid_share(_x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall _a: Int, _b: Int :: {biConstr(_a, _b)} biConstr(_a, _b) == share(_a/_b)}


    axiom axValid { forall _x: Rational :: {valid_share(_x)}
        valid_share(_x) <==> (_x >= 0/1 && _x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall _a: Rational, _b: Rational :: { share(_a), share(_b) }
        share(_a) == share(_b) ==> _a == _b
    }
    axiom axPlus { forall _a: Rational, _b: Rational :: { plus(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) ==> plus(share(_a), share(_b)) == share(_a + _b)
    }
    axiom axMinus { forall _a: Rational, _b: Rational :: { minus(share(_a), share(_b)) }
        geq(share(_a), share(_b)) ==> minus(share(_a), share(_b)) == share(_a - _b)
    }
    axiom axCanJoin { forall _a: Rational, _b: Rational :: { joinable(share(_a), share(_b)) }
        valid_share(_a) && valid_share(_b) ==> (joinable(share(_a), share(_b)) == valid_share(_a + _b))
    }
    axiom axGeq { forall _a: Rational, _b: Rational :: { geq(share(_a), share(_b)) }
        valid_share(_a) && valid_share(_b) ==> (geq(share(_a), share(_b)) <==> valid_share(_a - _b))
    }
    axiom axMul { forall _a: Rational, _b: Rational :: {times(share(_a), share(_b))} times(share(_a), share(_b)) == share(_a * _b)}

    axiom axJoinComm {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == plus(_q, _p)}
    axiom axJoinAssoc {forall _p: Perm, _q: Perm, _r: Perm :: {plus(plus(_p, _q), _r)} plus(plus(_p, _q), _r) == plus(_p, plus(_q, _r))}
    axiom axJoinCancel { forall _p: Perm, _q: Perm, _x: Perm :: {plus(_p, _x), plus(_q, _x)} plus(_p, _x) == plus(_q, _x) ==> _p == _q}

    axiom axUnitGeq { forall _p: Perm :: {geq(_p, unit())} geq(_p, unit())}
    axiom axUnitGeq2 { forall _p: Perm :: {geq(unit(),_p)} geq(unit(),_p) <==> _p == unit()}
    axiom axFullGeq { forall _p: Perm :: {geq(full(),_p)} geq(full(),_p)}
    axiom axFullGeq2 { forall _p: Perm :: {geq(_p, full())} geq(_p, full()) <==> _p == full()}
    axiom axGeqId { forall _p: Perm :: {geq(_p, _p)} geq(_p, _p)}
    axiom axMinusId { forall _p: Perm :: {minus(_p, _p)} minus(_p, _p) == unit()}


    axiom axUnitJoin { forall _p: Perm :: {plus(unit(),_p)} plus(unit(),_p) == _p}
    axiom axUnitJoinable { forall _p: Perm :: {joinable(_p, unit())} joinable(_p, unit())}
    axiom axJoinableComm { forall _p: Perm, _q: Perm :: {joinable(_p, _q)} joinable(_p, _q) == joinable(_q,_p)}
    axiom axTimes0 { forall _p: Perm :: {times(unit(),_p)} times(unit(),_p) == unit()}
    axiom axTimes1 { forall _p: Perm :: {times(full(),_p)} times(full(),_p) == _p}

    axiom axGeqPlus { forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(_a, _x)}
    axiom axGeqMinus {forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(minus(_a, _y), _x)}
    axiom axMinusUneq { forall _p: Perm, _q: Perm :: {geq(_p, _q)} geq(_p, _q) && _p != _q ==> minus(_p, _q) != unit()}

    axiom axPositive {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == unit() ==> _p == unit() && _q == unit()}
    axiom axPlusGeq {forall _p: Perm, _q: Perm :: {geq(plus(_p, _q), _p)} /*joinable(_p, _q) ==>*/ geq(plus(_p, _q), _p)}
    axiom axMinusCancel {forall _p: Perm, _q: Perm :: {minus(plus(_p, _q), _q)} minus(plus(_p, _q), _q) == _p}

}


domain _Scalar { //Fractional scalars
    function zeroS(): Scalar 
    function oneS(): Scalar
    function plusS(_x: Scalar, _y: Scalar): Scalar
    function minusS(_x: Scalar, _y: Scalar): Scalar
    function geqS(_x: Scalar, _y: Scalar): Bool
    //function joinable(_x: Perm, _y: Perm): Bool //not needed, joinability depends on perms' joinable predicate

    function timesS(_x: Scalar, _y: Scalar): Scalar
    function applyS(_x: Scalar, _y: Perm): Perm
    //Auxiliary functions
//Integer scalars
    function stack(_r: Rational) : Scalar
    axiom axStack0 { stack(0/1) == zeroS()}
    axiom axStack1 { stack(1/1) == oneS() }
    axiom axPlusStack { forall _n: Rational, _m: Rational :: {plusS(stack(_n), stack(_m))} _m >= 0/1 ==> _n >= 0/1 ==> plusS(stack(_n), stack(_m)) == stack(_m + _n)}
    axiom axGeqStack { forall _n: Rational, _m: Rational :: {geqS(stack(_n), stack(_m))} _m >= 0/1 ==> _n >= 0/1 ==> geqS(stack(_n), stack(_m)) <==> _n >= _m}
    axiom axMinusStack { forall _n: Rational, _m: Rational ::{minusS(stack(_n), stack(_m))} _m >= 0/1 ==> _n >= 0/1 ==> geqS(stack(_n), stack(_m)) ==> minusS(stack(_n), stack(_m)) == stack(_n - _m)}
    axiom axStackApply { forall _p: Rational, _n: Rational :: {applyS(stack(_n), share(_p))} valid_share(_n * _p) ==> applyS(stack(_n), share(_p)) == share(_n * _p)}
    axiom axStackTimes { forall _n: Rational, _m: Rational :: {timesS(stack(_n), stack(_m))} _m >= 0/1 ==> _n >= 0/1 ==> timesS(stack(_n), stack(_m)) == stack(_m * _n)}

//PLUS
    axiom axPlusZero{ forall _s: Scalar :: {plusS(zeroS(),_s)} plusS(zeroS(),_s) == _s}
    axiom axPlusComm {forall _s: Scalar, _t: Scalar :: {plusS(_s, _t)} plusS(_s, _t) == plusS(_t, _s)}

//APPLY
//one = identity function, zero = constant unit() function
    axiom applyZero { forall _p: Perm :: {applyS(zeroS(), _p)} applyS(zeroS(), _p) == unit() }
    axiom applyOne { forall _p: Perm :: {applyS(oneS(), _p)} applyS(oneS(), _p) == _p }


//TIMES

    axiom axTimes0S { forall _s: Scalar :: {timesS(zeroS(), _s)} timesS(zeroS(),_s) == zeroS()}
    axiom axTimes1S { forall _s: Scalar :: {timesS(oneS(),_s)} timesS(oneS(),_s) == _s}
    axiom axTimesComm {forall _s: Scalar, _t: Scalar :: {timesS(_s, _t)} timesS(_s, _t) == timesS(_t, _s)}

//GEQ
    axiom axGeqZero { forall _s: Scalar :: {geqS(_s, zeroS())} geqS(_s, zeroS())}
//MINUS
    axiom axMinusZero { forall _s: Scalar :: {geqS(_s, zeroS())} geqS(_s, zeroS())}

    //additional axioms
    axiom axGeqPlusS { forall _a: Scalar, _x: Scalar, _y: Scalar :: {geqS(_a, plusS(_x, _y))} geqS(_a, plusS(_x, _y)) ==> geqS(_a, _x)}
    axiom axgeqSMinusS {forall _a: Scalar, _x: Scalar, _y: Scalar :: {geqS(_a, plusS(_x, _y))} geqS(_a, plusS(_x, _y)) ==> geqS(minusS(_a, _y), _x)}
    axiom axMinusUneqS { forall _p: Scalar, _q: Scalar :: {geqS(_p, _q)} geqS(_p, _q) && _p != _q ==> minusS(_p, _q) != zeroS()}

    axiom axPositiveS {forall _p: Scalar, _q: Scalar :: {plusS(_p, _q)} plusS(_p, _q) == zeroS() ==> _p == zeroS() && _q == zeroS()}
    axiom axPlusgeqS {forall _p: Scalar, _q: Scalar :: {geqS(plusS(_p, _q), _p)}geqS(plusS(_p, _q), _p)}
    axiom axMinusCancelS {forall _p: Scalar, _q: Scalar :: {minusS(plusS(_p, _q), _q)} minusS(plusS(_p, _q), _q) == _p}

}