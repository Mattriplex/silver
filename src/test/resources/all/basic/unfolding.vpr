// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field f: Int
field next: Ref

predicate valid(r: Ref) {
    acc(r.f, write) && acc(r.next, write) && ((r.next != null) ==> (acc(valid(r.next), write)))
}

method t1(r: Ref)
    requires acc(valid(r), write)
{
    var i: Int := unfolding acc(valid(r), write) in (r.f)
}

method t2(r: Ref)
    requires r != null
{
    //:: ExpectedOutput(assignment.failed:insufficient.permission)
    var i: Int := unfolding acc(valid(r), write) in (r.f)
}

method t3(r: Ref)
    requires acc(valid(r), write)
{
    //:: ExpectedOutput(assignment.failed:insufficient.permission)
    var i: Int := (unfolding acc(valid(r), write) in (unfolding acc(valid(r), write) in (r.f)))
}


predicate deeper(r:Ref) {
     acc(r.f)
  && acc(r.next)
  && ((r.next != null) ==> acc(deeper(r.next)) && (unfolding deeper(r.next) in true))
}


method t4(r: Ref)
    requires acc(deeper(r))
{
    // note: this fails because the unfolding inside the predicate body is only evaluated in a temporary state - this doesn't grant extra permissions in the unfoldee's state. But perhaps it should.
    //:: ExpectedOutput(assignment.failed:insufficient.permission)
    var i: Int := unfolding acc(deeper(r), write) in ((r.next == null) ? 0 : r.next.f)
}

method t5(r: Ref)
    requires acc(deeper(r))
{
    var i: Int := unfolding acc(deeper(r), write) in ((r.next == null) ? 0 : (unfolding deeper(r.next) in r.next.f))
}

method t6(r: Ref)
    requires acc(deeper(r))
{
    //:: ExpectedOutput(assignment.failed:insufficient.permission)
    var i: Int := unfolding acc(deeper(r), write) in ((r.next == null) ? 0 : ((r.next.next == null) ? 0 : r.next.next.f))
}

/* This was originally a mistake: it is a version of the "deeper" predicate which
 * contains itself. A verifier may be able to find out that an instance of this
 * predicate cannot be held ...
 */
predicate strange(r:Ref) {
     acc(r.f)
  && acc(r.next)
  && (r.next != null
        ==>
     acc(r.next.f) && acc(r.next.next) && acc(strange(r)) && unfolding strange(r) in true)
}

method t7(r: Ref)
    requires acc(strange(r))
{
   //:: ExpectedOutput(assert.failed:assertion.false)
   assert false
}

method t8(r: Ref)
    requires acc(strange(r))
{
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert unfolding strange(r) in false
}

method t9(r:Ref)
    requires acc(strange(r))
{
  unfold strange(r)

  assert r.next == null // because otherwise, the predicate instance would be infinite..
}

method t10(r:Ref, i:Int) // test unfolding in loop invariant
  requires acc(valid(r))
  ensures acc(valid(r)) && unfolding valid(r) in (r.f > 2)
{
  var j : Int := i
  unfold valid(r)
  r.f := 3
  fold valid(r)
  while(j > 0)
    invariant acc(valid(r)) && unfolding valid(r) in (r.f > 2)
  {
    j := j - 1
    unfold valid(r)
    r.f := r.f + 1
    fold valid(r)
  }
}

method t11(r:Ref)
  requires acc(valid(r))
  ensures acc(r.f) && r.f > 2
{
  t10(r,0)
  unfold valid(r)
}

predicate deeperfalse(r:Ref) {
  acc(r.next) && r.next != null && acc(valid(r.next)) && (unfolding valid(r.next) in false)
}

method t12(r:Ref)
  requires acc(deeperfalse(r)) && unfolding deeperfalse(r) in true
  ensures false
{
}

method t13(r:Ref)
  requires acc(deeperfalse(r))
  ensures false
{
  t12(r)
}


//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axUnitJoinable { forall p: Perm :: {joinable(p, unit())} joinable(p, unit())}
    axiom axJoinableComm { forall p: Perm, q: Perm :: {joinable(p, q)} joinable(p, q) == joinable(q, p)}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}

    axiom axGeqPlus { forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(a, x)}
    axiom axGeqMinus {forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) && joinable(x, y) <==> geq(minus(a, y), x) && geq(a, y)}

}
