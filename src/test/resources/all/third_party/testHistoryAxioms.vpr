// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

domain Process {
  
  function p_merge(p1: Process, p2: Process): Process
  
  function p_seq(p1: Process, p2: Process): Process
  
  function p_empty(): Process
  
  function p_incr(): Process
  
  function p_single(n: Int): Process
  
  function p_dual(n: Int, m: Int): Process
  
  axiom empty_1L {
    (forall p: Process :: p_merge(p_empty(), p) == p)
  }
  
  axiom empty_2L {
    (forall p: Process :: p_seq(p_empty(), p) == p)
  }
  
  axiom empty_2R {
    (forall p: Process :: p_seq(p, p_empty()) == p)
  }
  
  axiom single_def {
    (forall n: Int :: (n > 0 ? p_seq(p_single(n - 1), p_incr()) : p_empty()) == p_single(n))
  }
  
  axiom dual_def {
    (forall n: Int, m: Int :: p_merge(p_single(n), p_single(m)) == p_dual(n, m))
  }
}

field Ref__x: Int

field Ref__x_old: Int

field Ref__Integer_value: Int

predicate Ref__hist_idle(diz: Ref, ref: Ref, p: Process) {
  true
}

predicate Ref__hist_empty(diz: Ref, ref: Ref, p: Process) {
  true
}

predicate Ref__hist_incr(diz: Ref, ref: Ref, p: Process) {
  true
}

method Ref__main(diz: Ref)
  requires diz != null
{
  var if_any_bool: Bool
  assert p_single(2) == p_single(2)
  assert p_dual(1, 1) == p_merge(p_single(1), p_single(1))
  assert p_empty() == p_single(0)
  assert p_seq(p_incr(), p_single(1)) == p_single(2)
  assert p_empty() == p_dual(0, 0)
}

method Ref__Ref() returns (sys__result: Ref)
  ensures sys__result != null
  ensures acc(sys__result.Ref__x, write) && (sys__result.Ref__x == 0)
{
  var diz: Ref
  var __flatten_31: Ref
  __flatten_31 := new(Ref__x, Ref__x_old, Ref__Integer_value)
  diz := __flatten_31
  diz.Ref__x := 0
  sys__result := diz
  assert (sys__result != null) && (acc(sys__result.Ref__x, write) && (sys__result.Ref__x == 0))
  inhale false
}

method Ref__empty_begin(diz: Ref, ref: Ref, p: Process)
  requires diz != null
  requires acc(Ref__hist_idle(diz, ref, p), write)
  requires acc(ref.Ref__x, write)
  ensures acc(Ref__hist_empty(diz, ref, p), write)
  ensures acc(ref.Ref__x, write)
  ensures ref.Ref__x == old(ref.Ref__x)
  ensures acc(diz.Ref__x_old, 1 / 2)
  ensures ref.Ref__x == diz.Ref__x_old
{
  inhale false
}

method Ref__empty_commit(diz: Ref, ref: Ref, p: Process)
  requires diz != null
  requires acc(Ref__hist_empty(diz, ref, p), write)
  requires acc(ref.Ref__x, write)
  requires acc(diz.Ref__x_old, 1 / 2)
  requires ref.Ref__x == diz.Ref__x_old
  ensures acc(Ref__hist_idle(diz, ref, p_seq(p, p_empty())), write)
  ensures acc(ref.Ref__x, write)
  ensures ref.Ref__x == old(ref.Ref__x)
{
  inhale false
}

method Ref__incr_begin(diz: Ref, ref: Ref, p: Process)
  requires diz != null
  requires acc(Ref__hist_idle(diz, ref, p), write)
  requires acc(ref.Ref__x, write)
  ensures acc(Ref__hist_incr(diz, ref, p), write)
  ensures acc(ref.Ref__x, write)
  ensures ref.Ref__x == old(ref.Ref__x)
  ensures acc(diz.Ref__x_old, 1 / 2)
  ensures ref.Ref__x == diz.Ref__x_old
{
  inhale false
}

method Ref__incr_commit(diz: Ref, ref: Ref, p: Process)
  requires diz != null
  requires acc(Ref__hist_incr(diz, ref, p), write)
  requires acc(ref.Ref__x, write)
  requires acc(diz.Ref__x_old, 1 / 2)
  requires ref.Ref__x == diz.Ref__x_old + 1
  ensures acc(Ref__hist_idle(diz, ref, p_seq(p, p_incr())), write)
  ensures acc(ref.Ref__x, write)
  ensures ref.Ref__x == old(ref.Ref__x)
{
  inhale false
}

method Ref__if_any_random(diz: Ref) returns (sys__result: Bool)
  requires diz != null
{
  inhale false
}
//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}
}
