// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/
   //:: IgnoreFile(/carbon/issue/999/)

field Ref__a: Seq[Ref]

field Ref__b: Seq[Ref]

field Ref__c: Seq[Ref]

field Ref__Integer_value: Int

method Ref__main_main(diz: Ref, current_thread_id: Int, tcount: Int, gsize: Int, tid: Int, gid: Int, lid: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires 0 <= tid
  requires tid < tcount
  requires 0 <= lid
  requires lid < gsize
  requires 0 <= gid
  requires tid == lid + gid * gsize
  requires acc(diz.Ref__a, wildcard)
  requires |diz.Ref__a| == tcount
  requires acc(diz.Ref__b, wildcard)
  requires |diz.Ref__b| == tcount
  requires acc(diz.Ref__c, wildcard)
  requires |diz.Ref__c| == tcount
  requires acc(diz.Ref__a[tid].Ref__Integer_value, write)
  requires acc(diz.Ref__b[tid].Ref__Integer_value, 1 / 2)
  requires acc(diz.Ref__c[tid].Ref__Integer_value, 1 / 2)
  ensures 0 <= tid
  ensures tid < tcount
  ensures 0 <= lid
  ensures lid < gsize
  ensures 0 <= gid
  ensures tid == lid + gid * gsize
  ensures acc(diz.Ref__a, wildcard)
  ensures |diz.Ref__a| == tcount
  ensures acc(diz.Ref__b, wildcard)
  ensures |diz.Ref__b| == tcount
  ensures acc(diz.Ref__c, wildcard)
  ensures |diz.Ref__c| == tcount
  ensures diz.Ref__a == old(diz.Ref__a)
  ensures diz.Ref__b == old(diz.Ref__b)
  ensures diz.Ref__c == old(diz.Ref__c)
  ensures acc(diz.Ref__a[tid].Ref__Integer_value, write)
  ensures acc(diz.Ref__b[tid].Ref__Integer_value, 1 / 2)
  ensures acc(diz.Ref__c[tid].Ref__Integer_value, 1 / 2)
  ensures diz.Ref__b[tid].Ref__Integer_value == old(diz.Ref__b[tid].Ref__Integer_value)
  ensures diz.Ref__c[tid].Ref__Integer_value == old(diz.Ref__c[tid].Ref__Integer_value)
  ensures diz.Ref__a[tid].Ref__Integer_value == diz.Ref__b[tid].Ref__Integer_value + diz.Ref__c[tid].Ref__Integer_value
{
  var __last_barrier: Int
  var __flatten_1: Ref
  var __flatten_2: Int
  var __flatten_3: Ref
  var __flatten_4: Ref
  __last_barrier := 0
  __flatten_1 := diz.Ref__a[tid]
  __flatten_3 := diz.Ref__b[tid]
  __flatten_4 := diz.Ref__c[tid]
  __flatten_2 := __flatten_3.Ref__Integer_value + __flatten_4.Ref__Integer_value
  __flatten_1.Ref__Integer_value := __flatten_2
}

method Ref__main_barrier(diz: Ref, current_thread_id: Int, tcount: Int, gsize: Int, tid: Int, gid: Int, lid: Int, this_barrier: Int, last_barrier: Int) returns (sys__result: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires 0 <= tid
  requires tid < tcount
  requires 0 <= lid
  requires lid < gsize
  requires 0 <= gid
  requires tid == lid + gid * gsize
  requires acc(diz.Ref__a, wildcard)
  requires |diz.Ref__a| == tcount
  requires acc(diz.Ref__b, wildcard)
  requires |diz.Ref__b| == tcount
  requires acc(diz.Ref__c, wildcard)
  requires |diz.Ref__c| == tcount
  requires (last_barrier == 0) ==> acc(diz.Ref__a[tid].Ref__Integer_value, write) && acc(diz.Ref__b[tid].Ref__Integer_value, 1 / 2) && acc(diz.Ref__c[tid].Ref__Integer_value, 1 / 2)
  ensures 0 <= tid
  ensures tid < tcount
  ensures 0 <= lid
  ensures lid < gsize
  ensures 0 <= gid
  ensures tid == lid + gid * gsize
  ensures acc(diz.Ref__a, wildcard)
  ensures |diz.Ref__a| == tcount
  ensures acc(diz.Ref__b, wildcard)
  ensures |diz.Ref__b| == tcount
  ensures acc(diz.Ref__c, wildcard)
  ensures |diz.Ref__c| == tcount
  ensures diz.Ref__a == old(diz.Ref__a)
  ensures diz.Ref__b == old(diz.Ref__b)
  ensures diz.Ref__c == old(diz.Ref__c)
  ensures (sys__result == 0) ==> acc(diz.Ref__a[tid].Ref__Integer_value, write) && acc(diz.Ref__b[tid].Ref__Integer_value, 1 / 2) && acc(diz.Ref__c[tid].Ref__Integer_value, 1 / 2)
  ensures sys__result == this_barrier
{
  inhale false
}
//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(_x: Perm, _y: Perm): Perm
    function minus(_x: Perm, _y: Perm): Perm
    function geq(_x: Perm, _y: Perm): Bool
    function joinable(_x: Perm, _y: Perm): Bool

    function times(_x: Perm, _y: Perm): Perm

    //Auxiliary functions
    function share(_x: Rational): Perm
    function valid_share(_x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall _a: Int, _b: Int :: {biConstr(_a, _b)} biConstr(_a, _b) == share(_a/_b)}


    axiom axValid { forall _x: Rational :: {valid_share(_x)}
        valid_share(_x) <==> (_x >= 0/1 && _x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall _a: Rational, _b: Rational :: { share(_a), share(_b) }
        share(_a) == share(_b) ==> _a == _b
    }
    axiom axPlus { forall _a: Rational, _b: Rational :: { plus(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) ==> plus(share(_a), share(_b)) == share(_a + _b)
    }
    axiom axMinus { forall _a: Rational, _b: Rational :: { minus(share(_a), share(_b)) }
        geq(share(_a), share(_b)) ==> minus(share(_a), share(_b)) == share(_a - _b)
    }
    axiom axCanJoin { forall _a: Rational, _b: Rational :: { joinable(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) <==> valid_share(_a) && valid_share(_b) && valid_share(_a + _b)
    }
    axiom axGeq { forall _a: Rational, _b: Rational :: { geq(share(_a), share(_b)) }
        geq(share(_a), share(_b)) <==> valid_share(_a) && valid_share(_b) && valid_share(_a - _b)
    }
    axiom axMul { forall _a: Rational, _b: Rational :: {times(share(_a), share(_b))} times(share(_a), share(_b)) == share(_a * _b)}

    axiom axJoinComm {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == plus(_q, _p)}
    axiom axJoinAssoc {forall _p: Perm, _q: Perm, _r: Perm :: {plus(plus(_p, _q), _r)} plus(plus(_p, _q), _r) == plus(_p, plus(_q, _r))}
    axiom axJoinCancel { forall _p: Perm, _q: Perm, _x: Perm :: {plus(_p, _x), plus(_q, _x)} plus(_p, _x) == plus(_q, _x) ==> _p == _q}

    axiom axUnitGeq { forall _p: Perm :: {geq(_p, unit())} geq(_p, unit())}
    axiom axUnitGeq2 { forall _p: Perm :: {geq(unit(),_p)} geq(unit(),_p) <==> _p == unit()}
    axiom axFullGeq { forall _p: Perm :: {geq(full(),_p)} geq(full(),_p)}
    axiom axFullGeq2 { forall _p: Perm :: {geq(_p, full())} geq(_p, full()) <==> _p == full()}
    axiom axGeqId { forall _p: Perm :: {geq(_p, _p)} geq(_p, _p)}
    axiom axMinusId { forall _p: Perm :: {minus(_p, _p)} minus(_p, _p) == unit()}


    axiom axUnitJoin { forall _p: Perm :: {plus(unit(),_p)} plus(unit(),_p) == _p}
    axiom axUnitJoinable { forall _p: Perm :: {joinable(_p, unit())} joinable(_p, unit())}
    axiom axJoinableComm { forall _p: Perm, _q: Perm :: {joinable(_p, _q)} joinable(_p, _q) == joinable(_q,_p)}
    axiom axTimes0 { forall _p: Perm :: {times(unit(),_p)} times(unit(),_p) == unit()}
    axiom axTimes1 { forall _p: Perm :: {times(full(),_p)} times(full(),_p) == _p}

    axiom axGeqPlus { forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(_a, _x)}
    axiom axGeqMinus {forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(minus(_a, _y), _x)}
    axiom axMinusUneq { forall _p: Perm, _q: Perm :: {geq(_p, _q)} geq(_p, _q) && _p != _q ==> minus(_p, _q) != unit()}

    axiom axPositive {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == unit() ==> _p == unit() && _q == unit()}
    axiom axPlusGeq {forall _p: Perm, _q: Perm :: {geq(plus(_p, _q), _p)} joinable(_p, _q) ==> geq(plus(_p, _q), _p)}
    axiom axMinusCancel {forall _p: Perm, _q: Perm :: {minus(plus(_p, _q), _q)} minus(plus(_p, _q), _q) == _p}

}
