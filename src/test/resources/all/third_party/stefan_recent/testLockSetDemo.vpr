// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field Lock__owner: Ref

field Lock__user: Ref

field Client__x: Int

predicate LockSet__lockset(diz: Ref, S: Multiset[Ref]) {
  true
}

predicate Client__inv(diz: Ref, p: Perm) {
  p >= none && acc(diz.Client__x, p)
}

method LockSet__LockSet(current_thread_id: Int) returns (sys__result: Ref)
  requires current_thread_id >= 0
  ensures sys__result != null
  ensures acc(LockSet__lockset(sys__result, Multiset[Ref]()), write)
{
  var diz: Ref
  diz := new()
  inhale false
  sys__result := diz
  assert (sys__result != null) && acc(LockSet__lockset(sys__result, Multiset[Ref]()), write)
  inhale false
}

method Lock__lock(diz: Ref, current_thread_id: Int, S: Multiset[Ref])
  requires diz != null
  requires current_thread_id >= 0
  requires acc(diz.Lock__owner, wildcard)
  requires acc(diz.Lock__user, wildcard)
  requires acc(LockSet__lockset(diz.Lock__owner, S), write)
  ensures acc(diz.Lock__owner, wildcard)
  ensures acc(diz.Lock__user, wildcard)
  ensures ((diz in S) == 0) ==> acc(Client__inv(diz.Lock__user, write), write)
  ensures acc(LockSet__lockset(diz.Lock__owner, S union Multiset(diz)), write)
{
  inhale false
}

method Lock__unlock(diz: Ref, current_thread_id: Int, S: Multiset[Ref])
  requires diz != null
  requires current_thread_id >= 0
  requires acc(diz.Lock__owner, wildcard)
  requires acc(diz.Lock__user, wildcard)
  requires acc(LockSet__lockset(diz.Lock__owner, S union Multiset(diz)), write)
  requires ((diz in S) == 0) ==> acc(Client__inv(diz.Lock__user, write), write)
  ensures acc(diz.Lock__owner, wildcard)
  ensures acc(diz.Lock__user, wildcard)
  ensures acc(LockSet__lockset(diz.Lock__owner, S), write)
{
  inhale false
}

method Lock__Lock(current_thread_id: Int, owner: Ref, user: Ref) returns (sys__result: Ref)
  requires current_thread_id >= 0
  requires acc(Client__inv(user, write), write)
  ensures sys__result != null
  ensures acc(sys__result.Lock__owner, wildcard)
  ensures acc(sys__result.Lock__user, wildcard)
  ensures sys__result.Lock__owner == owner
  ensures sys__result.Lock__user == user
{
  var diz: Ref
  diz := new(Lock__owner, Lock__user)
  inhale false
  sys__result := diz
  assert (sys__result != null) && acc(sys__result.Lock__owner, wildcard) && acc(sys__result.Lock__user, wildcard) && (sys__result.Lock__owner == owner) && (sys__result.Lock__user == user)
  inhale false
}

method Client__main(diz: Ref, current_thread_id: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(diz.Client__x, write)
{
  var ls: Ref
  var __flatten_1: Ref
  var l: Ref
  var __flatten_2: Ref
  var __flatten_4: Int
  var __flatten_6: Int
  var __flatten_8: Int
  var __flatten_10: Int
  var __flatten_15: Int
  var __flatten_17: Int
  var __flatten_19: Int
  var __flatten_21: Int
  __flatten_1 := LockSet__LockSet(current_thread_id)
  ls := __flatten_1
  assert acc(LockSet__lockset(ls, Multiset[Ref]()), write)
  fold acc(Client__inv(diz, write), write)
  __flatten_2 := Lock__Lock(current_thread_id, ls, diz)
  l := __flatten_2
  Lock__lock(l, current_thread_id, Multiset[Ref]())
  unfold acc(Client__inv(diz, write), write)
  __flatten_4 := 1
  __flatten_15 := __flatten_4
  diz.Client__x := __flatten_15
  //:: UnexpectedOutput(call.precondition:insufficient.permission, /Carbon/issue/77/)
  Lock__lock(l, current_thread_id, Multiset(l))
  __flatten_6 := 2
  __flatten_17 := __flatten_6
  diz.Client__x := __flatten_17
  Lock__unlock(l, current_thread_id, Multiset(l))
  __flatten_8 := 3
  __flatten_19 := __flatten_8
  diz.Client__x := __flatten_19
  fold acc(Client__inv(diz, write), write)
  Lock__unlock(l, current_thread_id, Multiset[Ref]())
    //:: ExpectedOutput(unfold.failed:insufficient.permission)
    // confirmed by Stefan Blom
  unfold acc(Client__inv(diz, write), write)
  __flatten_10 := 4
  __flatten_21 := __flatten_10
  diz.Client__x := __flatten_21
}

method Client__Client(current_thread_id: Int) returns (sys__result: Ref)
  requires current_thread_id >= 0
  ensures sys__result != null
  ensures acc(sys__result.Client__x, write) && (sys__result.Client__x == 0)
{
  var diz: Ref
  var __flatten_11: Int
  var __flatten_22: Int
  diz := new(Client__x)
  __flatten_11 := 0
  __flatten_22 := __flatten_11
  diz.Client__x := __flatten_22
  sys__result := diz
  assert (sys__result != null) && (acc(sys__result.Client__x, write) && (sys__result.Client__x == 0))
  inhale false
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axUnitJoinable { forall p: Perm :: {joinable(p, unit())} joinable(p, unit())}
    axiom axJoinableComm { forall p: Perm, q: Perm :: {joinable(p, q)} joinable(p, q) == joinable(q, p)}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}

    axiom axGeqPlus { forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(a, x)}
    axiom axGeqMinus {forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) && joinable(x, y) <==> geq(minus(a, y), x) && geq(a, y)}

}
