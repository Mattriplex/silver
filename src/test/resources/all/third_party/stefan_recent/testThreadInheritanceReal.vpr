// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

domain TYPE {
  
  function class_Object(): TYPE
  
  function class_Thread(): TYPE
  
  function class_Worker(): TYPE
  
  function class_Main(): TYPE
  
  function instanceof(t1: TYPE, t2: TYPE): Bool
  
  function type_of(val: Ref): TYPE
  
  axiom object_top {
    (forall t: TYPE :: instanceof(class_Object(), t))
  }
}

field Worker__input: Int

field Worker__output: Int

field Ref__String_value: Seq[Int]

predicate Thread__is_a_Thread(diz: Ref) 

predicate Thread__instance_of_Thread(diz: Ref) 

predicate Thread__joinToken(diz: Ref, p: Perm) 

predicate Thread__preFork(diz: Ref, p: Perm) 

predicate Thread__postJoin(diz: Ref, p: Perm) 

predicate Thread__joinToken_at_Thread(diz: Ref, p: Perm) 

predicate Thread__preFork_at_Thread(diz: Ref, p: Perm) {
  true
}

predicate Thread__postJoin_at_Thread(diz: Ref, p: Perm) {
  true
}

predicate Worker__is_a_Worker(diz: Ref) 

predicate Worker__instance_of_Worker(diz: Ref) 

predicate Worker__is_a_Thread(diz: Ref) 

predicate Worker__instance_of_Thread(diz: Ref) 

predicate Worker__joinToken(diz: Ref, p: Perm) 

predicate Worker__joinToken_at_Worker(diz: Ref, p: Perm) {
  acc(Worker__joinToken_at_Thread(diz, p), write)
}

predicate Worker__preFork(diz: Ref, p: Perm) 

predicate Worker__postJoin(diz: Ref, p: Perm) 

predicate Worker__joinToken_at_Thread(diz: Ref, p: Perm) 

predicate Worker__preFork_at_Thread(diz: Ref, p: Perm) {
  true
}

predicate Worker__postJoin_at_Thread(diz: Ref, p: Perm) {
  true
}

predicate Worker__preFork_at_Worker(diz: Ref, p: Perm) {
  p >= none && acc(Worker__preFork_at_Thread(diz, p), write) && (acc(diz.Worker__input, wildcard) && (p != none) && acc(diz.Worker__output, p))
}

predicate Worker__postJoin_at_Worker(diz: Ref, p: Perm) {
  p >= none && acc(Worker__postJoin_at_Thread(diz, p), write) && (acc(diz.Worker__input, wildcard) && (p != none) && (acc(diz.Worker__output, p) && (diz.Worker__output == diz.Worker__input + 1)))
}

method Thread__run(diz: Ref, current_thread_id: Int) returns (sys__thrown: Ref)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(Thread__preFork(diz, write), write)
  ensures acc(Thread__postJoin(diz, write), write)
{
  inhale false
}

method Thread__start(diz: Ref, current_thread_id: Int) returns (sys__thrown: Ref)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(Thread__preFork(diz, write), write)
  ensures acc(Thread__joinToken(diz, write), write)
{
  inhale false
}

method Thread__join(diz: Ref, current_thread_id: Int, p: Perm) returns (sys__thrown: Ref)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(Thread__joinToken(diz, p), write)
  ensures acc(Thread__postJoin(diz, p), write)
{
  inhale false
}

method Thread__open_joinToken_at_Thread(diz: Ref, current_thread_id: Int, p: Perm) returns (sys__thrown: Ref)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(Thread__joinToken(diz, p), write)
  requires acc(Thread__is_a_Thread(diz), write)
  ensures acc(Thread__joinToken_at_Thread(diz, p), write)
{
  inhale false
}

method Thread__open_preFork_at_Thread(diz: Ref, current_thread_id: Int, p: Perm) returns (sys__thrown: Ref)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(Thread__preFork(diz, p), write)
  requires acc(Thread__is_a_Thread(diz), write)
  ensures acc(Thread__preFork_at_Thread(diz, p), write)
{
  inhale false
}

method Thread__open_postJoin_at_Thread(diz: Ref, current_thread_id: Int, p: Perm) returns (sys__thrown: Ref)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(Thread__postJoin(diz, p), write)
  requires acc(Thread__is_a_Thread(diz), write)
  ensures acc(Thread__postJoin_at_Thread(diz, p), write)
{
  inhale false
}

method Thread__Thread(current_thread_id: Int) returns (sys__thrown: Ref, sys__result: Ref)
  requires current_thread_id >= 0
  ensures sys__result != null
  ensures type_of(sys__result) == class_Thread()
  ensures acc(Thread__is_a_Thread(sys__result), write)
{
  inhale false
}

method Thread__Thread_at_Thread(current_thread_id: Int) returns (sys__thrown: Ref, sys__result: Ref)
  requires current_thread_id >= 0
  ensures sys__result != null
  ensures type_of(sys__result) == class_Thread()
{
  var diz: Ref
  diz := new()
  inhale type_of(diz) == class_Thread()
  inhale false
  sys__result := diz
  assert (sys__result != null) && (type_of(sys__result) == class_Thread())
  inhale false
}

method Thread__run_at_Thread(diz: Ref, current_thread_id: Int) returns (sys__thrown: Ref)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(Thread__preFork_at_Thread(diz, write), write)
  ensures acc(Thread__postJoin_at_Thread(diz, write), write)
{
  inhale false
}

method Thread__start_at_Thread(diz: Ref, current_thread_id: Int) returns (sys__thrown: Ref)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(Thread__preFork(diz, write), write)
  ensures acc(Thread__joinToken(diz, write), write)
{
  inhale false
}

method Thread__join_at_Thread(diz: Ref, current_thread_id: Int, p: Perm) returns (sys__thrown: Ref)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(Thread__joinToken(diz, p), write)
  ensures acc(Thread__postJoin(diz, p), write)
{
  inhale false
}

method Worker__run(diz: Ref, current_thread_id: Int) returns (sys__thrown: Ref)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(Worker__preFork(diz, write), write)
  ensures acc(Worker__postJoin(diz, write), write)
{
  inhale false
}

method Worker__start(diz: Ref, current_thread_id: Int) returns (sys__thrown: Ref)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(Worker__preFork(diz, write), write)
  ensures acc(Worker__joinToken(diz, write), write)
{
  inhale false
}

method Worker__join(diz: Ref, current_thread_id: Int, p: Perm) returns (sys__thrown: Ref)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(Worker__joinToken(diz, p), write)
  ensures acc(Worker__postJoin(diz, p), write)
{
  inhale false
}

method Worker__open_joinToken_at_Thread(diz: Ref, current_thread_id: Int, p: Perm) returns (sys__thrown: Ref)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(Worker__joinToken(diz, p), write)
  requires acc(Worker__is_a_Thread(diz), write)
  ensures acc(Worker__joinToken_at_Thread(diz, p), write)
{
  inhale false
}

method Worker__open_preFork_at_Thread(diz: Ref, current_thread_id: Int, p: Perm) returns (sys__thrown: Ref)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(Worker__preFork(diz, p), write)
  requires acc(Worker__is_a_Thread(diz), write)
  ensures acc(Worker__preFork_at_Thread(diz, p), write)
{
  inhale false
}

method Worker__open_postJoin_at_Thread(diz: Ref, current_thread_id: Int, p: Perm) returns (sys__thrown: Ref)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(Worker__postJoin(diz, p), write)
  requires acc(Worker__is_a_Thread(diz), write)
  ensures acc(Worker__postJoin_at_Thread(diz, p), write)
{
  inhale false
}

method Worker__Thread(current_thread_id: Int) returns (sys__thrown: Ref, sys__result: Ref)
  requires current_thread_id >= 0
  ensures sys__result != null
  ensures type_of(sys__result) == class_Thread()
  ensures acc(Worker__is_a_Thread(sys__result), write)
{
  inhale false
}

method Worker__Thread_at_Thread(current_thread_id: Int) returns (sys__thrown: Ref, sys__result: Ref)
  requires current_thread_id >= 0
  ensures sys__result != null
  ensures type_of(sys__result) == class_Thread()
{
  inhale false
}

method Worker__run_at_Thread(diz: Ref, current_thread_id: Int) returns (sys__thrown: Ref)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(Worker__preFork_at_Thread(diz, write), write)
  ensures acc(Worker__postJoin_at_Thread(diz, write), write)
{
  inhale false
}

method Worker__start_at_Thread(diz: Ref, current_thread_id: Int) returns (sys__thrown: Ref)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(Worker__preFork(diz, write), write)
  ensures acc(Worker__joinToken(diz, write), write)
{
  inhale false
}

method Worker__join_at_Thread(diz: Ref, current_thread_id: Int, p: Perm) returns (sys__thrown: Ref)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(Worker__joinToken(diz, p), write)
  ensures acc(Worker__postJoin(diz, p), write)
{
  inhale false
}

method Worker__open_preFork_at_Worker(diz: Ref, current_thread_id: Int, p: Perm) returns (sys__thrown: Ref)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(Worker__preFork(diz, p), write)
  requires acc(Worker__is_a_Worker(diz), write)
  ensures acc(Worker__preFork_at_Worker(diz, p), write)
{
  inhale false
}

method Worker__open_postJoin_at_Worker(diz: Ref, current_thread_id: Int, p: Perm) returns (sys__thrown: Ref)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(Worker__postJoin(diz, p), write)
  requires acc(Worker__is_a_Worker(diz), write)
  ensures acc(Worker__postJoin_at_Worker(diz, p), write)
{
  inhale false
}

method Worker__Worker(current_thread_id: Int, input: Int) returns (sys__thrown: Ref, sys__result: Ref)
  requires current_thread_id >= 0
  ensures sys__result != null
  ensures type_of(sys__result) == class_Worker()
  ensures acc(Worker__preFork(sys__result, write), write)
  ensures acc(sys__result.Worker__input, wildcard)
  ensures sys__result.Worker__input == input
  ensures acc(Worker__is_a_Worker(sys__result), write)
{
  inhale false
}

method Worker__Worker_at_Worker(current_thread_id: Int, input: Int) returns (sys__thrown: Ref, sys__result: Ref)
  requires current_thread_id >= 0
  ensures sys__result != null
  ensures type_of(sys__result) == class_Worker()
  ensures acc(Worker__preFork_at_Worker(sys__result, write), write)
  ensures acc(sys__result.Worker__input, wildcard)
  ensures sys__result.Worker__input == input
{
  var diz: Ref
  var __flatten_3: Int
  var __flatten_11: Int
  diz := new(Worker__input, Worker__output)
  inhale type_of(diz) == class_Worker()
  __flatten_3 := input
  __flatten_11 := __flatten_3
  diz.Worker__input := __flatten_11
  fold acc(Worker__preFork_at_Thread(diz, write), write)
  fold acc(Worker__preFork_at_Worker(diz, write), write)
  sys__result := diz
  assert (sys__result != null) && (type_of(sys__result) == class_Worker()) && acc(Worker__preFork_at_Worker(sys__result, write), write) && acc(sys__result.Worker__input, wildcard) && (sys__result.Worker__input == input)
  inhale false
}

method Worker__run_at_Worker(diz: Ref, current_thread_id: Int) returns (sys__thrown: Ref)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(Worker__preFork_at_Worker(diz, write), write)
  ensures acc(Worker__postJoin_at_Worker(diz, write), write)
{
  var __flatten_4: Int
  var __flatten_12: Int
  unfold acc(Worker__preFork_at_Worker(diz, write), write)
  __flatten_4 := diz.Worker__input + 1
  __flatten_12 := __flatten_4
  diz.Worker__output := __flatten_12
  fold acc(Worker__postJoin_at_Thread(diz, write), write)
  fold acc(Worker__postJoin_at_Worker(diz, write), write)
}

method Main__main(current_thread_id: Int, args: Seq[Ref]) returns (sys__thrown: Ref)
  requires current_thread_id >= 0
{
  var w: Ref
  var __flatten_5: Ref
  sys__thrown, __flatten_5 := Worker__Worker(current_thread_id, 7)
  w := __flatten_5
  assert w.Worker__input == 7
  sys__thrown := Worker__start(w, current_thread_id)
  sys__thrown := Worker__join(w, current_thread_id, write)
  assert w.Worker__input == 7
  sys__thrown := Worker__open_postJoin_at_Worker(w, current_thread_id, write)
  unfold acc(Worker__postJoin_at_Worker(w, write), write)
  assert w.Worker__output == 8
}

method Main__Main(current_thread_id: Int) returns (sys__thrown: Ref, sys__result: Ref)
  requires current_thread_id >= 0
  ensures sys__result != null
  ensures type_of(sys__result) == class_Main()
{
  var diz: Ref
  diz := new()
  inhale type_of(diz) == class_Main()
  sys__result := diz
  assert (sys__result != null) && (type_of(sys__result) == class_Main())
  inhale false
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}
}
