// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field Wand_readonly_for_writeonly__lemma: Int

field Wand_readonly_for_writeonly__in_1: Ref

field Wand_readonly_for_writeonly__out_1: Ref

field Wand_readonly_for_writeonly__this_1: Ref

field WandDemo__x: Int

function Wand_readonly_for_writeonly__get_in_1(diz: Ref): Ref
  requires diz != null
  requires acc(Wand_readonly_for_writeonly__valid_wand(diz))
  ensures result != null
{
  (unfolding acc(Wand_readonly_for_writeonly__valid_wand(diz)) in diz.Wand_readonly_for_writeonly__in_1)
}

function Wand_readonly_for_writeonly__get_out_1(diz: Ref): Ref
  requires diz != null
  requires acc(Wand_readonly_for_writeonly__valid_wand(diz))
  ensures result != null
{
  (unfolding acc(Wand_readonly_for_writeonly__valid_wand(diz)) in diz.Wand_readonly_for_writeonly__out_1)
}

function WandDemo__get(diz: Ref): Int
  requires diz != null
  requires acc(WandDemo__readonly(diz))
{
  (unfolding acc(WandDemo__readonly(diz)) in diz.WandDemo__x)
}

predicate Wand_readonly_for_writeonly__valid_wand(diz: Ref) {
  acc(diz.Wand_readonly_for_writeonly__lemma, wildcard) && (1 <= diz.Wand_readonly_for_writeonly__lemma) && acc(diz.Wand_readonly_for_writeonly__in_1, wildcard) && (diz.Wand_readonly_for_writeonly__in_1 != null) && acc(diz.Wand_readonly_for_writeonly__out_1, wildcard) && (diz.Wand_readonly_for_writeonly__out_1 != null) && acc(diz.Wand_readonly_for_writeonly__this_1, wildcard) && ((diz.Wand_readonly_for_writeonly__lemma == 1) ==> (diz.Wand_readonly_for_writeonly__this_1 != null) && acc(diz.Wand_readonly_for_writeonly__this_1.WandDemo__x, 3 / 4) && (diz.Wand_readonly_for_writeonly__in_1 == diz.Wand_readonly_for_writeonly__this_1) && (diz.Wand_readonly_for_writeonly__out_1 == diz.Wand_readonly_for_writeonly__this_1)) && (diz.Wand_readonly_for_writeonly__lemma <= 1)
}

predicate WandDemo__readonly(diz: Ref) {
  acc(diz.WandDemo__x, 1 / 4)
}

predicate WandDemo__writeonly(diz: Ref) {
  acc(diz.WandDemo__x, write)
}

method Wand_readonly_for_writeonly___apply(diz: Ref, current_thread_id: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(Wand_readonly_for_writeonly__valid_wand(diz))
  requires acc(WandDemo__readonly(Wand_readonly_for_writeonly__get_in_1(diz)))
  requires Wand_readonly_for_writeonly__get_out_1(diz) != null
  ensures acc(WandDemo__writeonly(old(Wand_readonly_for_writeonly__get_out_1(diz))))
{
  unfold acc(Wand_readonly_for_writeonly__valid_wand(diz))
  if (diz.Wand_readonly_for_writeonly__lemma == 1) {
    unfold acc(WandDemo__readonly(diz.Wand_readonly_for_writeonly__this_1))
    fold acc(WandDemo__writeonly(diz.Wand_readonly_for_writeonly__this_1))
    assert acc(WandDemo__writeonly(old(Wand_readonly_for_writeonly__get_out_1(diz))))
    inhale false
  }
}

method Wand_readonly_for_writeonly__Wand_readonly_for_writeonly(current_thread_id: Int) returns (sys__result: Ref)
  requires current_thread_id >= 0
  ensures sys__result != null
  ensures acc(sys__result.Wand_readonly_for_writeonly__lemma, write) && (sys__result.Wand_readonly_for_writeonly__lemma == 0)
  ensures acc(sys__result.Wand_readonly_for_writeonly__in_1, write) && (sys__result.Wand_readonly_for_writeonly__in_1 == null)
  ensures acc(sys__result.Wand_readonly_for_writeonly__out_1, write) && (sys__result.Wand_readonly_for_writeonly__out_1 == null)
  ensures acc(sys__result.Wand_readonly_for_writeonly__this_1, write) && (sys__result.Wand_readonly_for_writeonly__this_1 == null)
{
  var diz: Ref
  var __flatten_1: Int
  var __flatten_15: Int
  diz := new(Wand_readonly_for_writeonly__lemma, Wand_readonly_for_writeonly__in_1, Wand_readonly_for_writeonly__out_1, Wand_readonly_for_writeonly__this_1)
  __flatten_1 := 0
  __flatten_15 := __flatten_1
  diz.Wand_readonly_for_writeonly__lemma := __flatten_15
  diz.Wand_readonly_for_writeonly__in_1 := null
  diz.Wand_readonly_for_writeonly__out_1 := null
  diz.Wand_readonly_for_writeonly__this_1 := null
  sys__result := diz
  assert (sys__result != null) && (acc(sys__result.Wand_readonly_for_writeonly__lemma, write) && (sys__result.Wand_readonly_for_writeonly__lemma == 0)) && (acc(sys__result.Wand_readonly_for_writeonly__in_1, write) && (sys__result.Wand_readonly_for_writeonly__in_1 == null)) && (acc(sys__result.Wand_readonly_for_writeonly__out_1, write) && (sys__result.Wand_readonly_for_writeonly__out_1 == null)) && (acc(sys__result.Wand_readonly_for_writeonly__this_1, write) && (sys__result.Wand_readonly_for_writeonly__this_1 == null))
  inhale false
}

method WandDemo__WandDemo(current_thread_id: Int) returns (sys__result: Ref)
  requires current_thread_id >= 0
  ensures sys__result != null
  ensures acc(WandDemo__writeonly(sys__result))
{
  var diz: Ref
  diz := new(WandDemo__x)
  fold acc(WandDemo__writeonly(diz))
  sys__result := diz
  assert (sys__result != null) && acc(WandDemo__writeonly(sys__result))
  inhale false
}

method WandDemo__Wand_readonly_for_writeonly_lemma_1(diz: Ref, current_thread_id: Int, this_1: Ref, in_1: Ref, out_1: Ref) returns (sys__result: Ref)
  requires diz != null
  requires current_thread_id >= 0
  requires this_1 != null
  requires acc(this_1.WandDemo__x, 3 / 4)
  requires in_1 != null
  requires in_1 == this_1
  requires out_1 != null
  requires out_1 == this_1
  ensures sys__result != null
  ensures acc(Wand_readonly_for_writeonly__valid_wand(sys__result))
  ensures Wand_readonly_for_writeonly__get_in_1(sys__result) == in_1
  ensures Wand_readonly_for_writeonly__get_out_1(sys__result) == out_1
{
  var vwand: Ref
  var __flatten_2: Ref
  var __flatten_3: Int
  var __flatten_4: Ref
  var __flatten_5: Ref
  var __flatten_6: Ref
  var __flatten_7: Ref
  var __flatten_17: Int
  var __flatten_18: Ref
  var __flatten_19: Ref
  var __flatten_20: Ref
  __flatten_2 := Wand_readonly_for_writeonly__Wand_readonly_for_writeonly(current_thread_id)
  vwand := __flatten_2
  __flatten_3 := 1
  __flatten_17 := __flatten_3
  vwand.Wand_readonly_for_writeonly__lemma := __flatten_17
  __flatten_4 := this_1
  __flatten_18 := __flatten_4
  vwand.Wand_readonly_for_writeonly__this_1 := __flatten_18
  __flatten_5 := in_1
  __flatten_19 := __flatten_5
  vwand.Wand_readonly_for_writeonly__in_1 := __flatten_19
  __flatten_6 := out_1
  __flatten_20 := __flatten_6
  vwand.Wand_readonly_for_writeonly__out_1 := __flatten_20
  fold acc(Wand_readonly_for_writeonly__valid_wand(vwand))
  __flatten_7 := vwand
  sys__result := __flatten_7
  assert (sys__result != null) && acc(Wand_readonly_for_writeonly__valid_wand(sys__result)) && (Wand_readonly_for_writeonly__get_in_1(sys__result) == in_1) && (Wand_readonly_for_writeonly__get_out_1(sys__result) == out_1)
  inhale false
}

method WandDemo__set(diz: Ref, current_thread_id: Int, v: Int) returns (vwand: Ref)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(WandDemo__writeonly(diz))
  ensures acc(WandDemo__readonly(diz))
  ensures vwand != null
  ensures acc(Wand_readonly_for_writeonly__valid_wand(vwand))
  ensures Wand_readonly_for_writeonly__get_in_1(vwand) == diz
  ensures Wand_readonly_for_writeonly__get_out_1(vwand) == diz
{
  var __flatten_8: Int
  var __flatten_9: Ref
  var __flatten_21: Int
  unfold acc(WandDemo__writeonly(diz))
  __flatten_8 := v
  __flatten_21 := __flatten_8
  diz.WandDemo__x := __flatten_21
  fold acc(WandDemo__readonly(diz))
  __flatten_9 := WandDemo__Wand_readonly_for_writeonly_lemma_1(diz, current_thread_id, diz, diz, diz)
  vwand := __flatten_9
}

method WandDemo__demo(diz: Ref, current_thread_id: Int)
  requires diz != null
  requires current_thread_id >= 0
{
  var vwand: Ref
  var d: Ref
  var __flatten_10: Ref
  var i: Int
  var __flatten_12: Int
  var __flatten_13: Int
  var __flatten_25: Int
  var __flatten_26: Int
  __flatten_10 := WandDemo__WandDemo(current_thread_id)
  d := __flatten_10
  i := 1
  while (true)
    invariant acc(WandDemo__writeonly(d))
  {
    vwand := WandDemo__set(d, current_thread_id, i)
    __flatten_25 := WandDemo__get(d)
    __flatten_12 := __flatten_25
    __flatten_26 := WandDemo__get(d)
    __flatten_13 := __flatten_26
    i := __flatten_12 + __flatten_13
    Wand_readonly_for_writeonly___apply(vwand, current_thread_id)
  }
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(_x: Perm, _y: Perm): Perm
    function minus(_x: Perm, _y: Perm): Perm
    function geq(_x: Perm, _y: Perm): Bool
    function joinable(_x: Perm, _y: Perm): Bool

    function times(_x: Perm, _y: Perm): Perm

    //Auxiliary functions
    function share(_x: Rational): Perm
    function valid_share(_x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall _a: Int, _b: Int :: {biConstr(_a, _b)} biConstr(_a, _b) == share(_a/_b)}


    axiom axValid { forall _x: Rational :: {valid_share(_x)}
        valid_share(_x) <==> (_x >= 0/1 && _x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall _a: Rational, _b: Rational :: { share(_a), share(_b) }
        share(_a) == share(_b) ==> _a == _b
    }
    axiom axPlus { forall _a: Rational, _b: Rational :: { plus(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) ==> plus(share(_a), share(_b)) == share(_a + _b)
    }
    axiom axMinus { forall _a: Rational, _b: Rational :: { minus(share(_a), share(_b)) }
        geq(share(_a), share(_b)) ==> minus(share(_a), share(_b)) == share(_a - _b)
    }
    axiom axCanJoin { forall _a: Rational, _b: Rational :: { joinable(share(_a), share(_b)) }
        valid_share(_a) && valid_share(_b) ==> (joinable(share(_a), share(_b)) == valid_share(_a + _b))
    }
    axiom axGeq { forall _a: Rational, _b: Rational :: { geq(share(_a), share(_b)) }
        valid_share(_a) && valid_share(_b) ==> (geq(share(_a), share(_b)) <==> valid_share(_a - _b))
    }
    axiom axMul { forall _a: Rational, _b: Rational :: {times(share(_a), share(_b))} times(share(_a), share(_b)) == share(_a * _b)}

    axiom axJoinComm {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == plus(_q, _p)}
    axiom axJoinAssoc {forall _p: Perm, _q: Perm, _r: Perm :: {plus(plus(_p, _q), _r)} plus(plus(_p, _q), _r) == plus(_p, plus(_q, _r))}
    axiom axJoinCancel { forall _p: Perm, _q: Perm, _x: Perm :: {plus(_p, _x), plus(_q, _x)} plus(_p, _x) == plus(_q, _x) ==> _p == _q}

    axiom axUnitGeq { forall _p: Perm :: {geq(_p, unit())} geq(_p, unit())}
    axiom axUnitGeq2 { forall _p: Perm :: {geq(unit(),_p)} geq(unit(),_p) <==> _p == unit()}
    axiom axFullGeq { forall _p: Perm :: {geq(full(),_p)} geq(full(),_p)}
    axiom axFullGeq2 { forall _p: Perm :: {geq(_p, full())} geq(_p, full()) <==> _p == full()}
    axiom axGeqId { forall _p: Perm :: {geq(_p, _p)} geq(_p, _p)}
    axiom axMinusId { forall _p: Perm :: {minus(_p, _p)} minus(_p, _p) == unit()}


    axiom axUnitJoin { forall _p: Perm :: {plus(unit(),_p)} plus(unit(),_p) == _p}
    axiom axUnitJoinable { forall _p: Perm :: {joinable(_p, unit())} joinable(_p, unit())}
    axiom axJoinableComm { forall _p: Perm, _q: Perm :: {joinable(_p, _q)} joinable(_p, _q) == joinable(_q,_p)}
    axiom axTimes0 { forall _p: Perm :: {times(unit(),_p)} times(unit(),_p) == unit()}
    axiom axTimes1 { forall _p: Perm :: {times(full(),_p)} times(full(),_p) == _p}

    axiom axGeqPlus { forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(_a, _x)}
    axiom axGeqMinus {forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(minus(_a, _y), _x)}
    axiom axMinusUneq { forall _p: Perm, _q: Perm :: {geq(_p, _q)} geq(_p, _q) && _p != _q ==> minus(_p, _q) != unit()}

    axiom axPositive {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == unit() ==> _p == unit() && _q == unit()}
    axiom axPlusGeq {forall _p: Perm, _q: Perm :: {geq(plus(_p, _q), _p)} /*joinable(_p, _q) ==>*/ geq(plus(_p, _q), _p)}
    axiom axMinusCancel {forall _p: Perm, _q: Perm :: {minus(plus(_p, _q), _q)} minus(plus(_p, _q), _q) == _p}

}


domain _Scalar { //Fractional scalars
    function zeroS(): Scalar 
    function oneS(): Scalar
    function plusS(_x: Scalar, _y: Scalar): Scalar
    function minusS(_x: Scalar, _y: Scalar): Scalar
    function geqS(_x: Scalar, _y: Scalar): Bool
    //function joinable(_x: Perm, _y: Perm): Bool //not needed, joinability depends on perms' joinable predicate

    function timesS(_x: Scalar, _y: Scalar): Scalar
    function applyS(_x: Scalar, _y: Perm): Perm
    //Auxiliary functions
//Integer scalars
    function stack(_r: Rational) : Scalar
    axiom axStack0 { stack(0/1) == zeroS()}
    axiom axStack1 { stack(1/1) == oneS() }
    axiom axPlusStack { forall _n: Rational, _m: Rational :: {plusS(stack(_n), stack(_m))} _m >= 0/1 ==> _n >= 0/1 ==> plusS(stack(_n), stack(_m)) == stack(_m + _n)}
    axiom axGeqStack { forall _n: Rational, _m: Rational :: {geqS(stack(_n), stack(_m))} _m >= 0/1 ==> _n >= 0/1 ==> geqS(stack(_n), stack(_m)) <==> _n >= _m}
    axiom axMinusStack { forall _n: Rational, _m: Rational ::{minusS(stack(_n), stack(_m))} _m >= 0/1 ==> _n >= 0/1 ==> geqS(stack(_n), stack(_m)) ==> minusS(stack(_n), stack(_m)) == stack(_n - _m)}
    axiom axStackApply { forall _p: Rational, _n: Rational :: {applyS(stack(_n), share(_p))} valid_share(_n * _p) ==> applyS(stack(_n), share(_p)) == share(_n * _p)}
    axiom axStackTimes { forall _n: Rational, _m: Rational :: {timesS(stack(_n), stack(_m))} _m >= 0/1 ==> _n >= 0/1 ==> timesS(stack(_n), stack(_m)) == stack(_m * _n)}

//PLUS
    axiom axPlusZero{ forall _s: Scalar :: {plusS(zeroS(),_s)} plusS(zeroS(),_s) == _s}
    axiom axPlusComm {forall _s: Scalar, _t: Scalar :: {plusS(_s, _t)} plusS(_s, _t) == plusS(_t, _s)}

//APPLY
//one = identity function, zero = constant unit() function
    axiom applyZero { forall _p: Perm :: {applyS(zeroS(), _p)} applyS(zeroS(), _p) == unit() }
    axiom applyOne { forall _p: Perm :: {applyS(oneS(), _p)} applyS(oneS(), _p) == _p }


//TIMES

    axiom axTimes0S { forall _s: Scalar :: {timesS(zeroS(), _s)} timesS(zeroS(),_s) == zeroS()}
    axiom axTimes1S { forall _s: Scalar :: {timesS(oneS(),_s)} timesS(oneS(),_s) == _s}
    axiom axTimesComm {forall _s: Scalar, _t: Scalar :: {timesS(_s, _t)} timesS(_s, _t) == timesS(_t, _s)}

//GEQ
    axiom axGeqZero { forall _s: Scalar :: {geqS(_s, zeroS())} geqS(_s, zeroS())}
//MINUS
    axiom axMinusZero { forall _s: Scalar :: {geqS(_s, zeroS())} geqS(_s, zeroS())}

    //additional axioms
    axiom axGeqPlusS { forall _a: Scalar, _x: Scalar, _y: Scalar :: {geqS(_a, plusS(_x, _y))} geqS(_a, plusS(_x, _y)) ==> geqS(_a, _x)}
    axiom axgeqSMinusS {forall _a: Scalar, _x: Scalar, _y: Scalar :: {geqS(_a, plusS(_x, _y))} geqS(_a, plusS(_x, _y)) ==> geqS(minusS(_a, _y), _x)}
    axiom axMinusUneqS { forall _p: Scalar, _q: Scalar :: {geqS(_p, _q)} geqS(_p, _q) && _p != _q ==> minusS(_p, _q) != zeroS()}

    axiom axPositiveS {forall _p: Scalar, _q: Scalar :: {plusS(_p, _q)} plusS(_p, _q) == zeroS() ==> _p == zeroS() && _q == zeroS()}
    axiom axPlusgeqS {forall _p: Scalar, _q: Scalar :: {geqS(plusS(_p, _q), _p)}geqS(plusS(_p, _q), _p)}
    axiom axMinusCancelS {forall _p: Scalar, _q: Scalar :: {minusS(plusS(_p, _q), _q)} minusS(plusS(_p, _q), _q) == _p}

}