// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field Fib__input: Int

field Fib__output: Int

function Fib__fib(n: Int): Int
{
  (n < 2 ? 1 : Fib__fib(n - 1) + Fib__fib(n - 2))
}

predicate Fib__joinToken(diz: Ref) 

method Fib__forkOperator(diz: Ref, current_thread_id: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(diz.Fib__input, 1 / 10)
  requires acc(diz.Fib__output, write)
  ensures acc(Fib__joinToken(diz), write)
{
  inhale false
}

method Fib__joinOperator(diz: Ref, current_thread_id: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(Fib__joinToken(diz), write)
  ensures acc(diz.Fib__input, 1 / 10)
  ensures acc(diz.Fib__output, write)
  ensures diz.Fib__output == Fib__fib(diz.Fib__input)
{
  inhale false
}

method Fib__run(diz: Ref, current_thread_id: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(diz.Fib__input, 1 / 10)
  requires acc(diz.Fib__output, write)
  ensures acc(diz.Fib__input, 1 / 10)
  ensures acc(diz.Fib__output, write)
  ensures diz.Fib__output == Fib__fib(diz.Fib__input)
{
  var f2: Ref
  var f1: Ref
  var __flatten_1: Int
  var __flatten_2: Ref
  var __flatten_3: Ref
  var __flatten_8: Int
  var __flatten_10: Int
  var __flatten_17: Int
  if (diz.Fib__input < 2) {
    __flatten_1 := 1
    __flatten_10 := __flatten_1
    diz.Fib__output := __flatten_10
  } else {
    __flatten_2 := Fib__Fib(current_thread_id, diz.Fib__input - 1)
    f1 := __flatten_2
    __flatten_3 := Fib__Fib(current_thread_id, diz.Fib__input - 2)
    f2 := __flatten_3
    Fib__forkOperator(f1, current_thread_id)
    Fib__forkOperator(f2, current_thread_id)
    Fib__joinOperator(f1, current_thread_id)
    Fib__joinOperator(f2, current_thread_id)
    __flatten_8 := f1.Fib__output + f2.Fib__output
    __flatten_17 := __flatten_8
    diz.Fib__output := __flatten_17
  }
}

method Fib__Fib(current_thread_id: Int, n: Int) returns (sys__result: Ref)
  requires current_thread_id >= 0
  ensures sys__result != null
  ensures acc(sys__result.Fib__input, write)
  ensures acc(sys__result.Fib__output, write)
  ensures sys__result.Fib__input == n
{
  var diz: Ref
  var __flatten_9: Int
  var __flatten_18: Int
  diz := new(Fib__input, Fib__output)
  __flatten_9 := n
  __flatten_18 := __flatten_9
  diz.Fib__input := __flatten_18
  sys__result := diz
  assert (sys__result != null) && acc(sys__result.Fib__input, write) && acc(sys__result.Fib__output, write) && (sys__result.Fib__input == n)
  inhale false
}
//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axUnitJoinable { forall p: Perm :: {joinable(p, unit())} joinable(p, unit())}
    axiom axJoinableComm { forall p: Perm, q: Perm :: {joinable(p, q)} joinable(p, q) == joinable(q, p)}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}

    axiom axGeqPlus { forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(a, x)}
    axiom axGeqMinus {forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) <==> geq(minus(a, y), x)}

}
