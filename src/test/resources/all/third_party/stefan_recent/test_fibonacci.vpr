// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field Fib__input: Int

field Fib__output: Int

function Fib__fib(n: Int): Int
{
  (n < 2 ? 1 : Fib__fib(n - 1) + Fib__fib(n - 2))
}

predicate Fib__joinToken(diz: Ref) 

method Fib__forkOperator(diz: Ref, current_thread_id: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(diz.Fib__input, 1 / 10)
  requires acc(diz.Fib__output, write)
  ensures acc(Fib__joinToken(diz), write)
{
  inhale false
}

method Fib__joinOperator(diz: Ref, current_thread_id: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(Fib__joinToken(diz), write)
  ensures acc(diz.Fib__input, 1 / 10)
  ensures acc(diz.Fib__output, write)
  ensures diz.Fib__output == Fib__fib(diz.Fib__input)
{
  inhale false
}

method Fib__run(diz: Ref, current_thread_id: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(diz.Fib__input, 1 / 10)
  requires acc(diz.Fib__output, write)
  ensures acc(diz.Fib__input, 1 / 10)
  ensures acc(diz.Fib__output, write)
  ensures diz.Fib__output == Fib__fib(diz.Fib__input)
{
  var f2: Ref
  var f1: Ref
  var __flatten_1: Int
  var __flatten_2: Ref
  var __flatten_3: Ref
  var __flatten_8: Int
  var __flatten_10: Int
  var __flatten_17: Int
  if (diz.Fib__input < 2) {
    __flatten_1 := 1
    __flatten_10 := __flatten_1
    diz.Fib__output := __flatten_10
  } else {
    __flatten_2 := Fib__Fib(current_thread_id, diz.Fib__input - 1)
    f1 := __flatten_2
    __flatten_3 := Fib__Fib(current_thread_id, diz.Fib__input - 2)
    f2 := __flatten_3
    Fib__forkOperator(f1, current_thread_id)
    Fib__forkOperator(f2, current_thread_id)
    Fib__joinOperator(f1, current_thread_id)
    Fib__joinOperator(f2, current_thread_id)
    __flatten_8 := f1.Fib__output + f2.Fib__output
    __flatten_17 := __flatten_8
    diz.Fib__output := __flatten_17
  }
}

method Fib__Fib(current_thread_id: Int, n: Int) returns (sys__result: Ref)
  requires current_thread_id >= 0
  ensures sys__result != null
  ensures acc(sys__result.Fib__input, write)
  ensures acc(sys__result.Fib__output, write)
  ensures sys__result.Fib__input == n
{
  var diz: Ref
  var __flatten_9: Int
  var __flatten_18: Int
  diz := new(Fib__input, Fib__output)
  __flatten_9 := n
  __flatten_18 := __flatten_9
  diz.Fib__input := __flatten_18
  sys__result := diz
  assert (sys__result != null) && acc(sys__result.Fib__input, write) && acc(sys__result.Fib__output, write) && (sys__result.Fib__input == n)
  inhale false
}
//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(_x: Perm, _y: Perm): Perm
    function minus(_x: Perm, _y: Perm): Perm
    function geq(_x: Perm, _y: Perm): Bool
    function joinable(_x: Perm, _y: Perm): Bool

    function times(_x: Perm, _y: Perm): Perm

    //Auxiliary functions
    function share(_x: Rational): Perm
    function valid_share(_x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall _a: Int, _b: Int :: {biConstr(_a, _b)} biConstr(_a, _b) == share(_a/_b)}


    axiom axValid { forall _x: Rational :: {valid_share(_x)}
        valid_share(_x) <==> (_x >= 0/1 && _x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall _a: Rational, _b: Rational :: { share(_a), share(_b) }
        share(_a) == share(_b) ==> _a == _b
    }
    axiom axPlus { forall _a: Rational, _b: Rational :: { plus(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) ==> plus(share(_a), share(_b)) == share(_a + _b)
    }
    axiom axMinus { forall _a: Rational, _b: Rational :: { minus(share(_a), share(_b)) }
        geq(share(_a), share(_b)) ==> minus(share(_a), share(_b)) == share(_a - _b)
    }
    axiom axCanJoin { forall _a: Rational, _b: Rational :: { joinable(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) <==> valid_share(_a) && valid_share(_b) && valid_share(_a + _b)
    }
    axiom axGeq { forall _a: Rational, _b: Rational :: { geq(share(_a), share(_b)) }
        geq(share(_a), share(_b)) <==> valid_share(_a) && valid_share(_b) && valid_share(_a - _b)
    }
    axiom axMul { forall _a: Rational, _b: Rational :: {times(share(_a), share(_b))} times(share(_a), share(_b)) == share(_a * _b)}

    axiom axJoinComm {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == plus(_q, _p)}
    axiom axJoinAssoc {forall _p: Perm, _q: Perm, _r: Perm :: {plus(plus(_p, _q), _r)} plus(plus(_p, _q), _r) == plus(_p, plus(_q, _r))}
    axiom axJoinCancel { forall _p: Perm, _q: Perm, _x: Perm :: {plus(_p, _x), plus(_q, _x)} plus(_p, _x) == plus(_q, _x) ==> _p == _q}

    axiom axUnitGeq { forall _p: Perm :: {geq(_p, unit())} geq(_p, unit())}
    axiom axUnitGeq2 { forall _p: Perm :: {geq(unit(),_p)} geq(unit(),_p) <==> _p == unit()}
    axiom axFullGeq { forall _p: Perm :: {geq(full(),_p)} geq(full(),_p)}
    axiom axFullGeq2 { forall _p: Perm :: {geq(_p, full())} geq(_p, full()) <==> _p == full()}
    axiom axGeqId { forall _p: Perm :: {geq(_p, _p)} geq(_p, _p)}
    axiom axMinusId { forall _p: Perm :: {minus(_p, _p)} minus(_p, _p) == unit()}


    axiom axUnitJoin { forall _p: Perm :: {plus(unit(),_p)} plus(unit(),_p) == _p}
    axiom axUnitJoinable { forall _p: Perm :: {joinable(_p, unit())} joinable(_p, unit())}
    axiom axJoinableComm { forall _p: Perm, _q: Perm :: {joinable(_p, _q)} joinable(_p, _q) == joinable(_q,_p)}
    axiom axTimes0 { forall _p: Perm :: {times(unit(),_p)} times(unit(),_p) == unit()}
    axiom axTimes1 { forall _p: Perm :: {times(full(),_p)} times(full(),_p) == _p}

    axiom axGeqPlus { forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(_a, _x)}
    axiom axGeqMinus {forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(minus(_a, _y), _x)}
    axiom axMinusUneq { forall _p: Perm, _q: Perm :: {geq(_p, _q)} geq(_p, _q) && _p != _q ==> minus(_p, _q) != unit()}

    axiom axPositive {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == unit() ==> _p == unit() && _q == unit()}
    axiom axPlusGeq {forall _p: Perm, _q: Perm :: {geq(plus(_p, _q), _p)} joinable(_p, _q) ==> geq(plus(_p, _q), _p)}
    axiom axMinusCancel {forall _p: Perm, _q: Perm :: {minus(plus(_p, _q), _q)} minus(plus(_p, _q), _q) == _p}

}
