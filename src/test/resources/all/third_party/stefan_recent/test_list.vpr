// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field node__val: Int

field node__next: Ref

function node__contents(diz: Ref): Seq[Int]
  requires diz != null
  requires acc(node__state(diz), write)
{
  (unfolding acc(node__state(diz), write) in (diz.node__next == null ? Seq(diz.node__val) : Seq(diz.node__val) ++ node__contents(diz.node__next)))
}

predicate node__state(diz: Ref) {
  acc(diz.node__val, write) && acc(diz.node__next, write) && ((diz.node__next != null) ==> acc(node__state(diz.node__next), write))
}

method node__node(current_thread_id: Int, v: Int, n: Ref) returns (sys__result: Ref)
  requires current_thread_id >= 0
  requires (n != null) ==> acc(node__state(n), write)
  ensures sys__result != null
  ensures acc(node__state(sys__result), write)
  ensures node__contents(sys__result) == (n == null ? Seq(v) : Seq(v) ++ old(node__contents(n)))
{
  var diz: Ref
  var __flatten_1: Int
  var __flatten_2: Ref
  var __flatten_4: Int
  var __flatten_5: Ref
  diz := new(node__val, node__next)
  __flatten_1 := v
  __flatten_4 := __flatten_1
  diz.node__val := __flatten_4
  __flatten_2 := n
  __flatten_5 := __flatten_2
  diz.node__next := __flatten_5
  fold acc(node__state(diz), write)
  sys__result := diz
  assert (sys__result != null) && acc(node__state(sys__result), write) && (node__contents(sys__result) == (n == null ? Seq(v) : Seq(v) ++ old(node__contents(n))))
  inhale false
}

method node__main(diz: Ref, current_thread_id: Int)
  requires diz != null
  requires current_thread_id >= 0
{
  var tmp: Seq[Int]
  var l: Ref
  var __flatten_3: Ref
  tmp := Seq(1, 2, 3)
  assert tmp == Seq(1) ++ Seq(2, 3)
  assert tmp[0] == 1
  assert tmp[1..] == Seq(2, 3)
  __flatten_3 := node__node(current_thread_id, 37, null)
  l := __flatten_3
  assert node__contents(l) == Seq(37)
  assert (37 in node__contents(l))
}
//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axUnitJoinable { forall p: Perm :: {joinable(p, unit())} joinable(p, unit())}
    axiom axJoinableComm { forall p: Perm, q: Perm :: {joinable(p, q)} joinable(p, q) == joinable(q, p)}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}

    axiom axGeqPlus { forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(a, x)}
    axiom axGeqMinus {forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) && joinable(x, y) <==> geq(minus(a, y), x) && geq(a, y)}

}
