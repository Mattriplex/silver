// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field Tree__data: Int

field Tree__left: Ref

field Tree__right: Ref

function Tree__contents(t: Ref): Seq[Int]
  requires (t != null) ==> acc(Tree__state(t), write)
  ensures (t != null) ==> (|result| > 0)
{
  (t == null ? Seq[Int]() : (unfolding acc(Tree__state(t), write) in Tree__contents(t.Tree__left) ++ Seq(t.Tree__data) ++ Tree__contents(t.Tree__right)))
}

predicate Tree__state(diz: Ref) {
  acc(diz.Tree__data, write) && acc(diz.Tree__left, write) && acc(diz.Tree__right, write) && ((diz.Tree__left != null) ==> acc(Tree__state(diz.Tree__left), write)) && ((diz.Tree__right != null) ==> acc(Tree__state(diz.Tree__right), write))
}

method Tree__del_min(diz: Ref, current_thread_id: Int, t: Ref) returns (sys__result: Ref)
  requires diz != null
  requires current_thread_id >= 0
  requires t != null
  requires acc(Tree__state(t), write)
  ensures (sys__result != null) ==> acc(Tree__state(sys__result), write)
  ensures Tree__contents(sys__result) == old(Tree__contents(t))[1..]
{
  var __flatten_1: Ref
  var __flatten_2: Ref
  var __flatten_3: Ref
  var __flatten_4: Ref
  var __flatten_7: Ref
  unfold acc(Tree__state(t), write)
  if (t.Tree__left == null) {
    assert Tree__contents(t.Tree__left) == Seq[Int]()
    __flatten_1 := t.Tree__right
    sys__result := __flatten_1
    assert ((sys__result != null) ==> acc(Tree__state(sys__result), write)) && (Tree__contents(sys__result) == old(Tree__contents(t))[1..])
    inhale false
  } else {
    __flatten_3 := Tree__del_min(diz, current_thread_id, t.Tree__left)
    __flatten_2 := __flatten_3
    __flatten_7 := __flatten_2
    t.Tree__left := __flatten_7
    fold acc(Tree__state(t), write)
    __flatten_4 := t
    sys__result := __flatten_4
    assert ((sys__result != null) ==> acc(Tree__state(sys__result), write)) && (Tree__contents(sys__result) == old(Tree__contents(t))[1..])
    inhale false
  }
}

method Tree__Tree(current_thread_id: Int) returns (sys__result: Ref)
  requires current_thread_id >= 0
  ensures sys__result != null
  ensures acc(sys__result.Tree__data, write) && (sys__result.Tree__data == 0)
  ensures acc(sys__result.Tree__left, write) && (sys__result.Tree__left == null)
  ensures acc(sys__result.Tree__right, write) && (sys__result.Tree__right == null)
{
  var diz: Ref
  var __flatten_5: Int
  var __flatten_8: Int
  diz := new(Tree__data, Tree__left, Tree__right)
  __flatten_5 := 0
  __flatten_8 := __flatten_5
  diz.Tree__data := __flatten_8
  diz.Tree__left := null
  diz.Tree__right := null
  sys__result := diz
  assert (sys__result != null) && (acc(sys__result.Tree__data, write) && (sys__result.Tree__data == 0)) && (acc(sys__result.Tree__left, write) && (sys__result.Tree__left == null)) && (acc(sys__result.Tree__right, write) && (sys__result.Tree__right == null))
  inhale false
}
//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axUnitJoinable { forall p: Perm :: {joinable(p, unit())} joinable(p, unit())}
    axiom axJoinableComm { forall p: Perm, q: Perm :: {joinable(p, q)} joinable(p, q) == joinable(q, p)}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}

    axiom axGeqPlus { forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(a, x)}
    axiom axGeqMinus {forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(minus(a, y), x)}
    axiom axMinusUneq { forall p: Perm, q: Perm :: {geq(p, q)} geq(p, q) && p != q ==> minus(p, q) != unit()}

}
