// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field Main__q1: Ref

field Main__q2: Ref

field Worker__q1: Ref

field Worker__q2: Ref

field Queue__data: Int

field Queue__used: Bool

predicate Worker__joinToken(diz: Ref) 

predicate Queue__lock_held(diz: Ref) 

predicate Queue__lock_invariant(diz: Ref) {
  acc(diz.Queue__used, write) && acc(diz.Queue__data, write)
}

method Main__Main(current_thread_id: Int) returns (sys__result: Ref)
  requires current_thread_id >= 0
  ensures sys__result != null
  ensures acc(sys__result.Main__q1, wildcard)
  ensures sys__result.Main__q1 != null
  ensures acc(sys__result.Main__q2, wildcard)
  ensures sys__result.Main__q2 != null
{
  var diz: Ref
  var __flatten_1: Ref
  var __flatten_2: Ref
  var __flatten_3: Ref
  var __flatten_4: Ref
  var __flatten_24: Ref
  var __flatten_26: Ref
  diz := new(Main__q1, Main__q2)
  __flatten_2 := Queue__Queue(current_thread_id)
  __flatten_1 := __flatten_2
  __flatten_24 := __flatten_1
  diz.Main__q1 := __flatten_24
  __flatten_4 := Queue__Queue(current_thread_id)
  __flatten_3 := __flatten_4
  __flatten_26 := __flatten_3
  diz.Main__q2 := __flatten_26
  Queue__put(diz.Main__q1, current_thread_id, 1)
  Queue__put(diz.Main__q2, current_thread_id, 2)
  sys__result := diz
  assert (sys__result != null) && acc(sys__result.Main__q1, wildcard) && (sys__result.Main__q1 != null) && acc(sys__result.Main__q2, wildcard) && (sys__result.Main__q2 != null)
  inhale false
}

method Main__main(diz: Ref, current_thread_id: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(diz.Main__q1, wildcard)
  requires diz.Main__q1 != null
  requires acc(diz.Main__q2, wildcard)
  requires diz.Main__q2 != null
{
  var w1: Ref
  var __flatten_7: Ref
  var w2: Ref
  var __flatten_8: Ref
  __flatten_7 := Worker__Worker(current_thread_id, diz.Main__q1, diz.Main__q2)
  w1 := __flatten_7
  __flatten_8 := Worker__Worker(current_thread_id, diz.Main__q2, diz.Main__q1)
  w2 := __flatten_8
  Worker__forkOperator(w1, current_thread_id)
  Worker__forkOperator(w2, current_thread_id)
  Worker__joinOperator(w1, current_thread_id)
  Worker__joinOperator(w2, current_thread_id)
}

method Worker__Worker(current_thread_id: Int, q1: Ref, q2: Ref) returns (sys__result: Ref)
  requires current_thread_id >= 0
  ensures sys__result != null
  ensures acc(sys__result.Worker__q1, wildcard)
  ensures sys__result.Worker__q1 == q1
  ensures acc(sys__result.Worker__q2, wildcard)
  ensures sys__result.Worker__q2 == q2
{
  var diz: Ref
  var __flatten_13: Ref
  var __flatten_14: Ref
  var __flatten_35: Ref
  var __flatten_36: Ref
  diz := new(Worker__q1, Worker__q2)
  __flatten_13 := q1
  __flatten_35 := __flatten_13
  diz.Worker__q1 := __flatten_35
  __flatten_14 := q2
  __flatten_36 := __flatten_14
  diz.Worker__q2 := __flatten_36
  sys__result := diz
  assert (sys__result != null) && acc(sys__result.Worker__q1, wildcard) && (sys__result.Worker__q1 == q1) && acc(sys__result.Worker__q2, wildcard) && (sys__result.Worker__q2 == q2)
  inhale false
}

method Worker__forkOperator(diz: Ref, current_thread_id: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(diz.Worker__q1, wildcard)
  requires diz.Worker__q1 != null
  requires acc(diz.Worker__q2, wildcard)
  requires diz.Worker__q2 != null
  ensures acc(Worker__joinToken(diz), write)
{
  inhale false
}

method Worker__joinOperator(diz: Ref, current_thread_id: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(Worker__joinToken(diz), write)
{
  inhale false
}

method Worker__run(diz: Ref, current_thread_id: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(diz.Worker__q1, wildcard)
  requires diz.Worker__q1 != null
  requires acc(diz.Worker__q2, wildcard)
  requires diz.Worker__q2 != null
{
  var tmp: Int
  var i: Int
  var __flatten_15: Int
  i := 0
  while (i < 4)
    invariant (0 <= i) && (i <= 4)
    invariant acc(diz.Worker__q1, wildcard)
    invariant diz.Worker__q1 != null
    invariant acc(diz.Worker__q2, wildcard)
    invariant diz.Worker__q2 != null 
  {
    __flatten_15 := Queue__take(diz.Worker__q1, current_thread_id)
    tmp := __flatten_15
    tmp := tmp + 2
    Queue__put(diz.Worker__q2, current_thread_id, tmp)
    i := i + 1
  }
}

method Queue__Queue(current_thread_id: Int) returns (sys__result: Ref)
  requires current_thread_id >= 0
  ensures sys__result != null
{
  var diz: Ref
  var __flatten_17: Int
  var __flatten_18: Bool
  var __flatten_39: Int
  var __flatten_40: Bool
  diz := new(Queue__data, Queue__used)
  __flatten_17 := 37
  __flatten_39 := __flatten_17
  diz.Queue__data := __flatten_39
  __flatten_18 := false
  __flatten_40 := __flatten_18
  diz.Queue__used := __flatten_40
  fold acc(Queue__lock_invariant(diz), write)
  exhale acc(Queue__lock_invariant(diz), write)
  sys__result := diz
  assert sys__result != null
  inhale false
}

method Queue__put(diz: Ref, current_thread_id: Int, x: Int)
  requires diz != null
  requires current_thread_id >= 0
{
  var __flatten_19: Bool
  var __flatten_20: Int
  var __flatten_41: Bool
  var __flatten_42: Int
  inhale acc(Queue__lock_invariant(diz), write)
  unfold acc(Queue__lock_invariant(diz), write)
  inhale acc(Queue__lock_held(diz), write)
  while (diz.Queue__used)
    invariant acc(diz.Queue__used, write)
    invariant acc(diz.Queue__data, write)
    invariant acc(Queue__lock_held(diz), write) 
  {
    fold acc(Queue__lock_invariant(diz), write)
    exhale acc(Queue__lock_invariant(diz), write)
    assert acc(Queue__lock_held(diz), write)
    inhale acc(Queue__lock_invariant(diz), write)
    unfold acc(Queue__lock_invariant(diz), write)
  }
  __flatten_19 := true
  __flatten_41 := __flatten_19
  diz.Queue__used := __flatten_41
  __flatten_20 := x
  __flatten_42 := __flatten_20
  diz.Queue__data := __flatten_42
  assert acc(Queue__lock_held(diz), write)
  exhale acc(Queue__lock_held(diz), write)
  fold acc(Queue__lock_invariant(diz), write)
  exhale acc(Queue__lock_invariant(diz), write)
}

method Queue__take(diz: Ref, current_thread_id: Int) returns (sys__result: Int)
  requires diz != null
  requires current_thread_id >= 0
{
  var res: Int
  var __flatten_21: Bool
  var __flatten_22: Int
  var __flatten_43: Bool
  inhale acc(Queue__lock_invariant(diz), write)
  unfold acc(Queue__lock_invariant(diz), write)
  inhale acc(Queue__lock_held(diz), write)
  while (!diz.Queue__used)
    invariant acc(diz.Queue__used, write)
    invariant acc(diz.Queue__data, write)
    invariant acc(Queue__lock_held(diz), write) 
  {
    fold acc(Queue__lock_invariant(diz), write)
    exhale acc(Queue__lock_invariant(diz), write)
    assert acc(Queue__lock_held(diz), write)
    inhale acc(Queue__lock_invariant(diz), write)
    unfold acc(Queue__lock_invariant(diz), write)
  }
  res := diz.Queue__data
  __flatten_21 := false
  __flatten_43 := __flatten_21
  diz.Queue__used := __flatten_43
  assert acc(Queue__lock_held(diz), write)
  exhale acc(Queue__lock_held(diz), write)
  fold acc(Queue__lock_invariant(diz), write)
  exhale acc(Queue__lock_invariant(diz), write)
  __flatten_22 := res
  sys__result := __flatten_22
  assert true
  inhale false
}
//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axUnitJoinable { forall p: Perm :: {joinable(p, unit())} joinable(p, unit())}
    axiom axJoinableComm { forall p: Perm, q: Perm :: {joinable(p, q)} joinable(p, q) == joinable(q, p)}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}

    axiom axGeqPlus { forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(a, x)}
    axiom axGeqMinus {forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) && joinable(x, y) <==> geq(minus(a, y), x) && geq(a, y)}

}
