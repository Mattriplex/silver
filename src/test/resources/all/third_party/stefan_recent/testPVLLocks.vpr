// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/
   //:: IgnoreFile(/carbon/issue/999/)

field Main__q1: Ref

field Main__q2: Ref

field Worker__q1: Ref

field Worker__q2: Ref

field Queue__data: Int

field Queue__used: Bool

predicate Worker__joinToken(diz: Ref) 

predicate Queue__lock_held(diz: Ref) 

predicate Queue__lock_invariant(diz: Ref) {
  acc(diz.Queue__used, write) && acc(diz.Queue__data, write)
}

method Main__Main(current_thread_id: Int) returns (sys__result: Ref)
  requires current_thread_id >= 0
  ensures sys__result != null
  ensures acc(sys__result.Main__q1, wildcard)
  ensures sys__result.Main__q1 != null
  ensures acc(sys__result.Main__q2, wildcard)
  ensures sys__result.Main__q2 != null
{
  var diz: Ref
  var __flatten_1: Ref
  var __flatten_2: Ref
  var __flatten_3: Ref
  var __flatten_4: Ref
  var __flatten_24: Ref
  var __flatten_26: Ref
  diz := new(Main__q1, Main__q2)
  __flatten_2 := Queue__Queue(current_thread_id)
  __flatten_1 := __flatten_2
  __flatten_24 := __flatten_1
  diz.Main__q1 := __flatten_24
  __flatten_4 := Queue__Queue(current_thread_id)
  __flatten_3 := __flatten_4
  __flatten_26 := __flatten_3
  diz.Main__q2 := __flatten_26
  Queue__put(diz.Main__q1, current_thread_id, 1)
  Queue__put(diz.Main__q2, current_thread_id, 2)
  sys__result := diz
  assert (sys__result != null) && acc(sys__result.Main__q1, wildcard) && (sys__result.Main__q1 != null) && acc(sys__result.Main__q2, wildcard) && (sys__result.Main__q2 != null)
  inhale false
}

method Main__main(diz: Ref, current_thread_id: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(diz.Main__q1, wildcard)
  requires diz.Main__q1 != null
  requires acc(diz.Main__q2, wildcard)
  requires diz.Main__q2 != null
{
  var w1: Ref
  var __flatten_7: Ref
  var w2: Ref
  var __flatten_8: Ref
  __flatten_7 := Worker__Worker(current_thread_id, diz.Main__q1, diz.Main__q2)
  w1 := __flatten_7
  __flatten_8 := Worker__Worker(current_thread_id, diz.Main__q2, diz.Main__q1)
  w2 := __flatten_8
  Worker__forkOperator(w1, current_thread_id)
  Worker__forkOperator(w2, current_thread_id)
  Worker__joinOperator(w1, current_thread_id)
  Worker__joinOperator(w2, current_thread_id)
}

method Worker__Worker(current_thread_id: Int, q1: Ref, q2: Ref) returns (sys__result: Ref)
  requires current_thread_id >= 0
  ensures sys__result != null
  ensures acc(sys__result.Worker__q1, wildcard)
  ensures sys__result.Worker__q1 == q1
  ensures acc(sys__result.Worker__q2, wildcard)
  ensures sys__result.Worker__q2 == q2
{
  var diz: Ref
  var __flatten_13: Ref
  var __flatten_14: Ref
  var __flatten_35: Ref
  var __flatten_36: Ref
  diz := new(Worker__q1, Worker__q2)
  __flatten_13 := q1
  __flatten_35 := __flatten_13
  diz.Worker__q1 := __flatten_35
  __flatten_14 := q2
  __flatten_36 := __flatten_14
  diz.Worker__q2 := __flatten_36
  sys__result := diz
  assert (sys__result != null) && acc(sys__result.Worker__q1, wildcard) && (sys__result.Worker__q1 == q1) && acc(sys__result.Worker__q2, wildcard) && (sys__result.Worker__q2 == q2)
  inhale false
}

method Worker__forkOperator(diz: Ref, current_thread_id: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(diz.Worker__q1, wildcard)
  requires diz.Worker__q1 != null
  requires acc(diz.Worker__q2, wildcard)
  requires diz.Worker__q2 != null
  ensures acc(Worker__joinToken(diz))
{
  inhale false
}

method Worker__joinOperator(diz: Ref, current_thread_id: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(Worker__joinToken(diz))
{
  inhale false
}

method Worker__run(diz: Ref, current_thread_id: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(diz.Worker__q1, wildcard)
  requires diz.Worker__q1 != null
  requires acc(diz.Worker__q2, wildcard)
  requires diz.Worker__q2 != null
{
  var tmp: Int
  var i: Int
  var __flatten_15: Int
  i := 0
  while (i < 4)
    invariant (0 <= i) && (i <= 4)
    invariant acc(diz.Worker__q1, wildcard)
    invariant diz.Worker__q1 != null
    invariant acc(diz.Worker__q2, wildcard)
    invariant diz.Worker__q2 != null 
  {
    __flatten_15 := Queue__take(diz.Worker__q1, current_thread_id)
    tmp := __flatten_15
    tmp := tmp + 2
    Queue__put(diz.Worker__q2, current_thread_id, tmp)
    i := i + 1
  }
}

method Queue__Queue(current_thread_id: Int) returns (sys__result: Ref)
  requires current_thread_id >= 0
  ensures sys__result != null
{
  var diz: Ref
  var __flatten_17: Int
  var __flatten_18: Bool
  var __flatten_39: Int
  var __flatten_40: Bool
  diz := new(Queue__data, Queue__used)
  __flatten_17 := 37
  __flatten_39 := __flatten_17
  diz.Queue__data := __flatten_39
  __flatten_18 := false
  __flatten_40 := __flatten_18
  diz.Queue__used := __flatten_40
  fold acc(Queue__lock_invariant(diz))
  exhale acc(Queue__lock_invariant(diz))
  sys__result := diz
  assert sys__result != null
  inhale false
}

method Queue__put(diz: Ref, current_thread_id: Int, x: Int)
  requires diz != null
  requires current_thread_id >= 0
{
  var __flatten_19: Bool
  var __flatten_20: Int
  var __flatten_41: Bool
  var __flatten_42: Int
  inhale acc(Queue__lock_invariant(diz))
  unfold acc(Queue__lock_invariant(diz))
  inhale acc(Queue__lock_held(diz))
  while (diz.Queue__used)
    invariant acc(diz.Queue__used, write)
    invariant acc(diz.Queue__data, write)
    invariant acc(Queue__lock_held(diz)) 
  {
    fold acc(Queue__lock_invariant(diz))
    exhale acc(Queue__lock_invariant(diz))
    assert acc(Queue__lock_held(diz))
    inhale acc(Queue__lock_invariant(diz))
    unfold acc(Queue__lock_invariant(diz))
  }
  __flatten_19 := true
  __flatten_41 := __flatten_19
  diz.Queue__used := __flatten_41
  __flatten_20 := x
  __flatten_42 := __flatten_20
  diz.Queue__data := __flatten_42
  assert acc(Queue__lock_held(diz))
  exhale acc(Queue__lock_held(diz))
  fold acc(Queue__lock_invariant(diz))
  exhale acc(Queue__lock_invariant(diz))
}

method Queue__take(diz: Ref, current_thread_id: Int) returns (sys__result: Int)
  requires diz != null
  requires current_thread_id >= 0
{
  var res: Int
  var __flatten_21: Bool
  var __flatten_22: Int
  var __flatten_43: Bool
  inhale acc(Queue__lock_invariant(diz))
  unfold acc(Queue__lock_invariant(diz))
  inhale acc(Queue__lock_held(diz))
  while (!diz.Queue__used)
    invariant acc(diz.Queue__used, write)
    invariant acc(diz.Queue__data, write)
    invariant acc(Queue__lock_held(diz)) 
  {
    fold acc(Queue__lock_invariant(diz))
    exhale acc(Queue__lock_invariant(diz))
    assert acc(Queue__lock_held(diz))
    inhale acc(Queue__lock_invariant(diz))
    unfold acc(Queue__lock_invariant(diz))
  }
  res := diz.Queue__data
  __flatten_21 := false
  __flatten_43 := __flatten_21
  diz.Queue__used := __flatten_43
  assert acc(Queue__lock_held(diz))
  exhale acc(Queue__lock_held(diz))
  fold acc(Queue__lock_invariant(diz))
  exhale acc(Queue__lock_invariant(diz))
  __flatten_22 := res
  sys__result := __flatten_22
  assert true
  inhale false
}
//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(_x: Perm, _y: Perm): Perm
    function minus(_x: Perm, _y: Perm): Perm
    function geq(_x: Perm, _y: Perm): Bool
    function joinable(_x: Perm, _y: Perm): Bool

    function times(_x: Perm, _y: Perm): Perm

    //Auxiliary functions
    function share(_x: Rational): Perm
    function valid_share(_x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall _a: Int, _b: Int :: {biConstr(_a, _b)} biConstr(_a, _b) == share(_a/_b)}


    axiom axValid { forall _x: Rational :: {valid_share(_x)}
        valid_share(_x) <==> (_x >= 0/1 && _x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall _a: Rational, _b: Rational :: { share(_a), share(_b) }
        share(_a) == share(_b) ==> _a == _b
    }
    axiom axPlus { forall _a: Rational, _b: Rational :: { plus(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) ==> plus(share(_a), share(_b)) == share(_a + _b)
    }
    axiom axMinus { forall _a: Rational, _b: Rational :: { minus(share(_a), share(_b)) }
        geq(share(_a), share(_b)) ==> minus(share(_a), share(_b)) == share(_a - _b)
    }
    axiom axCanJoin { forall _a: Rational, _b: Rational :: { joinable(share(_a), share(_b)) }
        valid_share(_a) && valid_share(_b) ==> (joinable(share(_a), share(_b)) == valid_share(_a + _b))
    }
    axiom axGeq { forall _a: Rational, _b: Rational :: { geq(share(_a), share(_b)) }
        valid_share(_a) && valid_share(_b) ==> (geq(share(_a), share(_b)) <==> valid_share(_a - _b))
    }
    axiom axMul { forall _a: Rational, _b: Rational :: {times(share(_a), share(_b))} times(share(_a), share(_b)) == share(_a * _b)}

    axiom axJoinComm {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == plus(_q, _p)}
    axiom axJoinAssoc {forall _p: Perm, _q: Perm, _r: Perm :: {plus(plus(_p, _q), _r)} plus(plus(_p, _q), _r) == plus(_p, plus(_q, _r))}
    axiom axJoinCancel { forall _p: Perm, _q: Perm, _x: Perm :: {plus(_p, _x), plus(_q, _x)} plus(_p, _x) == plus(_q, _x) ==> _p == _q}

    axiom axUnitGeq { forall _p: Perm :: {geq(_p, unit())} geq(_p, unit())}
    axiom axUnitGeq2 { forall _p: Perm :: {geq(unit(),_p)} geq(unit(),_p) <==> _p == unit()}
    axiom axFullGeq { forall _p: Perm :: {geq(full(),_p)} geq(full(),_p)}
    axiom axFullGeq2 { forall _p: Perm :: {geq(_p, full())} geq(_p, full()) <==> _p == full()}
    axiom axGeqId { forall _p: Perm :: {geq(_p, _p)} geq(_p, _p)}
    axiom axMinusId { forall _p: Perm :: {minus(_p, _p)} minus(_p, _p) == unit()}


    axiom axUnitJoin { forall _p: Perm :: {plus(unit(),_p)} plus(unit(),_p) == _p}
    axiom axUnitJoinable { forall _p: Perm :: {joinable(_p, unit())} joinable(_p, unit())}
    axiom axJoinableComm { forall _p: Perm, _q: Perm :: {joinable(_p, _q)} joinable(_p, _q) == joinable(_q,_p)}
    axiom axTimes0 { forall _p: Perm :: {times(unit(),_p)} times(unit(),_p) == unit()}
    axiom axTimes1 { forall _p: Perm :: {times(full(),_p)} times(full(),_p) == _p}

    axiom axGeqPlus { forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(_a, _x)}
    axiom axGeqMinus {forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(minus(_a, _y), _x)}
    axiom axMinusUneq { forall _p: Perm, _q: Perm :: {geq(_p, _q)} geq(_p, _q) && _p != _q ==> minus(_p, _q) != unit()}

    axiom axPositive {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == unit() ==> _p == unit() && _q == unit()}
    axiom axPlusGeq {forall _p: Perm, _q: Perm :: {geq(plus(_p, _q), _p)} /*joinable(_p, _q) ==>*/ geq(plus(_p, _q), _p)}
    axiom axMinusCancel {forall _p: Perm, _q: Perm :: {minus(plus(_p, _q), _q)} minus(plus(_p, _q), _q) == _p}

}


domain _Scalar { //Fractional scalars
    function zeroS(): Scalar 
    function oneS(): Scalar
    function plusS(_x: Scalar, _y: Scalar): Scalar
    function minusS(_x: Scalar, _y: Scalar): Scalar
    function geqS(_x: Scalar, _y: Scalar): Bool
    //function joinable(_x: Perm, _y: Perm): Bool //not needed, joinability depends on perms' joinable predicate

    function timesS(_x: Scalar, _y: Scalar): Scalar
    function applyS(_x: Scalar, _y: Perm): Perm
    //Auxiliary functions
//Integer scalars
    function stack(_r: Rational) : Scalar
    axiom axStack0 { stack(0/1) == zeroS()}
    axiom axStack1 { stack(1/1) == oneS() }
    axiom axPlusStack { forall _n: Rational, _m: Rational :: {plusS(stack(_n), stack(_m))} _m >= 0/1 ==> _n >= 0/1 ==> plusS(stack(_n), stack(_m)) == stack(_m + _n)}
    axiom axGeqStack { forall _n: Rational, _m: Rational :: {geqS(stack(_n), stack(_m))} _m >= 0/1 ==> _n >= 0/1 ==> geqS(stack(_n), stack(_m)) <==> _n >= _m}
    axiom axMinusStack { forall _n: Rational, _m: Rational ::{minusS(stack(_n), stack(_m))} _m >= 0/1 ==> _n >= 0/1 ==> geqS(stack(_n), stack(_m)) ==> minusS(stack(_n), stack(_m)) == stack(_n - _m)}
    axiom axStackApply { forall _p: Rational, _n: Rational :: {applyS(stack(_n), share(_p))} valid_share(_n * _p) ==> applyS(stack(_n), share(_p)) == share(_n * _p)}
    axiom axStackTimes { forall _n: Rational, _m: Rational :: {timesS(stack(_n), stack(_m))} _m >= 0/1 ==> _n >= 0/1 ==> timesS(stack(_n), stack(_m)) == stack(_m * _n)}

//PLUS
    axiom axPlusZero{ forall _s: Scalar :: {plusS(zeroS(),_s)} plusS(zeroS(),_s) == _s}
    axiom axPlusComm {forall _s: Scalar, _t: Scalar :: {plusS(_s, _t)} plusS(_s, _t) == plusS(_t, _s)}

//APPLY
//one = identity function, zero = constant unit() function
    axiom applyZero { forall _p: Perm :: {applyS(zeroS(), _p)} applyS(zeroS(), _p) == unit() }
    axiom applyOne { forall _p: Perm :: {applyS(oneS(), _p)} applyS(oneS(), _p) == _p }


//TIMES

    axiom axTimes0S { forall _s: Scalar :: {timesS(zeroS(), _s)} timesS(zeroS(),_s) == zeroS()}
    axiom axTimes1S { forall _s: Scalar :: {timesS(oneS(),_s)} timesS(oneS(),_s) == _s}
    axiom axTimesComm {forall _s: Scalar, _t: Scalar :: {timesS(_s, _t)} timesS(_s, _t) == timesS(_t, _s)}

//GEQ
    axiom axGeqZero { forall _s: Scalar :: {geqS(_s, zeroS())} geqS(_s, zeroS())}
//MINUS
    axiom axMinusZero { forall _s: Scalar :: {geqS(_s, zeroS())} geqS(_s, zeroS())}

    //additional axioms
    axiom axGeqPlusS { forall _a: Scalar, _x: Scalar, _y: Scalar :: {geqS(_a, plusS(_x, _y))} geqS(_a, plusS(_x, _y)) ==> geqS(_a, _x)}
    axiom axgeqSMinusS {forall _a: Scalar, _x: Scalar, _y: Scalar :: {geqS(_a, plusS(_x, _y))} geqS(_a, plusS(_x, _y)) ==> geqS(minusS(_a, _y), _x)}
    axiom axMinusUneqS { forall _p: Scalar, _q: Scalar :: {geqS(_p, _q)} geqS(_p, _q) && _p != _q ==> minusS(_p, _q) != zeroS()}

    axiom axPositiveS {forall _p: Scalar, _q: Scalar :: {plusS(_p, _q)} plusS(_p, _q) == zeroS() ==> _p == zeroS() && _q == zeroS()}
    axiom axPlusgeqS {forall _p: Scalar, _q: Scalar :: {geqS(plusS(_p, _q), _p)}geqS(plusS(_p, _q), _p)}
    axiom axMinusCancelS {forall _p: Scalar, _q: Scalar :: {minusS(plusS(_p, _q), _q)} minusS(plusS(_p, _q), _q) == _p}

}