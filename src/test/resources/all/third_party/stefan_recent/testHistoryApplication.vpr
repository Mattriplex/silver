// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

//:: IgnoreFile(/carbon/issue/283/)
domain Process {
  
  function p_empty(): Process
  
  function p_merge(p1: Process, p2: Process): Process
  
  function p_seq(p1: Process, p2: Process): Process
  
  function p_incr(): Process
  
  function p_single(n: Int): Process
  
  function p_dual(n: Int, m: Int): Process
  
  axiom empty_1L {
    (forall p: Process :: p_merge(p_empty(), p) == p)
  }
  
  axiom empty_2L {
    (forall p: Process :: p_seq(p_empty(), p) == p)
  }
  
  axiom empty_2R {
    (forall p: Process :: p_seq(p, p_empty()) == p)
  }
  
  axiom seq_assoc {
    (forall p1: Process :: (forall p2: Process :: (forall p3: Process :: p_seq(p_seq(p1, p2), p3) == p_seq(p1, p_seq(p2, p3)))))
  }
  
  axiom single_def {
    (forall n: Int :: { p_single(n) } (n > 0 ? p_seq(p_incr(), p_single(n - 1)) : p_empty()) == p_single(n))
  }
  
  axiom dual_def {
    (forall n: Int, m: Int :: { p_dual(n, m) } p_merge(p_single(n), p_single(m)) == p_dual(n, m))
  }
  
  axiom lemma_post {
    (forall n: Int :: p_single(n) == (n > 0 ? p_seq(p_single(n - 1), p_incr()) : p_empty()))
  }
  
  axiom single_axiom_post {
    (forall m: Int, n: Int :: p_seq(p_single(m), p_single(n)) == p_single(m + n))
  }
}

field History__x_hist_value: Int

field History__x_hist_mode: Int

field History__x_hist_init: Int

field History__x_hist_act: Int

function History__free_get_x(diz: Ref): Int
  requires diz != null
  requires acc(diz.History__x_hist_value, wildcard)
{
  diz.History__x_hist_value
}

function History__hist_get_x(diz: Ref): Int
  requires diz != null
  requires acc(diz.History__x_hist_value, wildcard)
{
  diz.History__x_hist_value
}

predicate History__hist_do_incr(diz: Ref, frac: Perm, proc: Process) 

predicate History__hist_idle(diz: Ref, frac: Perm, proc: Process) 

method History__incr_begin(diz: Ref, current_thread_id: Int, frac: Perm, proc: Process)
  requires diz != null
  requires current_thread_id >= 0
  requires frac != none
  requires acc(History__hist_idle(diz, frac, proc), write)
  requires acc(diz.History__x_hist_value, write)
  requires acc(diz.History__x_hist_mode, write) && (diz.History__x_hist_mode == 1)
  ensures frac != none
  ensures acc(History__hist_do_incr(diz, frac, proc), write)
  ensures acc(diz.History__x_hist_value, write)
  ensures acc(diz.History__x_hist_mode, write) && (diz.History__x_hist_mode == 2)
  ensures diz.History__x_hist_value == old(diz.History__x_hist_value)
  ensures acc(diz.History__x_hist_act, write)
  ensures diz.History__x_hist_value == diz.History__x_hist_act
{
  inhale false
}

method History__incr_commit(diz: Ref, current_thread_id: Int, frac: Perm, proc: Process)
  requires diz != null
  requires current_thread_id >= 0
  requires frac != none
  requires acc(History__hist_do_incr(diz, frac, proc), write)
  requires acc(diz.History__x_hist_act, write)
  requires acc(diz.History__x_hist_value, write)
  requires acc(diz.History__x_hist_mode, write) && (diz.History__x_hist_mode == 2)
  requires diz.History__x_hist_value == diz.History__x_hist_act + 1
  ensures frac != none
  ensures acc(History__hist_idle(diz, frac, p_seq(proc, p_incr())), write)
  ensures acc(diz.History__x_hist_value, write)
  ensures acc(diz.History__x_hist_mode, write) && (diz.History__x_hist_mode == 1)
  ensures diz.History__x_hist_value == old(diz.History__x_hist_value)
{
  inhale false
}

method History__free_set_x(diz: Ref, current_thread_id: Int, value: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(diz.History__x_hist_value, write)
  requires acc(diz.History__x_hist_mode, 1 / 2) && (diz.History__x_hist_mode == 0)
  ensures acc(diz.History__x_hist_value, write) && (diz.History__x_hist_value == value)
  ensures acc(diz.History__x_hist_mode, 1 / 2) && (diz.History__x_hist_mode == 0)
{
  inhale false
}

method History__hist_set_x(diz: Ref, current_thread_id: Int, value: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(diz.History__x_hist_value, write)
  requires acc(diz.History__x_hist_mode, 1 / 2) && (diz.History__x_hist_mode == 2)
  ensures acc(diz.History__x_hist_value, write) && (diz.History__x_hist_value == value)
  ensures acc(diz.History__x_hist_mode, 1 / 2) && (diz.History__x_hist_mode == 2)
{
  inhale false
}

method History__begin_hist(diz: Ref, current_thread_id: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(diz.History__x_hist_value, write)
  requires acc(diz.History__x_hist_mode, write) && (diz.History__x_hist_mode == 0)
  requires acc(diz.History__x_hist_init, write)
  requires acc(diz.History__x_hist_act, write)
  ensures acc(diz.History__x_hist_value, write)
  ensures acc(diz.History__x_hist_mode, write) && (diz.History__x_hist_mode == 1)
  ensures acc(diz.History__x_hist_init, write)
  ensures diz.History__x_hist_value == old(diz.History__x_hist_value)
  ensures diz.History__x_hist_init == old(diz.History__x_hist_value)
  ensures acc(History__hist_idle(diz, write, p_empty()), write)
{
  inhale false
}

method History__split(diz: Ref, current_thread_id: Int, frac1: Perm, proc1: Process, frac2: Perm, proc2: Process)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(History__hist_idle(diz, frac1 + frac2, p_merge(proc1, proc2)), write)
  ensures acc(History__hist_idle(diz, frac1, proc1), write)
  ensures acc(History__hist_idle(diz, frac2, proc2), write)
{
  inhale false
}

method History__merge(diz: Ref, current_thread_id: Int, frac1: Perm, proc1: Process, frac2: Perm, proc2: Process)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(History__hist_idle(diz, frac1, proc1), write)
  requires acc(History__hist_idle(diz, frac2, proc2), write)
  ensures acc(History__hist_idle(diz, frac1 + frac2, p_merge(proc1, proc2)), write)
{
  inhale false
}

method History__History(current_thread_id: Int) returns (sys__result: Ref)
  requires current_thread_id >= 0
  ensures sys__result != null
  ensures acc(sys__result.History__x_hist_value, write) && (sys__result.History__x_hist_value == 0)
  ensures acc(sys__result.History__x_hist_mode, write) && (sys__result.History__x_hist_mode == 0)
  ensures acc(sys__result.History__x_hist_init, write) && (sys__result.History__x_hist_init == 0)
  ensures acc(sys__result.History__x_hist_act, write) && (sys__result.History__x_hist_act == 0)
{
  var diz: Ref
  var __flatten_31: Int
  var __flatten_32: Int
  var __flatten_33: Int
  var __flatten_34: Int
  var __flatten_79: Int
  var __flatten_80: Int
  var __flatten_81: Int
  var __flatten_82: Int
  diz := new(History__x_hist_value, History__x_hist_mode, History__x_hist_init, History__x_hist_act)
  __flatten_31 := 0
  __flatten_79 := __flatten_31
  diz.History__x_hist_value := __flatten_79
  __flatten_32 := 0
  __flatten_80 := __flatten_32
  diz.History__x_hist_mode := __flatten_80
  __flatten_33 := 0
  __flatten_81 := __flatten_33
  diz.History__x_hist_init := __flatten_81
  __flatten_34 := 0
  __flatten_82 := __flatten_34
  diz.History__x_hist_act := __flatten_82
  sys__result := diz
  assert (sys__result != null) && (acc(sys__result.History__x_hist_value, write) && (sys__result.History__x_hist_value == 0)) && (acc(sys__result.History__x_hist_mode, write) && (sys__result.History__x_hist_mode == 0)) && (acc(sys__result.History__x_hist_init, write) && (sys__result.History__x_hist_init == 0)) && (acc(sys__result.History__x_hist_act, write) && (sys__result.History__x_hist_act == 0))
  inhale false
}

method History__end_hist_1(diz: Ref, current_thread_id: Int, n: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(diz.History__x_hist_value, write)
  requires acc(diz.History__x_hist_mode, write) && (diz.History__x_hist_mode == 1)
  requires acc(diz.History__x_hist_init, write)
  ensures acc(diz.History__x_hist_value, write)
  ensures acc(diz.History__x_hist_mode, write) && (diz.History__x_hist_mode == 0)
  ensures acc(diz.History__x_hist_init, write)
  ensures acc(diz.History__x_hist_act, write)
  ensures diz.History__x_hist_value == old(diz.History__x_hist_value)
  ensures diz.History__x_hist_init == old(diz.History__x_hist_value)
  ensures diz.History__x_hist_value == old(diz.History__x_hist_init) + n
{
  inhale false
}

method History__if_any_random(diz: Ref, current_thread_id: Int) returns (sys__result: Bool)
  requires diz != null
  requires current_thread_id >= 0
{
  inhale false
}

method Application__do_incr(diz: Ref, current_thread_id: Int, h: Ref, p: Process, q: Perm)
  requires diz != null
  requires current_thread_id >= 0
  requires q != none
  requires acc(History__hist_idle(h, q, p), write)
  requires acc(h.History__x_hist_value, write)
  requires acc(h.History__x_hist_mode, write) && (h.History__x_hist_mode == 1)
  ensures acc(h.History__x_hist_value, write)
  ensures acc(h.History__x_hist_mode, write) && (h.History__x_hist_mode == 1)
  ensures acc(History__hist_idle(h, q, p_seq(p, p_incr())), write)
{
  var if_any_bool: Bool
  History__incr_begin(h, current_thread_id, q, p)
  History__hist_set_x(h, current_thread_id, h.History__x_hist_value + 1)
  History__incr_commit(h, current_thread_id, q, p)
}

method Application__main(diz: Ref, current_thread_id: Int)
  requires diz != null
  requires current_thread_id >= 0
{
  var if_any_bool: Bool
  var h: Ref
  var __flatten_38: Ref
  __flatten_38 := History__History(current_thread_id)
  h := __flatten_38
  History__free_set_x(h, current_thread_id, 1)
  History__begin_hist(h, current_thread_id)
  History__split(h, current_thread_id, 1 / 3, p_empty(), 2 / 3, p_empty())
  Application__do_incr(diz, current_thread_id, h, p_empty(), 1 / 3)
  History__merge(h, current_thread_id, 2 / 3, p_empty(), 1 / 3, p_single(1))
  History__end_hist_1(h, current_thread_id, 1)
  assert h.History__x_hist_value == 2
}

method Application__Application(current_thread_id: Int) returns (sys__result: Ref)
  requires current_thread_id >= 0
  ensures sys__result != null
{
  var diz: Ref
  diz := new()
  sys__result := diz
  assert sys__result != null
  inhale false
}

method Application__if_any_random(diz: Ref, current_thread_id: Int) returns (sys__result: Bool)
  requires diz != null
  requires current_thread_id >= 0
{
  inhale false
}
//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(_x: Perm, _y: Perm): Perm
    function minus(_x: Perm, _y: Perm): Perm
    function geq(_x: Perm, _y: Perm): Bool
    function joinable(_x: Perm, _y: Perm): Bool

    function times(_x: Perm, _y: Perm): Perm

    //Auxiliary functions
    function share(_x: Rational): Perm
    function valid_share(_x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall _a: Int, _b: Int :: {biConstr(_a, _b)} biConstr(_a, _b) == share(_a/_b)}


    axiom axValid { forall _x: Rational :: {valid_share(_x)}
        valid_share(_x) <==> (_x >= 0/1 && _x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall _a: Rational, _b: Rational :: { share(_a), share(_b) }
        share(_a) == share(_b) ==> _a == _b
    }
    axiom axPlus { forall _a: Rational, _b: Rational :: { plus(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) ==> plus(share(_a), share(_b)) == share(_a + _b)
    }
    axiom axMinus { forall _a: Rational, _b: Rational :: { minus(share(_a), share(_b)) }
        geq(share(_a), share(_b)) ==> minus(share(_a), share(_b)) == share(_a - _b)
    }
    axiom axCanJoin { forall _a: Rational, _b: Rational :: { joinable(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) <==> valid_share(_a) && valid_share(_b) && valid_share(_a + _b)
    }
    axiom axGeq { forall _a: Rational, _b: Rational :: { geq(share(_a), share(_b)) }
        geq(share(_a), share(_b)) <==> valid_share(_a) && valid_share(_b) && valid_share(_a - _b)
    }
    axiom axMul { forall _a: Rational, _b: Rational :: {times(share(_a), share(_b))} times(share(_a), share(_b)) == share(_a * _b)}

    axiom axJoinComm {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == plus(_q, _p)}
    axiom axJoinAssoc {forall _p: Perm, _q: Perm, _r: Perm :: {plus(plus(_p, _q), _r)} plus(plus(_p, _q), _r) == plus(_p, plus(_q, _r))}
    axiom axJoinCancel { forall _p: Perm, _q: Perm, _x: Perm :: {plus(_p, _x), plus(_q, _x)} plus(_p, _x) == plus(_q, _x) ==> _p == _q}

    axiom axUnitGeq { forall _p: Perm :: {geq(_p, unit())} geq(_p, unit())}
    axiom axUnitGeq2 { forall _p: Perm :: {geq(unit(),_p)} geq(unit(),_p) <==> _p == unit()}
    axiom axFullGeq { forall _p: Perm :: {geq(full(),_p)} geq(full(),_p)}
    axiom axFullGeq2 { forall _p: Perm :: {geq(_p, full())} geq(_p, full()) <==> _p == full()}

    axiom axUnitJoin { forall _p: Perm :: {plus(unit(),_p)} plus(unit(),_p) == _p}
    axiom axUnitJoinable { forall _p: Perm :: {joinable(_p, unit())} joinable(_p, unit())}
    axiom axJoinableComm { forall _p: Perm, _q: Perm :: {joinable(_p, _q)} joinable(_p, _q) == joinable(_q,_p)}
    axiom axTimes0 { forall _p: Perm :: {times(unit(),_p)} times(unit(),_p) == unit()}
    axiom axTimes1 { forall _p: Perm :: {times(full(),_p)} times(unit(),_p) == _p}

    axiom axGeqPlus { forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(_a, _x)}
    axiom axGeqMinus {forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(minus(_a, _y), _x)}
    axiom axMinusUneq { forall _p: Perm, _q: Perm :: {geq(_p, _q)} geq(_p, _q) && _p != _q ==> minus(_p, _q) != unit()}

}
