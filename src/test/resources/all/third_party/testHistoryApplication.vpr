// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

domain Process {
  
  function p_merge(p1: Process, p2: Process): Process
  
  function p_seq(p1: Process, p2: Process): Process
  
  function p_empty(): Process
  
  function p_incr(): Process
  
  function p_single(n: Int): Process
  
  function p_dual(n: Int, m: Int): Process
  
  axiom empty_1L {
    (forall p: Process :: p_merge(p_empty(), p) == p)
  }
  
  axiom empty_2L {
    (forall p: Process :: p_seq(p_empty(), p) == p)
  }
  
  axiom empty_2R {
    (forall p: Process :: p_seq(p, p_empty()) == p)
  }
  
  axiom single_def {
    (forall n: Int :: (n > 0 ? p_seq(p_incr(), p_single(n - 1)) : p_empty()) == p_single(n))
  }
  
  axiom dual_def {
    (forall n: Int, m: Int :: p_merge(p_single(n), p_single(m)) == p_dual(n, m))
  }
}

field Ref__x: Int

field Ref__x_old: Int

field Ref__Integer_value: Int

predicate Ref__hist_idle(diz: Ref, ref: Ref, p: Process) {
  true
}

predicate Ref__hist_empty(diz: Ref, ref: Ref, p: Process) {
  true
}

predicate Ref__hist_incr(diz: Ref, ref: Ref, p: Process) {
  true
}

method Ref__do_incr(diz: Ref, h: Ref)
  requires diz != null
  requires acc(diz.Ref__x, write)
  requires h != null
  requires acc(Ref__hist_idle(h, diz, p_empty()), write)
  ensures acc(diz.Ref__x, write)
  ensures h != null
  ensures acc(Ref__hist_idle(h, diz, p_single(1)), write)
{
  var if_any_bool: Bool
  var __flatten_18: Int
  var __flatten_49: Int
  Ref__incr_begin(h, diz, p_empty())
  __flatten_49 := diz.Ref__x + 1
  __flatten_18 := __flatten_49
  diz.Ref__x := __flatten_18
  Ref__incr_commit(h, diz, p_empty())
}

method Ref__do_incr_twice(diz: Ref, h: Ref)
  requires diz != null
  requires acc(diz.Ref__x, write)
  requires h != null
  requires acc(Ref__hist_idle(h, diz, p_empty()), write)
  ensures acc(diz.Ref__x, write)
  ensures h != null
  ensures acc(Ref__hist_idle(h, diz, p_single(2)), write)
{
  var if_any_bool: Bool
  var __flatten_23: Int
  var __flatten_28: Int
  var __flatten_54: Int
  var __flatten_59: Int
  Ref__incr_begin(h, diz, p_empty())
  __flatten_54 := diz.Ref__x + 1
  __flatten_23 := __flatten_54
  diz.Ref__x := __flatten_23
  Ref__incr_commit(h, diz, p_empty())
  Ref__incr_begin(h, diz, p_single(1))
  __flatten_59 := diz.Ref__x + 1
  __flatten_28 := __flatten_59
  diz.Ref__x := __flatten_28
  Ref__incr_commit(h, diz, p_single(1))
}

method Ref__main_og(diz: Ref)
  requires diz != null
  requires acc(diz.Ref__x, write)
  requires diz.Ref__x == 0
  ensures acc(diz.Ref__x, write)
  ensures diz.Ref__x == 1
{
  var if_any_bool: Bool
  var hh: Ref
  assert diz.Ref__x == 0
  inhale (hh != null) && acc(Ref__hist_idle(hh, diz, p_empty()), write)
  Ref__do_incr(diz, hh)
  exhale (hh != null) && acc(Ref__hist_idle(hh, diz, p_single(1)), write)
  inhale diz.Ref__x == 1
}

method Ref__Ref() returns (sys__result: Ref)
  ensures sys__result != null
  ensures acc(sys__result.Ref__x, write) && (sys__result.Ref__x == 0)
{
  var diz: Ref
  var __flatten_63: Ref
  __flatten_63 := new(Ref__x, Ref__x_old, Ref__Integer_value)
  diz := __flatten_63
  diz.Ref__x := 0
  sys__result := diz
  assert (sys__result != null) && (acc(sys__result.Ref__x, write) && (sys__result.Ref__x == 0))
  inhale false
}

method Ref__empty_begin(diz: Ref, ref: Ref, p: Process)
  requires diz != null
  requires acc(Ref__hist_idle(diz, ref, p), write)
  requires acc(ref.Ref__x, write)
  ensures acc(Ref__hist_empty(diz, ref, p), write)
  ensures acc(ref.Ref__x, write)
  ensures ref.Ref__x == old(ref.Ref__x)
  ensures acc(diz.Ref__x_old, 1 / 2)
  ensures ref.Ref__x == diz.Ref__x_old
{
  inhale false
}

method Ref__empty_commit(diz: Ref, ref: Ref, p: Process)
  requires diz != null
  requires acc(Ref__hist_empty(diz, ref, p), write)
  requires acc(ref.Ref__x, write)
  requires acc(diz.Ref__x_old, 1 / 2)
  requires ref.Ref__x == diz.Ref__x_old
  ensures acc(Ref__hist_idle(diz, ref, p_seq(p, p_empty())), write)
  ensures acc(ref.Ref__x, write)
  ensures ref.Ref__x == old(ref.Ref__x)
{
  inhale false
}

method Ref__incr_begin(diz: Ref, ref: Ref, p: Process)
  requires diz != null
  requires acc(Ref__hist_idle(diz, ref, p), write)
  requires acc(ref.Ref__x, write)
  ensures acc(Ref__hist_incr(diz, ref, p), write)
  ensures acc(ref.Ref__x, write)
  ensures ref.Ref__x == old(ref.Ref__x)
  ensures acc(diz.Ref__x_old, 1 / 2)
  ensures ref.Ref__x == diz.Ref__x_old
{
  inhale false
}

method Ref__incr_commit(diz: Ref, ref: Ref, p: Process)
  requires diz != null
  requires acc(Ref__hist_incr(diz, ref, p), write)
  requires acc(ref.Ref__x, write)
  requires acc(diz.Ref__x_old, 1 / 2)
  requires ref.Ref__x == diz.Ref__x_old + 1
  ensures acc(Ref__hist_idle(diz, ref, p_seq(p, p_incr())), write)
  ensures acc(ref.Ref__x, write)
  ensures ref.Ref__x == old(ref.Ref__x)
{
  inhale false
}

method Ref__if_any_random(diz: Ref) returns (sys__result: Bool)
  requires diz != null
{
  inhale false
}
//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(_x: Perm, _y: Perm): Perm
    function minus(_x: Perm, _y: Perm): Perm
    function geq(_x: Perm, _y: Perm): Bool
    function joinable(_x: Perm, _y: Perm): Bool

    function times(_x: Perm, _y: Perm): Perm

    //Auxiliary functions
    function share(_x: Rational): Perm
    function valid_share(_x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall _a: Int, _b: Int :: {biConstr(_a, _b)} biConstr(_a, _b) == share(_a/_b)}


    axiom axValid { forall _x: Rational :: {valid_share(_x)}
        valid_share(_x) <==> (_x >= 0/1 && _x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall _a: Rational, _b: Rational :: { share(_a), share(_b) }
        share(_a) == share(_b) ==> _a == _b
    }
    axiom axPlus { forall _a: Rational, _b: Rational :: { plus(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) ==> plus(share(_a), share(_b)) == share(_a + _b)
    }
    axiom axMinus { forall _a: Rational, _b: Rational :: { minus(share(_a), share(_b)) }
        geq(share(_a), share(_b)) ==> minus(share(_a), share(_b)) == share(_a - _b)
    }
    axiom axCanJoin { forall _a: Rational, _b: Rational :: { joinable(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) <==> valid_share(_a) && valid_share(_b) && valid_share(_a + _b)
    }
    axiom axGeq { forall _a: Rational, _b: Rational :: { geq(share(_a), share(_b)) }
        geq(share(_a), share(_b)) <==> valid_share(_a) && valid_share(_b) && valid_share(_a - _b)
    }
    axiom axMul { forall _a: Rational, _b: Rational :: {times(share(_a), share(_b))} times(share(_a), share(_b)) == share(_a * _b)}

    axiom axJoinComm {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == plus(_q, _p)}
    axiom axJoinAssoc {forall _p: Perm, _q: Perm, _r: Perm :: {plus(plus(_p, _q), _r)} plus(plus(_p, _q), _r) == plus(_p, plus(_q, _r))}
    axiom axJoinCancel { forall _p: Perm, _q: Perm, _x: Perm :: {plus(_p, _x), plus(_q, _x)} plus(_p, _x) == plus(_q, _x) ==> _p == _q}

    axiom axUnitGeq { forall _p: Perm :: {geq(_p, unit())} geq(_p, unit())}
    axiom axUnitGeq2 { forall _p: Perm :: {geq(unit(),_p)} geq(unit(),_p) <==> _p == unit()}
    axiom axFullGeq { forall _p: Perm :: {geq(full(),_p)} geq(full(),_p)}
    axiom axFullGeq2 { forall _p: Perm :: {geq(_p, full())} geq(_p, full()) <==> _p == full()}

    axiom axUnitJoin { forall _p: Perm :: {plus(unit(),_p)} plus(unit(),_p) == _p}
    axiom axUnitJoinable { forall _p: Perm :: {joinable(_p, unit())} joinable(_p, unit())}
    axiom axJoinableComm { forall _p: Perm, _q: Perm :: {joinable(_p, _q)} joinable(_p, _q) == joinable(_q,_p)}
    axiom axTimes0 { forall _p: Perm :: {times(unit(),_p)} times(unit(),_p) == unit()}
    axiom axTimes1 { forall _p: Perm :: {times(full(),_p)} times(unit(),_p) == _p}

    axiom axGeqPlus { forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(_a, _x)}
    axiom axGeqMinus {forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(minus(_a, _y), _x)}
    axiom axMinusUneq { forall _p: Perm, _q: Perm :: {geq(_p, _q)} geq(_p, _q) && _p != _q ==> minus(_p, _q) != unit()}

}
