// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field f: Int

method t1(xs: Set[Ref])
requires forall y:Ref :: y in xs ==> acc(y.f, write)
{
    exhale(forall z:Ref :: z in xs ==> acc(z.f, write))
    //:: ExpectedOutput(exhale.failed:insufficient.permission)
    exhale(forall w:Ref :: w in xs ==> acc(w.f, write))
}

method t2(zs:Set[Ref], ys:Set[Ref])
requires forall x:Ref :: x in zs ==> acc(x.f, write)
requires (ys subset zs)
{
    exhale(forall u:Ref :: u in ys ==> acc(u.f, write))
    //:: ExpectedOutput(exhale.failed:insufficient.permission)
    exhale(forall q:Ref :: q in zs ==> acc(q.f, write))
}

method t3(xs:Set[Ref], ys:Set[Ref], zs:Set[Ref])
requires forall x:Ref :: x in xs ==> acc(x.f, write)
requires forall y:Ref :: y in ys ==> acc(y.f, write)
requires zs subset (xs union ys)
{
   exhale(forall z:Ref :: z in zs ==> acc(z.f, write))
   //:: ExpectedOutput(exhale.failed:insufficient.permission)
   exhale(forall a:Ref :: a in ys ==> acc(a.f, write))
}

method t4(xs:Set[Ref], ys:Set[Ref], zs:Set[Ref])
requires forall x:Ref :: x in xs ==> acc(x.f, write)
requires forall y:Ref :: y in ys ==> acc(y.f, write)
requires zs subset (xs union ys)
{
  exhale(forall z:Ref :: z in zs ==> acc(z.f, write))

  exhale(forall b:Ref :: b in (xs setminus zs) ==> acc(b.f, write))

  //:: ExpectedOutput(exhale.failed:insufficient.permission)
  exhale(forall c:Ref :: c in (ys setminus xs) ==> acc(c.f, write))
}

method t5(xs:Set[Ref], ys:Set[Ref])
requires forall x:Ref :: x in xs ==> acc(x.f, write)
requires forall y:Ref :: y in ys ==> acc(y.f, write)
{
    exhale(forall z:Ref :: z in (xs intersection ys) ==> acc(z.f, write))
    exhale(forall a:Ref :: a in (xs setminus (xs intersection ys)) ==> acc(a.f, write))
    exhale(forall b:Ref :: b in (ys setminus (ys intersection xs)) ==> acc(b.f, write))
}

method t6(xs:Set[Ref], ys:Set[Ref])
requires forall x:Ref :: x in xs ==> acc(x.f, 1/2)
requires forall y:Ref :: y in ys ==> acc(y.f, 1/2)
{
    exhale(forall z:Ref :: z in (xs intersection ys) ==> acc(z.f, write))
}

method t7(xs:Set[Ref])
requires forall x:Ref :: x in xs ==> acc(x.f, 1/3)
ensures forall y:Ref :: y in xs ==> acc(y.f, 1/3)
{}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axUnitJoinable { forall p: Perm :: {joinable(p, unit())} joinable(p, unit())}
    axiom axJoinableComm { forall p: Perm, q: Perm :: {joinable(p, q)} joinable(p, q) == joinable(q, p)}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}

    axiom axGeqPlus { forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(a, x)}
    axiom axGeqMinus {forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) && joinable(x, y) <==> geq(minus(a, y), x) && geq(a, y)}

}
