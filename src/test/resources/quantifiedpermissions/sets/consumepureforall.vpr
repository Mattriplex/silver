// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field f: Int

method m(S: Set[Ref], b:Ref)
requires (forall s:Ref :: s in S ==> acc(s.f))
requires (forall p:Ref :: p in S ==> p.f > 0)
requires b in S
ensures acc(b.f)
ensures b.f > 0
{
}

method m4(S: Set[Ref], T: Set[Ref])
requires (forall s: Ref :: s in S ==> acc(s.f))
requires (forall t: Ref :: t in T ==> acc(t.f))
requires (forall u : Ref :: u in S ==> u.f > 0)
requires (forall v: Ref :: v in T ==> v.f > 0)
ensures (forall x: Ref :: x in (T union S) ==> acc(x.f))
ensures (forall y: Ref :: y in (T union S) ==> y.f > 0)
{

}


method m2(S: Set[Ref], b:Ref)
requires (forall s: Ref :: s in S ==> acc(s.f))
requires (forall p: Ref :: p in S ==> p.f > 0)
requires b in S
ensures (forall r: Ref :: r  in S ==> acc(r.f))
ensures (forall q : Ref :: q in S ==> q.f > 0)
{
   b.f := 3
}

method m13(S: Set[Ref], b:Ref, a:Int)
requires (forall s: Ref :: s in S ==> acc(s.f))
requires S == Set(b)
requires b.f == a
ensures (forall r : Ref :: r in S ==> acc(r.f))
ensures (forall t : Ref :: t in S ==> ((t.f) > (2*a)))
{
    b.f := 2*a+1
}


method m3(S: Set[Ref], b:Ref, a:Int)
requires (forall s: Ref :: s in S ==> acc(s.f))
requires S == Set(b)
requires b.f == a
ensures (forall r : Ref :: r in S ==> acc(r.f))
ensures (forall t : Ref :: t in S ==> ((t.f) > (2*a)))
{
    b.f := 2*a+1
}

method m7(S: Set[Ref], b:Ref, a:Int)
requires (forall s: Ref :: s in S ==> acc(s.f))
requires S == Set(b)
requires b.f == a
ensures (forall r : Ref :: r in S ==> acc(r.f))
{
    b.f := 2*a
    //:: ExpectedOutput(exhale.failed:assertion.false)
    exhale (forall t : Ref :: t in S ==> (t.f) > (2*a))
}

method m5(S: Set[Ref], b:Ref)
requires (forall s: Ref :: s in S ==> acc(s.f))
requires b in S
{
    assume(b.f > 0)
}

method m8(S: Set[Ref], b: Ref, a :Int, c: Ref)
  requires forall s: Ref :: s in S ==> acc(s.f)
  requires forall s: Ref :: s in S ==> s.f == a
  requires b in S
  requires acc(c.f)
  requires c.f < 0
  requires a > 0
  ensures forall r : Ref :: r in S ==> acc(r.f)
  ensures forall t : Ref :: t in S ==> (t.f == ((t == b) ? 2*a+1 : a))
{
  b.f := 2*a+1
}

method m9(S: Set[Ref], b:Ref, a:Int)
requires (forall s: Ref :: s in S ==> acc(s.f))
requires (forall q: Ref :: q in S ==> q.f > a)
requires b in S
requires a > 0
ensures (forall r : Ref :: r in S ==> acc(r.f))
ensures (forall t : Ref :: t in S ==> (t.f > a))
{
    b.f := 2*a+1
}

method m10(S: Set[Ref], b:Ref, a:Int, c:Ref)
requires (forall s: Ref :: s in S ==> acc(s.f))
requires (forall q: Ref :: q in S ==> q.f > a)
requires b in S
requires c in S
requires a > 0
ensures (forall r : Ref :: r in S ==> acc(r.f))
ensures (forall t : Ref :: t in S ==> (t.f > a))
{
    b.f := 2*a+1
    c.f := a+1
}


//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}
}
