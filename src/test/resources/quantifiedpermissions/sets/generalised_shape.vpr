// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field f: Int
field g: Ref

method test05(xs: Set[Ref], ys: Set[Ref], x1: Ref, x2: Ref)
  requires forall x: Ref :: x in xs && !(x in ys) ==> acc(x.f)
{
  assume x1 in xs && x2 in xs
  assume !(x1 in ys)
  assume x1 != null && x2 != null // TODO: Should not be necessary, see Silicon issue 61
  var a: Int := x1.f

  //:: ExpectedOutput(assignment.failed:insufficient.permission)
  a := x2.f
}

method test07(xs: Set[Ref], y1: Ref)
  requires forall x: Ref :: x in xs ==> acc(x.f)
  requires forall x: Ref :: x in xs && x.f != 0 ==> acc(x.g)
  requires y1 in xs
{
  var a: Int := y1.f

  //:: ExpectedOutput(assignment.failed:insufficient.permission)
  var r: Ref := y1.g
}

method test12(x1: Ref)
  requires acc(x1.g)
  ensures forall x: Ref :: x in Set(x1) ==> acc(x.g)
  //:: ExpectedOutput(postcondition.violated:insufficient.permission)
  ensures acc(x1.g)
{}

method test14(x1: Ref)
  requires acc(x1.g) && acc(x1.g.f)
  ensures forall x: Ref :: x in Set(x1) ==> acc(x.g)
  ensures forall x: Ref :: x in Set(x1) ==> acc(x.g.f)
{}

method test13(x1: Ref)
  requires acc(x1.g) && acc(x1.g.f)
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  ensures forall x: Ref :: x in Set(x1) ==> acc(x.g.f)
{}

method test10(x1: Ref, x2: Ref)
  requires acc(x1.g) && acc(x1.g.f, wildcard)
  requires acc(x2.g) && acc(x2.g.f, wildcard)
  ensures  forall x: Ref :: x in Set(x1, x2) ==> acc(x.g, wildcard)
  //:: ExpectedOutput(postcondition.violated:receiver.not.injective)
  ensures  forall x: Ref :: x in Set(x1, x2) ==> acc(x.g.f, wildcard)
{}

method test15(x1: Ref, x2: Ref)
  requires acc(x1.g) && acc(x1.g.f, 2/3)
  requires acc(x2.g) && acc(x2.g.f, 2/3)
  ensures forall x: Ref :: x in Set(x1, x2) ==> acc(x.g, wildcard)
  ensures x1.g != x2.g /* TODO: Should not be necessary */
  ensures forall x: Ref :: x in Set(x1, x2) ==> acc(x.g.f, wildcard)
{}

method test11(x1: Ref, x2: Ref, x3: Ref, x4: Ref, x5: Ref, x6: Ref)
  requires acc(x1.g) && acc(x1.g.f)
  requires acc(x2.g) && acc(x2.g.f)
  requires acc(x3.g) && acc(x3.g.f)
  requires acc(x4.g) && acc(x4.g.f)
  requires acc(x5.g) && acc(x5.g.f)
  requires acc(x6.g) && acc(x6.g.f)
{
  test10(x1, x6)
  test10(x2, x5)
  test10(x3, x4)
}

method test06(xs: Set[Ref], y1: Ref, y2: Ref, y3: Ref)
  requires forall x: Ref :: x in xs ==> acc(x.g)
  requires forall x: Ref :: x in xs ==> acc(x.g.f)
  requires y1 in xs && y2 in xs && y3 in xs
  requires y1 != y2
{
  assume y1.g != null // TODO: Should not be necessary, see Silicon issue 61
  assume y2.g != null // TODO: Should not be necessary, see Silicon issue 61
  var a: Int := y1.g.f

  assert y1.g != y2.g
  assert y1.g != y3.g || y2.g != y3.g

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert y1.g != y3.g && y2.g != y3.g
}

//predicate P(xs: Set[Ref], ys: Set[Ref], x1: Ref, x2: Ref) {
//     forall x: Ref ::
//      x in xs && !(y in ys) ==>
//           acc(x.f)
//        && (x.f != 0 ==>
//                 acc(x.g)
//              && (!(x.g in xs) ==> acc(x.g.f)))
//}
//
//predicate P(xs: Set[Ref], ys: Set[Ref], x1: Ref, x2: Ref) {
//     (forall x: Ref :: x in xs && !(y in ys) ==> acc(x.f))
//  && (forall-refs[f] x :: x.f != 0 ==> acc(x.g))
//  && (forall-refs[g] x :: !(x.g in xs) ==> acc(x.g.f))
//}

predicate P(xs: Set[Ref], ys: Set[Ref]) {
     (forall x: Ref :: x in xs && !(x in ys) ==> acc(x.f))
  && (forall x: Ref :: x in xs && !(x in ys) && x.f != 0 ==> acc(x.g))
  && (forall x: Ref :: x in xs && !(x in ys) && x.f != 0 && !(x.g in xs) ==> acc(x.g.f))
}

method test01(xs: Set[Ref], ys: Set[Ref], x: Ref)
  requires acc(P(xs, ys))
{
  unfold acc(P(xs, ys))
  assume x in xs
  assume x != null // TODO: Should not be necessary, see Silicon issue 61

  //:: ExpectedOutput(assignment.failed:insufficient.permission)
  var a: Int := x.f
}

method test02(xs: Set[Ref], ys: Set[Ref], x: Ref)
  requires acc(P(xs, ys))
{
  unfold acc(P(xs, ys))
  assume x in xs && !(x in ys)
  assume x != null // TODO: Should not be necessary, see Silicon issue 61
  var a: Int := x.f

  //:: ExpectedOutput(assignment.failed:insufficient.permission)
  var b: Ref := x.g
}

method test03(xs: Set[Ref], ys: Set[Ref], x: Ref)
  requires acc(P(xs, ys))
{
  unfold acc(P(xs, ys))

  assume x in xs && !(x in ys)
  assume x != null // TODO: Should not be necessary, see Silicon issue 61
  var a: Int := x.f
  assume a != 0
  var b: Ref := x.g

  //:: ExpectedOutput(assignment.failed:insufficient.permission)
  //:: MissingOutput(assignment.failed:receiver.null, /silicon/issue/219/)
  a := x.g.f
}

method test04(xs: Set[Ref], ys: Set[Ref], x: Ref)
  requires acc(P(xs, ys))
{
  unfold acc(P(xs, ys))

  assume x in xs && !(x in ys)
  assume x != null // TODO: Should not be necessary, see Silicon issue 61
  var a: Int := x.f
  assume a != 0
  var b: Ref := x.g
  assume !(x.g in xs)
  assume x.g != null // TODO: Should not be necessary, see Silicon issue 61
  a := x.g.f
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(_x: Perm, _y: Perm): Perm
    function minus(_x: Perm, _y: Perm): Perm
    function geq(_x: Perm, _y: Perm): Bool
    function joinable(_x: Perm, _y: Perm): Bool

    function times(_x: Perm, _y: Perm): Perm

    //Auxiliary functions
    function share(_x: Rational): Perm
    function valid_share(_x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall _a: Int, _b: Int :: {biConstr(_a, _b)} biConstr(_a, _b) == share(_a/_b)}


    axiom axValid { forall _x: Rational :: {valid_share(_x)}
        valid_share(_x) <==> (_x >= 0/1 && _x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall _a: Rational, _b: Rational :: { share(_a), share(_b) }
        share(_a) == share(_b) ==> _a == _b
    }
    axiom axPlus { forall _a: Rational, _b: Rational :: { plus(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) ==> plus(share(_a), share(_b)) == share(_a + _b)
    }
    axiom axMinus { forall _a: Rational, _b: Rational :: { minus(share(_a), share(_b)) }
        geq(share(_a), share(_b)) ==> minus(share(_a), share(_b)) == share(_a - _b)
    }
    axiom axCanJoin { forall _a: Rational, _b: Rational :: { joinable(share(_a), share(_b)) }
        valid_share(_a) && valid_share(_b) ==> (joinable(share(_a), share(_b)) == valid_share(_a + _b))
    }
    axiom axGeq { forall _a: Rational, _b: Rational :: { geq(share(_a), share(_b)) }
        valid_share(_a) && valid_share(_b) ==> (geq(share(_a), share(_b)) <==> valid_share(_a - _b))
    }
    axiom axMul { forall _a: Rational, _b: Rational :: {times(share(_a), share(_b))} times(share(_a), share(_b)) == share(_a * _b)}

    axiom axJoinComm {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == plus(_q, _p)}
    axiom axJoinAssoc {forall _p: Perm, _q: Perm, _r: Perm :: {plus(plus(_p, _q), _r)} plus(plus(_p, _q), _r) == plus(_p, plus(_q, _r))}
    axiom axJoinCancel { forall _p: Perm, _q: Perm, _x: Perm :: {plus(_p, _x), plus(_q, _x)} plus(_p, _x) == plus(_q, _x) ==> _p == _q}

    axiom axUnitGeq { forall _p: Perm :: {geq(_p, unit())} geq(_p, unit())}
    axiom axUnitGeq2 { forall _p: Perm :: {geq(unit(),_p)} geq(unit(),_p) <==> _p == unit()}
    axiom axFullGeq { forall _p: Perm :: {geq(full(),_p)} geq(full(),_p)}
    axiom axFullGeq2 { forall _p: Perm :: {geq(_p, full())} geq(_p, full()) <==> _p == full()}
    axiom axGeqId { forall _p: Perm :: {geq(_p, _p)} geq(_p, _p)}
    axiom axMinusId { forall _p: Perm :: {minus(_p, _p)} minus(_p, _p) == unit()}


    axiom axUnitJoin { forall _p: Perm :: {plus(unit(),_p)} plus(unit(),_p) == _p}
    axiom axUnitJoinable { forall _p: Perm :: {joinable(_p, unit())} joinable(_p, unit())}
    axiom axJoinableComm { forall _p: Perm, _q: Perm :: {joinable(_p, _q)} joinable(_p, _q) == joinable(_q,_p)}
    axiom axTimes0 { forall _p: Perm :: {times(unit(),_p)} times(unit(),_p) == unit()}
    axiom axTimes1 { forall _p: Perm :: {times(full(),_p)} times(full(),_p) == _p}

    axiom axGeqPlus { forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(_a, _x)}
    axiom axGeqMinus {forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(minus(_a, _y), _x)}
    axiom axMinusUneq { forall _p: Perm, _q: Perm :: {geq(_p, _q)} geq(_p, _q) && _p != _q ==> minus(_p, _q) != unit()}

    axiom axPositive {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == unit() ==> _p == unit() && _q == unit()}
    axiom axPlusGeq {forall _p: Perm, _q: Perm :: {geq(plus(_p, _q), _p)} /*joinable(_p, _q) ==>*/ geq(plus(_p, _q), _p)}
    axiom axMinusCancel {forall _p: Perm, _q: Perm :: {minus(plus(_p, _q), _q)} minus(plus(_p, _q), _q) == _p}

}


domain _Scalar { //Fractional scalars
    function zeroS(): Scalar 
    function oneS(): Scalar
    function plusS(_x: Scalar, _y: Scalar): Scalar
    function minusS(_x: Scalar, _y: Scalar): Scalar
    function geqS(_x: Scalar, _y: Scalar): Bool
    //function joinable(_x: Perm, _y: Perm): Bool //not needed, joinability depends on perms' joinable predicate

    function timesS(_x: Scalar, _y: Scalar): Scalar
    function applyS(_x: Scalar, _y: Perm): Perm
    //Auxiliary functions
//Integer scalars
    function stack(_r: Rational) : Scalar
    axiom axStack0 { stack(0/1) == zeroS()}
    axiom axStack1 { stack(1/1) == oneS() }
    axiom axPlusStack { forall _n: Rational, _m: Rational :: {plusS(stack(_n), stack(_m))} _m >= 0/1 ==> _n >= 0/1 ==> plusS(stack(_n), stack(_m)) == stack(_m + _n)}
    axiom axGeqStack { forall _n: Rational, _m: Rational :: {geqS(stack(_n), stack(_m))} _m >= 0/1 ==> _n >= 0/1 ==> geqS(stack(_n), stack(_m)) <==> _n >= _m}
    axiom axMinusStack { forall _n: Rational, _m: Rational ::{minusS(stack(_n), stack(_m))} _m >= 0/1 ==> _n >= 0/1 ==> geqS(stack(_n), stack(_m)) ==> minusS(stack(_n), stack(_m)) == stack(_n - _m)}
    axiom axStackApply { forall _p: Rational, _n: Rational :: {applyS(stack(_n), share(_p))} valid_share(_n * _p) ==> applyS(stack(_n), share(_p)) == share(_n * _p)}
    axiom axStackTimes { forall _n: Rational, _m: Rational :: {timesS(stack(_n), stack(_m))} _m >= 0/1 ==> _n >= 0/1 ==> timesS(stack(_n), stack(_m)) == stack(_m * _n)}

//PLUS
    axiom axPlusZero{ forall _s: Scalar :: {plusS(zeroS(),_s)} plusS(zeroS(),_s) == _s}
    axiom axPlusComm {forall _s: Scalar, _t: Scalar :: {plusS(_s, _t)} plusS(_s, _t) == plusS(_t, _s)}

//APPLY
//one = identity function, zero = constant unit() function
    axiom applyZero { forall _p: Perm :: {applyS(zeroS(), _p)} applyS(zeroS(), _p) == unit() }
    axiom applyOne { forall _p: Perm :: {applyS(oneS(), _p)} applyS(oneS(), _p) == _p }


//TIMES

    axiom axTimes0S { forall _s: Scalar :: {timesS(zeroS(), _s)} timesS(zeroS(),_s) == zeroS()}
    axiom axTimes1S { forall _s: Scalar :: {timesS(oneS(),_s)} timesS(oneS(),_s) == _s}
    axiom axTimesComm {forall _s: Scalar, _t: Scalar :: {timesS(_s, _t)} timesS(_s, _t) == timesS(_t, _s)}

//GEQ
    axiom axGeqZero { forall _s: Scalar :: {geqS(_s, zeroS())} geqS(_s, zeroS())}
//MINUS
    axiom axMinusZero { forall _s: Scalar :: {geqS(_s, zeroS())} geqS(_s, zeroS())}

    //additional axioms
    axiom axGeqPlusS { forall _a: Scalar, _x: Scalar, _y: Scalar :: {geqS(_a, plusS(_x, _y))} geqS(_a, plusS(_x, _y)) ==> geqS(_a, _x)}
    axiom axgeqSMinusS {forall _a: Scalar, _x: Scalar, _y: Scalar :: {geqS(_a, plusS(_x, _y))} geqS(_a, plusS(_x, _y)) ==> geqS(minusS(_a, _y), _x)}
    axiom axMinusUneqS { forall _p: Scalar, _q: Scalar :: {geqS(_p, _q)} geqS(_p, _q) && _p != _q ==> minusS(_p, _q) != zeroS()}

    axiom axPositiveS {forall _p: Scalar, _q: Scalar :: {plusS(_p, _q)} plusS(_p, _q) == zeroS() ==> _p == zeroS() && _q == zeroS()}
    axiom axPlusgeqS {forall _p: Scalar, _q: Scalar :: {geqS(plusS(_p, _q), _p)}geqS(plusS(_p, _q), _p)}
    axiom axMinusCancelS {forall _p: Scalar, _q: Scalar :: {minusS(plusS(_p, _q), _q)} minusS(plusS(_p, _q), _q) == _p}

}