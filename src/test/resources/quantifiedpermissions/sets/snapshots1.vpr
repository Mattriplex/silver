// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field f: Int

function fun1(xs: Set[Ref], x: Ref): Int
  requires x in xs
  requires forall z: Ref :: z in xs ==> acc(z.f)
{ x.f }

method test1(xs: Set[Ref], x: Ref)
  requires x in xs
  requires forall z: Ref :: z in xs ==> acc(z.f)
{
  var a: Int := fun1(xs, x)
  assert a == fun1(xs, x)

  var b: Int := fun1(xs, x)
  assert b == fun1(xs, x)

  assert a == b
}

method test5(xs: Set[Ref], x: Ref, y: Ref)
  requires x in xs && y in xs
  requires forall z: Ref :: z in xs ==> acc(z.f)
  requires x != y // TODO: Should not be necessary, see issue 62
{
  var yf: Int := y.f
  x.f := 1

  assert y.f == yf

  y.f := yf + 1

  exhale forall z: Ref :: z in xs ==> acc(z.f)

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}

method test4(xs: Set[Ref], x: Ref, y: Ref)
  requires x in xs && y in xs
  requires forall z: Ref :: z in xs ==> acc(z.f)
  requires x != y // TODO: Should not be necessary, see issue 62
{
  var xf: Int := fun1(xs, x)
  var yf: Int := fun1(xs, y)
  x.f := xf + 1

  assert fun1(xs, x) == xf + 1
  assert fun1(xs, y) == yf

  y.f := yf + 1

  assert fun1(xs, x) == xf + 1

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert fun1(xs, y) == yf
}

predicate P(xs: Set[Ref], x: Ref) {
  x in xs && forall z: Ref :: z in xs ==> acc(z.f)
}

function fun2(xs: Set[Ref], x: Ref): Int
  requires acc(P(xs, x))
{ unfolding acc(P(xs, x)) in x.f }

method test2(xs: Set[Ref], x: Ref)
  requires acc(P(xs, x))
{
  var a: Int := fun2(xs, x)
  assert a == fun2(xs, x)

  unfold acc(P(xs, x))
  fold acc(P(xs, x))

  var b: Int := fun2(xs, x)
  assert b == fun2(xs, x)

  assert a == b

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}

method test3(xs: Set[Ref], x: Ref)
  requires x in xs
  requires forall z: Ref :: z in xs ==> acc(z.f)
{
  fold acc(P(xs, x))

  var a: Int := fun2(xs, x)
  assert a == fun2(xs, x)

  unfold acc(P(xs, x))
  fold acc(P(xs, x))

  var b: Int := fun2(xs, x)
  assert b == fun2(xs, x)

  assert a == b

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axUnitJoinable { forall p: Perm :: {joinable(p, unit())} joinable(p, unit())}
    axiom axJoinableComm { forall p: Perm, q: Perm :: {joinable(p, q)} joinable(p, q) == joinable(q, p)}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}

    axiom axGeqPlus { forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(a, x)}
    axiom axGeqMinus {forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) <==> geq(minus(a, y), x)}

}
