// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field f: Int

method test1(xs: Seq[Ref], n: Int, b: Bool)
  requires |xs| == n
  requires n > 2
{
  inhale forall i: Int :: i in [0..n) ==> acc(xs[i].f, write)
  exhale forall i: Int :: i in [0..n) ==> acc(xs[i].f, write)
}

method test2(xs: Seq[Ref], n: Int, b: Bool)
  requires |xs| == n
  requires n > 2
{
  inhale forall i: Int :: i in [0..n) ==> acc(xs[i].f, write)
  exhale forall i: Int :: i in [0..n) ==> acc(xs[i].f, 1/2)
  exhale forall i: Int :: i in [0..n) ==> acc(xs[i].f, 1/2)
}

method test3(xs: Seq[Ref], n: Int)
  requires |xs| == n
  requires n > 2
{
  inhale forall i: Int :: i in [0..n) ==> acc(xs[i].f, i < 2 ? write : 1/10)
  exhale forall i: Int :: i in [0..n) ==> acc(xs[i].f, i < 2 ? write : 1/10)

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}

method test5(xs: Seq[Ref], n: Int, x: Ref, y: Ref)
  requires |xs| == n && n > 2
  requires xs[0] == x && xs[1] == y
  requires acc(x.f, 9/10) && acc(y.f, 9/10)
  requires forall i: Int :: i in [0..n) ==> acc(xs[i].f, 1/10)

  ensures  forall i: Int :: i in [0..n) ==> acc(xs[i].f, i < 2 ? write : 1/10)
  ensures  forall i: Int :: i in [2..n) ==> xs[i].f == old(xs[i].f)
  ensures  xs[0].f == old(xs[1].f) + 1
  ensures  xs[1].f == old(xs[1].f) + 2
  //:: ExpectedOutput(postcondition.violated:assertion.false)
  ensures false
{
  xs[0].f := y.f + 1
  xs[1].f := x.f + 1
}

field value: Int
field array: Seq[Ref]

method test4(this: Ref, n: Int)
  requires acc(this.array)
  requires n > 2
  requires |this.array| == n
  ensures acc(this.array, wildcard)
  ensures |this.array| == n
  ensures forall i:Int :: i in [0..n) ==> acc(this.array[i].value, 1/2)
  //:: ExpectedOutput(postcondition.violated:assertion.false)
  ensures false
{
  var x: Int

  inhale forall i:Int :: i in [0..n) ==> acc(this.array[i].value, write)

  x := this.array[0].value

  this.array[0].value := 1

  var r: Ref
  inhale r == this.array[1]
  r.value := 2

  this.array[0].value := -1
  this.array[1].value := -2

  this.array[2].value := 3
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axUnitJoinable { forall p: Perm :: {joinable(p, unit())} joinable(p, unit())}
    axiom axJoinableComm { forall p: Perm, q: Perm :: {joinable(p, q)} joinable(p, q) == joinable(q, p)}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}

    axiom axGeqPlus { forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(a, x)}
    axiom axGeqMinus {forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) <==> geq(minus(a, y), x)}

}
