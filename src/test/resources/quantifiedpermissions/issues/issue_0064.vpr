// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field f: Int

// NOTE: we should add triggers to this test case, to fully document our expectations.

method m01(S1: Seq[Ref], S2: Set[Ref], x: Ref)
  requires S1 == Seq(x) && S2 == Set(x)
  requires forall i: Int :: i in [0..|S1|) ==> acc(S1[i].f)
  //:: UnexpectedOutput(postcondition.violated:insufficient.permission, /silicon/issue/64/)
  ensures  forall y: Ref :: y in S2 ==> acc(y.f) /* y in Set fails */
{}


method m02(S1: Seq[Ref], S2: Set[Ref], x: Ref)
  requires S1 == Seq(x) && S2 == Set(x)
  requires forall i: Int :: i in [0..|S1|) ==> acc(S1[i].f)
  ensures  forall y: Ref :: y in S1 ==> acc(y.f) /* y in Seq holds */
{}

method m03(S1: Seq[Ref], S2: Set[Ref], x: Ref)
  requires S1 == Seq(x) && S2 == Set(x)
  requires forall i: Int :: i in [0..|S1|) ==> S1[i] != null
  //:: UnexpectedOutput(postcondition.violated:assertion.false, /silicon/issue/150/)
  ensures  forall y: Ref :: y in S2 ==> y != null
{}

method m04(S1: Seq[Ref], S2: Set[Ref], x: Ref)
  requires S1 == Seq(x) && S2 == Set(x)
  requires forall y: Ref :: y in S1 ==> y != null
  //:: UnexpectedOutput(postcondition.violated:assertion.false, /silicon/issue/150/)
  // // UnexpectedOutput(postcondition.violated:assertion.false, /carbon/issue/117/)
  ensures  forall y: Ref :: y in S2 ==> y != null
{}

method repro(s:Seq[Ref])
{
  inhale (forall x: Int :: x in [0..|s|) ==> acc(s[x].f))
  inhale (forall x: Int :: (0 <= x) && (x < |s|) ==> (s[x].f == 0))
  assert (forall x: Int :: (0 <= x) && (x < |s|) ==> (s[x].f == 0))
}

method test01(s:Seq[Ref])
{
  inhale forall x: Ref :: x in s ==> acc(x.f)
  assert forall x: Ref :: x in s ==> x != null
  //:: UnexpectedOutput(assert.failed:assertion.false, /silicon/issue/64/)
  // // UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/117/) // fixed with diff 8
  assert forall i: Int :: 0 <= i && i < |s| ==> s[i] != null
}

method reprotwo(s:Seq[Ref])
{
  inhale (forall x: Ref :: x in s ==> acc(x.f))
  inhale (forall x: Int :: (0 <= x) && (x < |s|) ==> (s[x].f == 0))
  assert (forall x: Int :: (0 <= x) && (x < |s|) ==> (s[x].f == 0))
}

method reprothree(s:Seq[Ref])
{
  inhale (forall x: Ref :: x in s ==> acc(x.f))
  inhale (forall x: Ref :: x in s ==> (x.f == 0))
  // currently works! //:: UnexpectedOutput(assert.failed:receiver.null, /silicon/issue/64/)
  // // UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/198/) // diff 8a fixes this
  assert (forall x: Int :: (0 <= x) && (x < |s|) ==> (s[x].f == 0))
    // Fails in Silicon when using Z3 4.5.0 (and earlier)
    // Works in Silicon when using Z3 4.5.1 (https://github.com/Z3Prover/z3/issues/935)
} 

method reprofour(s:Seq[Ref])
{
  inhale (forall x: Ref :: x in s ==> acc(x.f))
  inhale (forall x: Ref :: x in s ==> (x.f == 0))
  assert (forall x: Ref :: x in s ==> (x.f == 0))
  // // :: UnexpectedOutput(assert.failed:receiver.null, /silicon/issue/64/)
  assert |s|>0 ==> s[0].f == 0
    // Fails in Silicon when using Z3 4.5.0 (and earlier)
    // Works in Silicon when using Z3 4.5.1 (https://github.com/Z3Prover/z3/issues/935)
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axUnitJoinable { forall p: Perm :: {joinable(p, unit())} joinable(p, unit())}
    axiom axJoinableComm { forall p: Perm, q: Perm :: {joinable(p, q)} joinable(p, q) == joinable(q, p)}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}

    axiom axGeqPlus { forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(a, x)}
    axiom axGeqMinus {forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) && joinable(x, y) <==> geq(minus(a, y), x) && geq(a, y)}

}
