// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field f: Int

field elems: Seq[Ref]

/* Regular permissions */

function fun01(x: Ref, y: Ref, b: Bool): Int
  requires b ? acc(x.f) : acc(y.f)

function fun02(x: Ref, y: Ref, b: Bool): Int
  requires acc(x.f, b ? write : none)
  requires acc(y.f, !b ? write : none)

method test01(x: Ref, y: Ref, b: Bool)
  requires acc(x.f) && acc(y.f)
{
  y.f := 0

  assert fun01(x, y, true) == old(fun01(x, y, true))
  //:: UnexpectedOutput(assert.failed:assertion.false, /silicon/issue/205/)
  assert fun02(x, y, true) == old(fun02(x, y, true))
}

/* Quantified permissions */

function fun01qp(xs: Seq[Ref], i: Int): Int
  requires 0 <= i && i < |xs|
  requires forall j: Int :: 0 <= j && j < |xs| && j == i ==> acc(xs[j].f, write)

function fun02qp(xs: Seq[Ref], i: Int): Int
  requires 0 <= i && i < |xs|
  requires forall j: Int :: 0 <= j && j < |xs| ==> acc(xs[j].f, j == i ? write : none)

function fun03qp(x: Ref, i: Int): Int
  requires acc(x.elems)
  requires 0 <= i && i < |x.elems|
  requires forall j: Int :: 0 <= j && j < |x.elems| && j == i ==> acc(x.elems[j].f, write)

function fun04qp(x: Ref, i: Int): Int
  requires acc(x.elems)
  requires 0 <= i && i < |x.elems|
  requires forall j: Int :: 0 <= j && j < |x.elems| ==> acc(x.elems[j].f, j == i ? write : none)


method test02(xs: Seq[Ref], i1: Int, i2: Int, x: Ref)
  requires 0 <= i1 && i1 < |xs|
  requires 0 <= i2 && i2 < |xs|
  requires i1 != i2
  requires forall j: Int :: 0 <= j && j < |xs| ==> acc(xs[j].f, write)
  requires acc(x.elems) && x.elems == xs
{
  xs[i1].f := 0

  assert fun01qp(xs, i2) == old(fun01qp(xs, i2))
  assert fun02qp(xs, i2) == old(fun02qp(xs, i2))
  
  assert fun03qp(x, i2) == old(fun03qp(x, i2))
  assert fun04qp(x, i2) == old(fun04qp(x, i2))
  
  xs[i2].f := 0
  
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert fun01qp(xs, i2) == old(fun01qp(xs, i2))
  
}


method test03(xs: Seq[Ref], i1: Int, i2: Int, x: Ref)
  requires 0 <= i1 && i1 < |xs|
  requires 0 <= i2 && i2 < |xs|
  requires i1 != i2
  requires forall j: Int :: 0 <= j && j < |xs| ==> acc(xs[j].f, write)
  requires acc(x.elems) && x.elems == xs
{
  xs[i1].f := 0

  assert fun02qp(xs, i2) == old(fun02qp(xs, i2))
  
  xs[i2].f := 0
  
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert fun02qp(xs, i2) == old(fun02qp(xs, i2))
  
}


method test04(xs: Seq[Ref], i1: Int, i2: Int, x: Ref)
  requires 0 <= i1 && i1 < |xs|
  requires 0 <= i2 && i2 < |xs|
  requires i1 != i2
  requires forall j: Int :: 0 <= j && j < |xs| ==> acc(xs[j].f, write)
  requires acc(x.elems) && x.elems == xs
{
  xs[i1].f := 0

  assert fun03qp(x, i2) == old(fun03qp(x, i2))
  
  xs[i2].f := 0
  
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert fun03qp(x, i2) == old(fun03qp(x, i2))
  
}


method test05(xs: Seq[Ref], i1: Int, i2: Int, x: Ref)
  requires 0 <= i1 && i1 < |xs|
  requires 0 <= i2 && i2 < |xs|
  requires i1 != i2
  requires forall j: Int :: 0 <= j && j < |xs| ==> acc(xs[j].f, write)
  requires acc(x.elems) && x.elems == xs
{
  xs[i1].f := 0

  assert fun04qp(x, i2) == old(fun04qp(x, i2))
  
  xs[i2].f := 0
  
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert fun04qp(x, i2) == old(fun04qp(x, i2))
  
}
//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}
}
