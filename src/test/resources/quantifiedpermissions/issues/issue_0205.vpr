// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field f: Int

field elems: Seq[Ref]

/* Regular permissions */

function fun01(x: Ref, y: Ref, b: Bool): Int
  requires b ? acc(x.f) : acc(y.f)

function fun02(x: Ref, y: Ref, b: Bool): Int
  requires acc(x.f, b ? write : none)
  requires acc(y.f, !b ? write : none)

method test01(x: Ref, y: Ref, b: Bool)
  requires acc(x.f) && acc(y.f)
{
  y.f := 0

  assert fun01(x, y, true) == old(fun01(x, y, true))
  //:: UnexpectedOutput(assert.failed:assertion.false, /silicon/issue/205/)
  assert fun02(x, y, true) == old(fun02(x, y, true))
}

/* Quantified permissions */

function fun01qp(xs: Seq[Ref], i: Int): Int
  requires 0 <= i && i < |xs|
  requires forall j: Int :: 0 <= j && j < |xs| && j == i ==> acc(xs[j].f, write)

function fun02qp(xs: Seq[Ref], i: Int): Int
  requires 0 <= i && i < |xs|
  requires forall j: Int :: 0 <= j && j < |xs| ==> acc(xs[j].f, j == i ? write : none)

function fun03qp(x: Ref, i: Int): Int
  requires acc(x.elems)
  requires 0 <= i && i < |x.elems|
  requires forall j: Int :: 0 <= j && j < |x.elems| && j == i ==> acc(x.elems[j].f, write)

function fun04qp(x: Ref, i: Int): Int
  requires acc(x.elems)
  requires 0 <= i && i < |x.elems|
  requires forall j: Int :: 0 <= j && j < |x.elems| ==> acc(x.elems[j].f, j == i ? write : none)


method test02(xs: Seq[Ref], i1: Int, i2: Int, x: Ref)
  requires 0 <= i1 && i1 < |xs|
  requires 0 <= i2 && i2 < |xs|
  requires i1 != i2
  requires forall j: Int :: 0 <= j && j < |xs| ==> acc(xs[j].f, write)
  requires acc(x.elems) && x.elems == xs
{
  xs[i1].f := 0

  assert fun01qp(xs, i2) == old(fun01qp(xs, i2))
  assert fun02qp(xs, i2) == old(fun02qp(xs, i2))
  
  assert fun03qp(x, i2) == old(fun03qp(x, i2))
  assert fun04qp(x, i2) == old(fun04qp(x, i2))
  
  xs[i2].f := 0
  
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert fun01qp(xs, i2) == old(fun01qp(xs, i2))
  
}


method test03(xs: Seq[Ref], i1: Int, i2: Int, x: Ref)
  requires 0 <= i1 && i1 < |xs|
  requires 0 <= i2 && i2 < |xs|
  requires i1 != i2
  requires forall j: Int :: 0 <= j && j < |xs| ==> acc(xs[j].f, write)
  requires acc(x.elems) && x.elems == xs
{
  xs[i1].f := 0

  assert fun02qp(xs, i2) == old(fun02qp(xs, i2))
  
  xs[i2].f := 0
  
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert fun02qp(xs, i2) == old(fun02qp(xs, i2))
  
}


method test04(xs: Seq[Ref], i1: Int, i2: Int, x: Ref)
  requires 0 <= i1 && i1 < |xs|
  requires 0 <= i2 && i2 < |xs|
  requires i1 != i2
  requires forall j: Int :: 0 <= j && j < |xs| ==> acc(xs[j].f, write)
  requires acc(x.elems) && x.elems == xs
{
  xs[i1].f := 0

  assert fun03qp(x, i2) == old(fun03qp(x, i2))
  
  xs[i2].f := 0
  
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert fun03qp(x, i2) == old(fun03qp(x, i2))
  
}


method test05(xs: Seq[Ref], i1: Int, i2: Int, x: Ref)
  requires 0 <= i1 && i1 < |xs|
  requires 0 <= i2 && i2 < |xs|
  requires i1 != i2
  requires forall j: Int :: 0 <= j && j < |xs| ==> acc(xs[j].f, write)
  requires acc(x.elems) && x.elems == xs
{
  xs[i1].f := 0

  assert fun04qp(x, i2) == old(fun04qp(x, i2))
  
  xs[i2].f := 0
  
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert fun04qp(x, i2) == old(fun04qp(x, i2))
  
}
//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(_x: Perm, _y: Perm): Perm
    function minus(_x: Perm, _y: Perm): Perm
    function geq(_x: Perm, _y: Perm): Bool
    function joinable(_x: Perm, _y: Perm): Bool

    function times(_x: Perm, _y: Perm): Perm

    //Auxiliary functions
    function share(_x: Rational): Perm
    function valid_share(_x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall _a: Int, _b: Int :: {biConstr(_a, _b)} biConstr(_a, _b) == share(_a/_b)}


    axiom axValid { forall _x: Rational :: {valid_share(_x)}
        valid_share(_x) <==> (_x >= 0/1 && _x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall _a: Rational, _b: Rational :: { share(_a), share(_b) }
        share(_a) == share(_b) ==> _a == _b
    }
    axiom axPlus { forall _a: Rational, _b: Rational :: { plus(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) ==> plus(share(_a), share(_b)) == share(_a + _b)
    }
    axiom axMinus { forall _a: Rational, _b: Rational :: { minus(share(_a), share(_b)) }
        geq(share(_a), share(_b)) ==> minus(share(_a), share(_b)) == share(_a - _b)
    }
    axiom axCanJoin { forall _a: Rational, _b: Rational :: { joinable(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) <==> valid_share(_a) && valid_share(_b) && valid_share(_a + _b)
    }
    axiom axGeq { forall _a: Rational, _b: Rational :: { geq(share(_a), share(_b)) }
        geq(share(_a), share(_b)) <==> valid_share(_a) && valid_share(_b) && valid_share(_a - _b)
    }
    axiom axMul { forall _a: Rational, _b: Rational :: {times(share(_a), share(_b))} times(share(_a), share(_b)) == share(_a * _b)}

    axiom axJoinComm {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == plus(_q, _p)}
    axiom axJoinAssoc {forall _p: Perm, _q: Perm, _r: Perm :: {plus(plus(_p, _q), _r)} plus(plus(_p, _q), _r) == plus(_p, plus(_q, _r))}
    axiom axJoinCancel { forall _p: Perm, _q: Perm, _x: Perm :: {plus(_p, _x), plus(_q, _x)} plus(_p, _x) == plus(_q, _x) ==> _p == _q}

    axiom axUnitGeq { forall _p: Perm :: {geq(_p, unit())} geq(_p, unit())}
    axiom axUnitGeq2 { forall _p: Perm :: {geq(unit(),_p)} geq(unit(),_p) <==> _p == unit()}
    axiom axFullGeq { forall _p: Perm :: {geq(full(),_p)} geq(full(),_p)}
    axiom axFullGeq2 { forall _p: Perm :: {geq(_p, full())} geq(_p, full()) <==> _p == full()}

    axiom axUnitJoin { forall _p: Perm :: {plus(unit(),_p)} plus(unit(),_p) == _p}
    axiom axUnitJoinable { forall _p: Perm :: {joinable(_p, unit())} joinable(_p, unit())}
    axiom axJoinableComm { forall _p: Perm, _q: Perm :: {joinable(_p, _q)} joinable(_p, _q) == joinable(_q,_p)}
    axiom axTimes0 { forall _p: Perm :: {times(unit(),_p)} times(unit(),_p) == unit()}
    axiom axTimes1 { forall _p: Perm :: {times(full(),_p)} times(unit(),_p) == _p}

    axiom axGeqPlus { forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(_a, _x)}
    axiom axGeqMinus {forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(minus(_a, _y), _x)}
    axiom axMinusUneq { forall _p: Perm, _q: Perm :: {geq(_p, _q)} geq(_p, _q) && _p != _q ==> minus(_p, _q) != unit()}

}
