// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

// class Cell
field value:Int

// class ArrayOfInt
field array:Seq[Ref] // containing Cell(s)

method parallel_max(a:Ref, start:Int, end:Int, kperm: Perm) returns (mx: Int, pos: Int)
  requires a != null
  requires acc(a.array, wildcard)
  requires 0 <= start && start < end && end < |a.array|
  requires kperm >= none
  requires forall i:Int :: i in [start..end) ==> acc(a.array[i].value, kperm)
  requires |a.array| >= 1
  requires none < kperm && kperm < write
  ensures acc(a.array, wildcard)
  ensures end < |a.array|
  ensures forall i:Int :: i in [start..end) ==> acc(a.array[i].value, kperm)
  ensures start<=pos && pos<end
  ensures a.array[pos].value == mx
  ensures (forall l: Int :: l in [start..end) ==> a.array[l].value<=mx)
{
    var middle:Int
    var ml: Int
    var mr: Int
    var kperm1: Perm
    var posl: Int
    var posr: Int

    if(end-start > 1)
    {
        middle := start + (end-start)\2

        // fork tl := parallel_max(a, start, middle, (1 / 2) * kperm)
        exhale a != null
        exhale acc(a.array, wildcard)
        exhale 0 <= start && start < middle && middle < |a.array|
        exhale forall i1:Int :: i1 in [start..middle) ==> acc(a.array[i1].value, (1 / 2) * kperm)
        exhale |a.array| >= 1
        exhale none < (1 / 2) * kperm && (1 / 2) * kperm < write

        // fork tr := parallel_max(a, middle, end, (1 / 2) * kperm)
        exhale a != null
        exhale acc(a.array, wildcard)
        exhale 0 <= middle && middle < end && end < |a.array|
        exhale forall i2:Int :: i2 in [middle..end) ==> acc(a.array[i2].value, (1 / 2) * kperm)
        exhale |a.array| >= 1
        exhale none < (1 / 2) * kperm && (1 / 2) * kperm < write

        // join ml, posl := tl
        inhale acc(a.array, wildcard)
        inhale middle < |a.array|
        inhale forall i3:Int :: i3 in [start..middle) ==> acc(a.array[i3].value, (1 / 2) * kperm)
        inhale start<=posl && posl<middle
        inhale a.array[posl].value == ml
        inhale (forall l1: Int :: l1 in [start..middle) ==> a.array[l1].value <= ml)

        // join mr, posr := tr
        inhale acc(a.array, wildcard)
        inhale middle < |a.array|
        inhale forall i5:Int :: i5 in [middle..end) ==> acc(a.array[i5].value, (1 / 2) * kperm)
        inhale middle<=posr && posr<end
        inhale a.array[posr].value == mr
        inhale (forall l2: Int :: l2 in [middle..end) ==> a.array[l2].value <= mr)

        mx := ml>mr ? ml : mr
        if (mx == ml) { pos := posl } else { pos := posr }
    } else {
        mx := (a.array[start]).value
        pos := start
    }

    // ensure proper framing
    assert forall i6:Int :: i6 in [start..end) ==> a.array[i6].value == old(a.array[i6].value)
}






//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axUnitJoinable { forall p: Perm :: {joinable(p, unit())} joinable(p, unit())}
    axiom axJoinableComm { forall p: Perm, q: Perm :: {joinable(p, q)} joinable(p, q) == joinable(q, p)}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}

    axiom axGeqPlus { forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(a, x)}
    axiom axGeqMinus {forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(minus(a, y), x)}
    axiom axMinusUneq { forall p: Perm, q: Perm :: {geq(p, q)} geq(p, q) && p != q ==> minus(p, q) != unit()}

}
