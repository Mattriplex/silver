// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field value: Int

method test01(S:Seq[Ref], a:Int)
  requires 0 <= a && a < |S|
  requires forall j:Int :: j in [0..|S|) ==> acc(S[j].value, write)
  ensures forall j:Int :: j in [0..|S|) ==> acc(S[j].value, write)
  ensures S[a].value == 2
{
  S[a].value := 2
}

method test02(S:Seq[Ref],a:Int, b:Int, c:Int)
  requires 0 <= a && a < b && b < c && c < |S|
  requires forall j:Int :: j in [0..|S|) ==> acc(S[j].value, write)
  ensures forall j:Int :: j in [0..|S|) ==> acc(S[j].value, write)
  ensures S[a].value == 5
  ensures S[b].value == 10
  ensures S[c].value == 1
{
  S[a].value := 5
  S[b].value := 10
  S[c].value := 1
}

method test03(S: Seq[Ref], k: Int, a: Int, b: Int)
  requires 0 <= k && k < |S| && 0 <= a && a < b && b < |S|
  requires forall j:Int :: j in [0..|S|) ==> acc(S[j].value, write)
  ensures forall j:Int :: j in [0..|S|) ==> acc(S[j].value, write)
  ensures S[a].value == 5
  ensures S[b].value == 6

  //:: ExpectedOutput(postcondition.violated:assertion.false)
  ensures S[k].value == 0
{
  exhale forall l: Int :: l in [0..k) ==> acc(S[l].value, 1/2)
  inhale forall o:Int :: o in [0..k) ==> acc(S[o].value, 1/2)
  exhale forall p:Int :: p in [k..|S|) ==> acc(S[p].value, 1/2)
  inhale forall q:Int :: q in [k..|S|) ==> acc(S[q].value, 1/2)

  S[k].value := 0
  S[a].value := 5
  S[b].value := 6
}


//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axUnitJoinable { forall p: Perm :: {joinable(p, unit())} joinable(p, unit())}
    axiom axJoinableComm { forall p: Perm, q: Perm :: {joinable(p, q)} joinable(p, q) == joinable(q, p)}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}

    axiom axGeqPlus { forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(a, x)}
    axiom axGeqMinus {forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(minus(a, y), x)}
    axiom axMinusUneq { forall p: Perm, q: Perm :: {geq(p, q)} geq(p, q) && p != q ==> minus(p, q) != unit()}

}
