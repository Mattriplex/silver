// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

//:: IgnoreFile(/carbon/issue/91/)

field f: Int

method bfind_orig(S: Seq[Ref], x: Int, p: Perm) returns (index: Int)
  requires p > none && p < write
  requires forall i: Int :: {S[i].f} i in [0..|S|)  ==> acc(S[i].f, p)
  requires forall i: Int :: {S[i].f} i in [0..|S|-1)  ==> S[i].f < S[i + 1].f
  ensures forall i: Int :: {S[i].f} i in [0..|S|) ==> acc(S[i].f, p)
  ensures index in [-1..|S|)
  //:: ExpectedOutput(postcondition.violated:assertion.false)
  //:: MissingOutput(postcondition.violated:assertion.false, /silicon/issue/34/)
  ensures index in [0..|S|) ==> S[index].f == x
  //:: ExpectedOutput(postcondition.violated:assertion.false)
  ensures index == -1 ==> (forall i: Int :: {S[i].f} i in [0..|S|) ==> S[i].f != x)
{
  if(|S| == 0) {
    index := -1
  } elseif (|S|==1) {
    index := x == S[0].f ? 0 : -1
  } else {
    var k:Int
    inhale 0<k && k<|S|-1

    if (S[k].f < x) {
      index := bfind_orig(S[0..k], x, p)
    } else {
      index := bfind_orig(S[k..|S|], x, p)
    }
  }
}

method bfind_fixed_ineq(S: Seq[Ref], x: Int, p: Perm) returns (index: Int)
  requires p > none && p < write
  requires forall i: Int :: {S[i]} 0 <= i && i < |S| ==> acc(S[i].f, p)
  requires forall i: Int, j: Int :: {S[i], S[j]}
              0 <= i && i < j && j < |S| ==> S[i].f < S[j].f // [FIXED] Global inequalities
  ensures forall i: Int :: {S[i]} 0 <= i && i < |S| ==> acc(S[i].f, p)
  ensures -1 <= index && index < |S|
  ensures 0 <= index && index < |S| ==> S[index].f == x
  ensures index == -1 ==> (forall i: Int :: {S[i]} 0 <= i && i < |S| ==> S[i].f != x)
{
  if (|S| == 0) {
    index := -1
  } elseif (|S|==1) {
    index := x == S[0].f ? 0 : -1
  } else {
    var k:Int
    inhale 0<k && k<|S|-1

    if (x < S[k].f) { // [FIXED] Inequality
      index := bfind_fixed_ineq(S[0..k], x, p/2) // [FIXED] framing (p/2)
    } else {
      index := bfind_fixed_ineq(S[k..|S|], x, p/2) // [FIXED] framing
      index := index + (index == -1 ? 0 : k) // [FIXED] Index shift
    }
  }
}

/* Copy of bfind_fixed_ineq, but uses range expressions `i in [a..b)`
 * instead of inequalities `a <= i && i < b`.
 */
method bfind_fixed_seqin(S: Seq[Ref], x: Int, p: Perm) returns (index: Int)
  requires p > none && p < write
  requires forall i: Int :: {S[i]} i in [0..|S|) ==> acc(S[i].f, p)
  requires forall i: Int, j: Int :: {S[i], S[j]} i in [0..j) && j in [i..|S|) ==> S[i].f < S[j].f
  ensures forall i: Int :: {S[i]} i in [0..|S|) ==> acc(S[i].f, p)
  ensures index in [-1..|S|)
  ensures index in [0..|S|) ==> S[index].f == x
  ensures index == -1 ==> (forall i: Int :: {S[i]} i in [0..|S|) ==> S[i].f != x)
{
  if (|S| == 0) {
    index := -1
  } elseif (|S|==1) {
    index := x == S[0].f ? 0 : -1
  } else {
    var k:Int
    inhale 0<k && k<|S|-1

    if (x < S[k].f) {
      index := bfind_fixed_ineq(S[0..k], x, p/2)
    } else {
      index := bfind_fixed_ineq(S[k..|S|], x, p/2)
      index := index + (index == -1 ? 0 : k)
    }
  }
}

/* Copy of bfind_fixed_seqin, but uses heap-dependent triggers `S[i].f`
 * instead of heap-independent triggers `S[i]`.
 */
method bfind_fixed_seqin_heap_dep_triggers(S: Seq[Ref], x: Int, p: Perm) returns (index: Int)
  requires p > none && p < write
  requires forall i: Int :: {S[i].f} i in [0..|S|) ==> acc(S[i].f, p)
  requires forall i: Int, j: Int :: {S[i].f, S[j].f} i in [0..j) && j in [i..|S|) ==> S[i].f < S[j].f
  ensures forall i: Int :: {S[i].f} i in [0..|S|) ==> acc(S[i].f, p)
  ensures index in [-1..|S|)
  ensures index in [0..|S|) ==> S[index].f == x
  ensures index == -1 ==> (forall i: Int :: {S[i].f} i in [0..|S|) ==> S[i].f != x)
{
  if (|S| == 0) {
    index := -1
  } elseif (|S|==1) {
    index := x == S[0].f ? 0 : -1
  } else {
    var k:Int
    inhale 0<k && k<|S|-1

    if (x < S[k].f) {
      index := bfind_fixed_ineq(S[0..k], x, p/2)
    } else {
      index := bfind_fixed_ineq(S[k..|S|], x, p/2)
      index := index + (index == -1 ? 0 : k)
    }
  }
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(_x: Perm, _y: Perm): Perm
    function minus(_x: Perm, _y: Perm): Perm
    function geq(_x: Perm, _y: Perm): Bool
    function joinable(_x: Perm, _y: Perm): Bool

    function times(_x: Perm, _y: Perm): Perm

    //Auxiliary functions
    function share(_x: Rational): Perm
    function valid_share(_x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall _a: Int, _b: Int :: {biConstr(_a, _b)} biConstr(_a, _b) == share(_a/_b)}


    axiom axValid { forall _x: Rational :: {valid_share(_x)}
        valid_share(_x) <==> (_x >= 0/1 && _x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall _a: Rational, _b: Rational :: { share(_a), share(_b) }
        share(_a) == share(_b) ==> _a == _b
    }
    axiom axPlus { forall _a: Rational, _b: Rational :: { plus(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) ==> plus(share(_a), share(_b)) == share(_a + _b)
    }
    axiom axMinus { forall _a: Rational, _b: Rational :: { minus(share(_a), share(_b)) }
        geq(share(_a), share(_b)) ==> minus(share(_a), share(_b)) == share(_a - _b)
    }
    axiom axCanJoin { forall _a: Rational, _b: Rational :: { joinable(share(_a), share(_b)) }
        valid_share(_a) && valid_share(_b) ==> (joinable(share(_a), share(_b)) == valid_share(_a + _b))
    }
    axiom axGeq { forall _a: Rational, _b: Rational :: { geq(share(_a), share(_b)) }
        valid_share(_a) && valid_share(_b) ==> (geq(share(_a), share(_b)) <==> valid_share(_a - _b))
    }
    axiom axMul { forall _a: Rational, _b: Rational :: {times(share(_a), share(_b))} times(share(_a), share(_b)) == share(_a * _b)}

    axiom axJoinComm {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == plus(_q, _p)}
    axiom axJoinAssoc {forall _p: Perm, _q: Perm, _r: Perm :: {plus(plus(_p, _q), _r)} plus(plus(_p, _q), _r) == plus(_p, plus(_q, _r))}
    axiom axJoinCancel { forall _p: Perm, _q: Perm, _x: Perm :: {plus(_p, _x), plus(_q, _x)} plus(_p, _x) == plus(_q, _x) ==> _p == _q}

    axiom axUnitGeq { forall _p: Perm :: {geq(_p, unit())} geq(_p, unit())}
    axiom axUnitGeq2 { forall _p: Perm :: {geq(unit(),_p)} geq(unit(),_p) <==> _p == unit()}
    axiom axFullGeq { forall _p: Perm :: {geq(full(),_p)} geq(full(),_p)}
    axiom axFullGeq2 { forall _p: Perm :: {geq(_p, full())} geq(_p, full()) <==> _p == full()}
    axiom axGeqId { forall _p: Perm :: {geq(_p, _p)} geq(_p, _p)}
    axiom axMinusId { forall _p: Perm :: {minus(_p, _p)} minus(_p, _p) == unit()}


    axiom axUnitJoin { forall _p: Perm :: {plus(unit(),_p)} plus(unit(),_p) == _p}
    axiom axUnitJoinable { forall _p: Perm :: {joinable(_p, unit())} joinable(_p, unit())}
    axiom axJoinableComm { forall _p: Perm, _q: Perm :: {joinable(_p, _q)} joinable(_p, _q) == joinable(_q,_p)}
    axiom axTimes0 { forall _p: Perm :: {times(unit(),_p)} times(unit(),_p) == unit()}
    axiom axTimes1 { forall _p: Perm :: {times(full(),_p)} times(full(),_p) == _p}

    axiom axGeqPlus { forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(_a, _x)}
    axiom axGeqMinus {forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(minus(_a, _y), _x)}
    axiom axMinusUneq { forall _p: Perm, _q: Perm :: {geq(_p, _q)} geq(_p, _q) && _p != _q ==> minus(_p, _q) != unit()}

    axiom axPositive {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == unit() ==> _p == unit() && _q == unit()}
    axiom axPlusGeq {forall _p: Perm, _q: Perm :: {geq(plus(_p, _q), _p)} /*joinable(_p, _q) ==>*/ geq(plus(_p, _q), _p)}
    axiom axMinusCancel {forall _p: Perm, _q: Perm :: {minus(plus(_p, _q), _q)} minus(plus(_p, _q), _q) == _p}

}
