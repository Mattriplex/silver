// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

//:: IgnoreFile(/carbon/issue/91/)

field f: Int

method bfind_orig(S: Seq[Ref], x: Int, p: Perm) returns (index: Int)
  requires p > none && p < write
  requires forall i: Int :: {S[i].f} i in [0..|S|)  ==> acc(S[i].f, p)
  requires forall i: Int :: {S[i].f} i in [0..|S|-1)  ==> S[i].f < S[i + 1].f
  ensures forall i: Int :: {S[i].f} i in [0..|S|) ==> acc(S[i].f, p)
  ensures index in [-1..|S|)
  //:: ExpectedOutput(postcondition.violated:assertion.false)
  //:: MissingOutput(postcondition.violated:assertion.false, /silicon/issue/34/)
  ensures index in [0..|S|) ==> S[index].f == x
  //:: ExpectedOutput(postcondition.violated:assertion.false)
  ensures index == -1 ==> (forall i: Int :: {S[i].f} i in [0..|S|) ==> S[i].f != x)
{
  if(|S| == 0) {
    index := -1
  } elseif (|S|==1) {
    index := x == S[0].f ? 0 : -1
  } else {
    var k:Int
    inhale 0<k && k<|S|-1

    if (S[k].f < x) {
      index := bfind_orig(S[0..k], x, p)
    } else {
      index := bfind_orig(S[k..|S|], x, p)
    }
  }
}

method bfind_fixed_ineq(S: Seq[Ref], x: Int, p: Perm) returns (index: Int)
  requires p > none && p < write
  requires forall i: Int :: {S[i]} 0 <= i && i < |S| ==> acc(S[i].f, p)
  requires forall i: Int, j: Int :: {S[i], S[j]}
              0 <= i && i < j && j < |S| ==> S[i].f < S[j].f // [FIXED] Global inequalities
  ensures forall i: Int :: {S[i]} 0 <= i && i < |S| ==> acc(S[i].f, p)
  ensures -1 <= index && index < |S|
  ensures 0 <= index && index < |S| ==> S[index].f == x
  ensures index == -1 ==> (forall i: Int :: {S[i]} 0 <= i && i < |S| ==> S[i].f != x)
{
  if (|S| == 0) {
    index := -1
  } elseif (|S|==1) {
    index := x == S[0].f ? 0 : -1
  } else {
    var k:Int
    inhale 0<k && k<|S|-1

    if (x < S[k].f) { // [FIXED] Inequality
      index := bfind_fixed_ineq(S[0..k], x, p/2) // [FIXED] framing (p/2)
    } else {
      index := bfind_fixed_ineq(S[k..|S|], x, p/2) // [FIXED] framing
      index := index + (index == -1 ? 0 : k) // [FIXED] Index shift
    }
  }
}

/* Copy of bfind_fixed_ineq, but uses range expressions `i in [a..b)`
 * instead of inequalities `a <= i && i < b`.
 */
method bfind_fixed_seqin(S: Seq[Ref], x: Int, p: Perm) returns (index: Int)
  requires p > none && p < write
  requires forall i: Int :: {S[i]} i in [0..|S|) ==> acc(S[i].f, p)
  requires forall i: Int, j: Int :: {S[i], S[j]} i in [0..j) && j in [i..|S|) ==> S[i].f < S[j].f
  ensures forall i: Int :: {S[i]} i in [0..|S|) ==> acc(S[i].f, p)
  ensures index in [-1..|S|)
  ensures index in [0..|S|) ==> S[index].f == x
  ensures index == -1 ==> (forall i: Int :: {S[i]} i in [0..|S|) ==> S[i].f != x)
{
  if (|S| == 0) {
    index := -1
  } elseif (|S|==1) {
    index := x == S[0].f ? 0 : -1
  } else {
    var k:Int
    inhale 0<k && k<|S|-1

    if (x < S[k].f) {
      index := bfind_fixed_ineq(S[0..k], x, p/2)
    } else {
      index := bfind_fixed_ineq(S[k..|S|], x, p/2)
      index := index + (index == -1 ? 0 : k)
    }
  }
}

/* Copy of bfind_fixed_seqin, but uses heap-dependent triggers `S[i].f`
 * instead of heap-independent triggers `S[i]`.
 */
method bfind_fixed_seqin_heap_dep_triggers(S: Seq[Ref], x: Int, p: Perm) returns (index: Int)
  requires p > none && p < write
  requires forall i: Int :: {S[i].f} i in [0..|S|) ==> acc(S[i].f, p)
  requires forall i: Int, j: Int :: {S[i].f, S[j].f} i in [0..j) && j in [i..|S|) ==> S[i].f < S[j].f
  ensures forall i: Int :: {S[i].f} i in [0..|S|) ==> acc(S[i].f, p)
  ensures index in [-1..|S|)
  ensures index in [0..|S|) ==> S[index].f == x
  ensures index == -1 ==> (forall i: Int :: {S[i].f} i in [0..|S|) ==> S[i].f != x)
{
  if (|S| == 0) {
    index := -1
  } elseif (|S|==1) {
    index := x == S[0].f ? 0 : -1
  } else {
    var k:Int
    inhale 0<k && k<|S|-1

    if (x < S[k].f) {
      index := bfind_fixed_ineq(S[0..k], x, p/2)
    } else {
      index := bfind_fixed_ineq(S[k..|S|], x, p/2)
      index := index + (index == -1 ? 0 : k)
    }
  }
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axUnitJoinable { forall p: Perm :: {joinable(p, unit())} joinable(p, unit())}
    axiom axJoinableComm { forall p: Perm, q: Perm :: {joinable(p, q)} joinable(p, q) == joinable(q, p)}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}

    axiom axGeqPlus { forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(a, x)}
    axiom axGeqMinus {forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(minus(a, y), x)}
    axiom axMinusUneq { forall p: Perm, q: Perm :: {geq(p, q)} geq(p, q) && p != q ==> minus(p, q) != unit()}

}
