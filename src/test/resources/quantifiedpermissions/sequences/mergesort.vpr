// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

// class Cell
field value:Int

// class ArrayOfInt
field array:Seq[Ref] // containing Cell(s)

method parallel_mergesort(a:Ref, b:Ref, start:Int, end:Int)
  requires acc(a.array, wildcard)
  requires acc(b.array, wildcard)
  requires start >= 0 && end <= |a.array| && |a.array| == |b.array|
  requires forall i:Int :: i in [start..end) ==> acc(a.array[i].value, write)
  requires forall i:Int :: i in [start..end) ==> acc(b.array[i].value, write)
  ensures acc(a.array, wildcard)
  ensures acc(b.array, wildcard)
  ensures start >= 0 && end <= |a.array| && |a.array| == |b.array|
  ensures forall i:Int :: i in [start..end) ==> acc(a.array[i].value, write)
  ensures forall i:Int :: i in [start..end) ==> acc(b.array[i].value, write)
  ensures a.array == old(a.array)
  ensures b.array == old(b.array)
{
    var middle: Int
	var t1A: Seq[Ref]
	var t1B: Seq[Ref]
	var t2A: Seq[Ref]
	var t2B: Seq[Ref]

    if(end-start > 1)
    {
        middle := start + (end-start)\2

		// fork t1 := parallel_mergesort(a,b, start, middle)
		t1A := a.array
		t1B := b.array
		exhale acc(a.array, wildcard)
        exhale acc(b.array, wildcard)
        exhale start >= 0 && middle <= |a.array| && |a.array| == |b.array|
        exhale forall i:Int :: i in [start..middle) ==> acc(a.array[i].value, write)
        exhale forall i:Int :: i in [start..middle) ==> acc(b.array[i].value, write)

		// fork t2 := parallel_mergesort(a,b, middle, end)
		t2A := a.array
		t2B := b.array
		exhale acc(a.array, wildcard)
        exhale acc(b.array, wildcard)
        exhale middle >= 0 && end <= |a.array| && |a.array| == |b.array|
        exhale forall i:Int :: i in [middle..end) ==> acc(a.array[i].value, write)
        exhale forall i:Int :: i in [middle..end) ==> acc(b.array[i].value, write)

		// join t1
		inhale acc(a.array, wildcard)
        inhale acc(b.array, wildcard)
        inhale forall i:Int :: i in [start..middle) ==> acc(a.array[i].value, write)
        inhale forall i:Int :: i in [start..middle) ==> acc(b.array[i].value, write)
        inhale a.array == t1A
        inhale b.array == t1B

		//join t2
	    inhale acc(a.array, wildcard)
        inhale acc(b.array, wildcard)
        inhale forall i:Int :: i in [middle..end) ==> acc(a.array[i].value, write)
        inhale forall i:Int :: i in [middle..end) ==> acc(b.array[i].value, write)
        inhale a.array == t2A
        inhale b.array == t2B

        merge(a,b,start,middle,end)
    }
}

method merge(a: Ref, b:Ref, start:Int, middle:Int, end:Int)
  requires acc(a.array, wildcard)
  requires acc(b.array, wildcard)
  requires 0 <= start && end <= |a.array| && |b.array| == |a.array| && start < middle && middle < end
  requires forall k:Int :: k in [start..end) ==> acc(a.array[k].value, write)
  requires forall l:Int :: l in [start..end) ==> acc(b.array[l].value, write)
  ensures acc(a.array, wildcard)
  ensures acc(b.array, wildcard)
  ensures a.array == old(a.array)
  ensures b.array == old(b.array)
  ensures forall i:Int :: i in [start..end) ==> acc(a.array[i].value, write)
  ensures forall i:Int :: i in [start..end) ==> acc(b.array[i].value, write)
{
    var I:Int := start
    var J:Int := middle
    var N:Int := start

    while(N < end)
      invariant acc(a.array, wildcard)
      invariant acc(b.array, wildcard)
      invariant 0 <= start && end <= |a.array|
      invariant N == I+J-middle && 0 <= start
      invariant start <= I
      invariant middle <= J
      invariant J <= end
      invariant |a.array| == |b.array|
      invariant a.array == old(a.array)
	  invariant b.array == old(b.array)
      invariant forall i:Int :: i in [start..end) ==> acc(a.array[i].value, write)
	  invariant forall i:Int :: i in [start..end) ==> acc(b.array[i].value, write)
    {
        if(J == end || (a.array[I]).value < (a.array[J]).value)
        {
            (b.array[N]).value := (a.array[I]).value
            I:=I+1
        } else
        {
            (b.array[N]).value := (a.array[J]).value
            J:=J+1
        }
        N:=N+1
    }
}


//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axUnitJoinable { forall p: Perm :: {joinable(p, unit())} joinable(p, unit())}
    axiom axJoinableComm { forall p: Perm, q: Perm :: {joinable(p, q)} joinable(p, q) == joinable(q, p)}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}

    axiom axGeqPlus { forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(a, x)}
    axiom axGeqMinus {forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(minus(a, y), x)}
    axiom axMinusUneq { forall p: Perm, q: Perm :: {geq(p, q)} geq(p, q) && p != q ==> minus(p, q) != unit()}

}
