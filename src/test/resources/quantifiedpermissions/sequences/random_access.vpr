// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field f: Int

method test01(s: Seq[Ref], a: Int, b: Int, n: Int)
  requires 0 <= a && 0 < b && 0 < n
  requires a + n * b < |s|
{
  var j: Int

  inhale 0 <= j && j < n
  inhale forall i: Int :: {i in [0..n)} i in [0..n) ==> acc(s[a + i*b].f)
    /* Yields the non-null axiom

         forall i: Int
             {i in [0..n)}
           i in [0..n) ==> s[a+i*b] != null

       The trigger only contains (i in [0..n)) but not (s[a+i*b]) because the
       latter contains an arithmetic expression, which Z3 doesn't allow in
       triggers.
       Introducing a second quantified variable j to replace a+i*b with isn't
       straight-forward because one needs to preserve the relatonship between
       i and j. Moreover, s[j] on its own wouldn't be a valid trigger because
       it wouldn't cover all quantified variables.
     */

  /* TODO: Fails because ($Seq.at s (+ a (* i b))) doesn't trigger above axiom */
  //:: UnexpectedOutput(assert.failed:assertion.false, /silver/issue/67/)
  assert s[a + j*b] != null
}

function exp(a: Int, i: Int, b: Int): Int {
  a + i*b
}

method test04(s: Seq[Ref], a: Int, b: Int, n: Int)
  requires 0 <= a && 0 < b && 0 < n
  requires a + n * b < |s|
{
  var j: Int

  inhale 0 <= j && j < n
  inhale forall i: Int :: i in [0..n) ==> acc(s[exp(a, i, b)].f)
    /* Yields the non-null axiom

         forall i: Int
             {i in [0..n)}
             {s[exp(a, i, b)]}
           i in [0..n) ==> s[exp(a, i, b)] != null
     */

  /* Using exp(a, j, b) will trigger above axiom */
  assert s[exp(a, j, b)] != null
}

method test02(s: Seq[Ref], a: Int, b: Int)
  requires 0 <= a && 0 < b
  requires forall i: Int :: i in [a..|s|) && (i - a) % b == 0 ==> acc(s[i].f)
{
  var j: Int := a

  while (j < |s|)
    invariant a <= j
    invariant (j - a) % b == 0
    invariant forall i: Int :: i in [a..|s|) && (i - a) % b == 0 ==> acc(s[i].f)
  {
    assert j in [a..|s|)      /* Can be proven */
    assert (j - a) % b == 0   /* Can be proven */

    s[j].f := j
    j := j + b

    assume (j - a) % b == 0 /* Cannot be proven, but is correct */
  }
}

method test03(s: Seq[Ref], a: Int, b: Int)
  requires 0 <= a && 0 < b
  requires forall i: Int :: i in [a..|s|) && (i - a) % b == 0 ==> acc(s[i].f)
{
  var j: Int := 0
  assert j*b % b == 0

  while (a+j*b < |s|)
    invariant 0 <= j
    invariant j*b % b == 0
    invariant forall i: Int :: i in [a..|s|) && (i - a) % b == 0 ==> acc(s[i].f)
  {
    assert a+j*b in [a..|s|) /* Can be proven */
    assert j*b % b == 0      /* Can be proven */

    s[a+j*b].f := j
    j := j + 1

    assume j*b % b == 0 /* Cannot be proven, but is correct */
  }
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(_x: Perm, _y: Perm): Perm
    function minus(_x: Perm, _y: Perm): Perm
    function geq(_x: Perm, _y: Perm): Bool
    function joinable(_x: Perm, _y: Perm): Bool

    function times(_x: Perm, _y: Perm): Perm

    //Auxiliary functions
    function share(_x: Rational): Perm
    function valid_share(_x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall _a: Int, _b: Int :: {biConstr(_a, _b)} biConstr(_a, _b) == share(_a/_b)}


    axiom axValid { forall _x: Rational :: {valid_share(_x)}
        valid_share(_x) <==> (_x >= 0/1 && _x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall _a: Rational, _b: Rational :: { share(_a), share(_b) }
        share(_a) == share(_b) ==> _a == _b
    }
    axiom axPlus { forall _a: Rational, _b: Rational :: { plus(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) ==> plus(share(_a), share(_b)) == share(_a + _b)
    }
    axiom axMinus { forall _a: Rational, _b: Rational :: { minus(share(_a), share(_b)) }
        geq(share(_a), share(_b)) ==> minus(share(_a), share(_b)) == share(_a - _b)
    }
    axiom axCanJoin { forall _a: Rational, _b: Rational :: { joinable(share(_a), share(_b)) }
        valid_share(_a) && valid_share(_b) ==> (joinable(share(_a), share(_b)) == valid_share(_a + _b))
    }
    axiom axGeq { forall _a: Rational, _b: Rational :: { geq(share(_a), share(_b)) }
        valid_share(_a) && valid_share(_b) ==> (geq(share(_a), share(_b)) <==> valid_share(_a - _b))
    }
    axiom axMul { forall _a: Rational, _b: Rational :: {times(share(_a), share(_b))} times(share(_a), share(_b)) == share(_a * _b)}

    axiom axJoinComm {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == plus(_q, _p)}
    axiom axJoinAssoc {forall _p: Perm, _q: Perm, _r: Perm :: {plus(plus(_p, _q), _r)} plus(plus(_p, _q), _r) == plus(_p, plus(_q, _r))}
    axiom axJoinCancel { forall _p: Perm, _q: Perm, _x: Perm :: {plus(_p, _x), plus(_q, _x)} plus(_p, _x) == plus(_q, _x) ==> _p == _q}

    axiom axUnitGeq { forall _p: Perm :: {geq(_p, unit())} geq(_p, unit())}
    axiom axUnitGeq2 { forall _p: Perm :: {geq(unit(),_p)} geq(unit(),_p) <==> _p == unit()}
    axiom axFullGeq { forall _p: Perm :: {geq(full(),_p)} geq(full(),_p)}
    axiom axFullGeq2 { forall _p: Perm :: {geq(_p, full())} geq(_p, full()) <==> _p == full()}
    axiom axGeqId { forall _p: Perm :: {geq(_p, _p)} geq(_p, _p)}
    axiom axMinusId { forall _p: Perm :: {minus(_p, _p)} minus(_p, _p) == unit()}


    axiom axUnitJoin { forall _p: Perm :: {plus(unit(),_p)} plus(unit(),_p) == _p}
    axiom axUnitJoinable { forall _p: Perm :: {joinable(_p, unit())} joinable(_p, unit())}
    axiom axJoinableComm { forall _p: Perm, _q: Perm :: {joinable(_p, _q)} joinable(_p, _q) == joinable(_q,_p)}
    axiom axTimes0 { forall _p: Perm :: {times(unit(),_p)} times(unit(),_p) == unit()}
    axiom axTimes1 { forall _p: Perm :: {times(full(),_p)} times(full(),_p) == _p}

    axiom axGeqPlus { forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(_a, _x)}
    axiom axGeqMinus {forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(minus(_a, _y), _x)}
    axiom axMinusUneq { forall _p: Perm, _q: Perm :: {geq(_p, _q)} geq(_p, _q) && _p != _q ==> minus(_p, _q) != unit()}

    axiom axPositive {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == unit() ==> _p == unit() && _q == unit()}
    axiom axPlusGeq {forall _p: Perm, _q: Perm :: {geq(plus(_p, _q), _p)} /*joinable(_p, _q) ==>*/ geq(plus(_p, _q), _p)}
    axiom axMinusCancel {forall _p: Perm, _q: Perm :: {minus(plus(_p, _q), _q)} minus(plus(_p, _q), _q) == _p}

}
