// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field f: Int

method test01(s: Seq[Ref], a: Int, b: Int, n: Int)
  requires 0 <= a && 0 < b && 0 < n
  requires a + n * b < |s|
{
  var j: Int

  inhale 0 <= j && j < n
  inhale forall i: Int :: {i in [0..n)} i in [0..n) ==> acc(s[a + i*b].f)
    /* Yields the non-null axiom

         forall i: Int
             {i in [0..n)}
           i in [0..n) ==> s[a+i*b] != null

       The trigger only contains (i in [0..n)) but not (s[a+i*b]) because the
       latter contains an arithmetic expression, which Z3 doesn't allow in
       triggers.
       Introducing a second quantified variable j to replace a+i*b with isn't
       straight-forward because one needs to preserve the relatonship between
       i and j. Moreover, s[j] on its own wouldn't be a valid trigger because
       it wouldn't cover all quantified variables.
     */

  /* TODO: Fails because ($Seq.at s (+ a (* i b))) doesn't trigger above axiom */
  //:: UnexpectedOutput(assert.failed:assertion.false, /silver/issue/67/)
  assert s[a + j*b] != null
}

function exp(a: Int, i: Int, b: Int): Int {
  a + i*b
}

method test04(s: Seq[Ref], a: Int, b: Int, n: Int)
  requires 0 <= a && 0 < b && 0 < n
  requires a + n * b < |s|
{
  var j: Int

  inhale 0 <= j && j < n
  inhale forall i: Int :: i in [0..n) ==> acc(s[exp(a, i, b)].f)
    /* Yields the non-null axiom

         forall i: Int
             {i in [0..n)}
             {s[exp(a, i, b)]}
           i in [0..n) ==> s[exp(a, i, b)] != null
     */

  /* Using exp(a, j, b) will trigger above axiom */
  assert s[exp(a, j, b)] != null
}

method test02(s: Seq[Ref], a: Int, b: Int)
  requires 0 <= a && 0 < b
  requires forall i: Int :: i in [a..|s|) && (i - a) % b == 0 ==> acc(s[i].f)
{
  var j: Int := a

  while (j < |s|)
    invariant a <= j
    invariant (j - a) % b == 0
    invariant forall i: Int :: i in [a..|s|) && (i - a) % b == 0 ==> acc(s[i].f)
  {
    assert j in [a..|s|)      /* Can be proven */
    assert (j - a) % b == 0   /* Can be proven */

    s[j].f := j
    j := j + b

    assume (j - a) % b == 0 /* Cannot be proven, but is correct */
  }
}

method test03(s: Seq[Ref], a: Int, b: Int)
  requires 0 <= a && 0 < b
  requires forall i: Int :: i in [a..|s|) && (i - a) % b == 0 ==> acc(s[i].f)
{
  var j: Int := 0
  assert j*b % b == 0

  while (a+j*b < |s|)
    invariant 0 <= j
    invariant j*b % b == 0
    invariant forall i: Int :: i in [a..|s|) && (i - a) % b == 0 ==> acc(s[i].f)
  {
    assert a+j*b in [a..|s|) /* Can be proven */
    assert j*b % b == 0      /* Can be proven */

    s[a+j*b].f := j
    j := j + 1

    assume j*b % b == 0 /* Cannot be proven, but is correct */
  }
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axUnitJoinable { forall p: Perm :: {joinable(p, unit())} joinable(p, unit())}
    axiom axJoinableComm { forall p: Perm, q: Perm :: {joinable(p, q)} joinable(p, q) == joinable(q, p)}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}

    axiom axGeqPlus { forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(a, x)}
    axiom axGeqMinus {forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) && joinable(x, y) <==> geq(minus(a, y), x) && geq(a, y)}

}
