// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field Ref__Integer_value: Int

function sum_list(i: Int, hi: Int, ar: Seq[Int]): Int
  requires (0 <= i) && (i <= hi)
  requires hi <= |ar|
{
  (i < hi ? ar[i] + sum_list(i + 1, hi, ar) : 0)
}

function sum_array(i: Int, lo: Int, hi: Int, ar: Seq[Ref]): Int
  requires (0 <= lo) && (lo <= i) && (i <= hi)
  requires hi <= |ar|
  requires (forall k: Int :: (lo <= k) && (k < hi) ==> acc(ar[k].Ref__Integer_value, wildcard))
{
  (i < hi ? ar[i].Ref__Integer_value + sum_array(i + 1, lo, hi, ar) : 0)
}

function sum_square(i: Int, lo: Int, hi: Int, step: Int, min: Int, max: Int, ar: Seq[Ref]): Int
  requires (0 <= lo) && (lo <= hi) && (hi <= step) && (step > 0)
  requires (0 <= min) && (min <= i) && (i <= max)
  requires max <= |ar|
  requires (forall k: Int :: (min <= k) && (k < max) && (lo <= k % step) && (k % step < hi) ==> acc(ar[k].Ref__Integer_value, wildcard))
{
  (i < max ? ((lo <= i % step) && (i % step < hi) ? ar[i].Ref__Integer_value : 0) + sum_square(i + 1, lo, hi, step, min, max, ar) : 0)
}

function count_square(i: Int, lo: Int, hi: Int, step: Int, min: Int, max: Int, ar: Seq[Ref], v: Int): Int
  requires (0 <= lo) && (lo <= hi) && (hi <= step) && (step > 0)
  requires (0 <= min) && (min <= i) && (i <= max)
  requires max <= |ar|
  requires (forall k: Int :: (min <= k) && (k < max) && (lo <= k % step) && (k % step < hi) ==> acc(ar[k].Ref__Integer_value, wildcard))
{
  (i < max ? ((lo <= i % step) && (i % step < hi) && (ar[i].Ref__Integer_value == v) ? 1 : 0) + count_square(i + 1, lo, hi, step, min, max, ar, v) : 0)
}

function count_list(i: Int, hi: Int, ar: Seq[Int], v: Int): Int
  requires (0 <= i) && (i <= hi)
  requires hi <= |ar|
{
  (i < hi ? (ar[i] == v ? 1 : 0) + count_list(i + 1, hi, ar, v) : 0)
}

function count_array(i: Int, hi: Int, ar: Seq[Ref], v: Int): Int
  requires (0 <= i) && (i <= hi)
  requires hi <= |ar|
  requires (forall k: Int :: (0 <= k) && (k < hi) ==> acc(ar[k].Ref__Integer_value, wildcard))
{
  (i < hi ? (ar[i].Ref__Integer_value == v ? 1 : 0) + count_array(i + 1, hi, ar, v) : 0)
}

method Ref__loop_main_67(diz: Ref, current_thread_id: Int, b: Seq[Ref], len: Int, a: Seq[Ref], c: Seq[Ref])
  requires diz != null
  requires current_thread_id >= 0
  requires (0 < len) ==> (|a| == len)
  requires (forall i: Int :: (0 <= i) && (i < len) ==> acc(a[i].Ref__Integer_value, write))
  requires (0 < len) ==> (|b| == len)
  requires (forall i: Int :: (0 <= i) && (i < len) ==> acc(b[i].Ref__Integer_value, 1 / 2))
  requires (0 < len) ==> (|c| == len)
  requires (forall i: Int :: (0 <= i) && (i < len) ==> acc(c[i].Ref__Integer_value, write))
  requires (forall i: Int :: (0 <= i) && (i < len) ==> (b[i].Ref__Integer_value == i))
  ensures (0 < len) ==> (|a| == len)
  ensures (forall i: Int :: (0 <= i) && (i < len) ==> acc(a[i].Ref__Integer_value, 1 / 2))
  ensures (0 < len) ==> (|b| == len)
  ensures (forall i: Int :: (0 <= i) && (i < len) ==> acc(b[i].Ref__Integer_value, 1 / 2))
  ensures (0 < len) ==> (|c| == len)
  ensures (forall i: Int :: (0 <= i) && (i < len) ==> acc(c[i].Ref__Integer_value, write))
  ensures (forall i: Int :: ((0 <= 0 ? 1 : 0) - 1 <= i) && (i < len - 1) ==> acc(a[i].Ref__Integer_value, 1 / 2))
  ensures (0 <= |a| - 1) && (|a| - 1 < len) ==> acc(a[|a| - 1].Ref__Integer_value, 1 / 2)
  ensures (forall i: Int :: (0 <= i) && (i < len) ==> (a[i].Ref__Integer_value == i + 1))
  ensures (forall i: Int :: (0 <= i) && (i < len) ==> (b[i].Ref__Integer_value == i))
  ensures (forall i: Int :: ((0 <= 0 ? 1 : 0) <= i) && (i < len) ==> (c[i].Ref__Integer_value == i + 2))
{
  inhale false
}

method Ref__send_body_183(diz: Ref, current_thread_id: Int, a: Seq[Ref], i: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires 0 <= i && i < |a|
  requires acc(a[i].Ref__Integer_value, 1 / 2)
  requires a[i].Ref__Integer_value == i + 1
{
  inhale false
}

method Ref__recv_body_185(diz: Ref, current_thread_id: Int, a: Seq[Ref], i: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires 0 < i && i <= |a|
  ensures acc(a[i - 1].Ref__Integer_value, 1 / 2)
  ensures a[i - 1].Ref__Integer_value == i
{
  inhale false
}

method Ref__loop_body_67(diz: Ref, current_thread_id: Int, len: Int, b: Seq[Ref], a: Seq[Ref], i: Int, c: Seq[Ref])
  requires diz != null
  requires current_thread_id >= 0
  requires (0 <= i) && (i < len)
  requires |a| == len
  requires acc(a[i].Ref__Integer_value, write)
  requires |b| == len
  requires acc(b[i].Ref__Integer_value, 1 / 2)
  requires |c| == len
  requires acc(c[i].Ref__Integer_value, write)
  requires b[i].Ref__Integer_value == i
  ensures (0 <= i) && (i < len)
  ensures |a| == len
  ensures acc(a[i].Ref__Integer_value, 1 / 2)
  ensures |b| == len
  ensures acc(b[i].Ref__Integer_value, 1 / 2)
  ensures |c| == len
  ensures acc(c[i].Ref__Integer_value, write)
  ensures (i > 0) ==> acc(a[i - 1].Ref__Integer_value, 1 / 2)
  ensures (i == |a| - 1) ==> acc(a[i].Ref__Integer_value, 1 / 2)
  ensures a[i].Ref__Integer_value == i + 1
  ensures b[i].Ref__Integer_value == i
  ensures (i > 0) ==> (c[i].Ref__Integer_value == i + 2)
{
  var __flatten_4: Ref
  var __flatten_5: Int
  var __flatten_6: Ref
  var __flatten_9: Ref
  var __flatten_10: Int
  var __flatten_11: Ref
  __flatten_4 := a[i]
  __flatten_6 := b[i]
  __flatten_5 := __flatten_6.Ref__Integer_value + 1
  __flatten_4.Ref__Integer_value := __flatten_5
  if (i < len - 1) {
    Ref__send_body_183(diz, current_thread_id, a, i)
  }
  if (i > 0) {
    Ref__recv_body_185(diz, current_thread_id, a, i)
    __flatten_9 := c[i]
    __flatten_11 := a[i - 1]
    __flatten_10 := __flatten_11.Ref__Integer_value + 2
    __flatten_9.Ref__Integer_value := __flatten_10
  }
}

method Ref__guard_check_S1_S2(diz: Ref, current_thread_id: Int, len: Int, b: Seq[Ref], a: Seq[Ref], i: Int, c: Seq[Ref])
  requires diz != null
  requires current_thread_id >= 0
  requires (0 <= i) && (i < len)
  requires i > 0
  ensures 1 <= i
  ensures i - 1 < len - 1
{
}

method Ref__resource_check_S1_S2(diz: Ref, current_thread_id: Int, len: Int, b: Seq[Ref], a: Seq[Ref], i: Int, c: Seq[Ref])
  requires diz != null
  requires current_thread_id >= 0
  requires (0 <= i) && (i < len)
  requires i - 1 < len - 1
  requires i > 0
  requires len <= |a|
  requires acc(a[i - 1].Ref__Integer_value, 1 / 2)
  requires a[i - 1].Ref__Integer_value == i - 1 + 1
  ensures i - 1 < len - 1
  ensures acc(a[i - 1].Ref__Integer_value, 1 / 2)
  ensures a[i - 1].Ref__Integer_value == i
{
}

method Ref__example(diz: Ref, current_thread_id: Int, a: Seq[Ref], b: Seq[Ref], c: Seq[Ref], len: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires |a| == len
  requires (forall i: Int :: (0 <= i) && (i < len) ==> acc(a[i].Ref__Integer_value, write))
  requires |b| == len
  requires (forall i: Int :: (0 <= i) && (i < len) ==> acc(b[i].Ref__Integer_value, 1 / 2))
  requires |c| == len
  requires (forall i: Int :: (0 <= i) && (i < len) ==> acc(c[i].Ref__Integer_value, write))
  requires (forall tid: Int :: (0 <= tid) && (tid < len) ==> (b[tid].Ref__Integer_value == tid))
  ensures |a| == len
  ensures (forall i: Int :: (0 <= i) && (i < len) ==> acc(a[i].Ref__Integer_value, write))
  ensures |b| == len
  ensures (forall i: Int :: (0 <= i) && (i < len) ==> acc(b[i].Ref__Integer_value, 1 / 2))
  ensures |c| == len
  ensures (forall i: Int :: (0 <= i) && (i < len) ==> acc(c[i].Ref__Integer_value, write))
  ensures (forall i: Int :: (0 <= i) && (i < len) ==> (a[i].Ref__Integer_value == i + 1))
  ensures (forall i: Int :: (0 <= i) && (i < len) ==> (b[i].Ref__Integer_value == i))
  ensures (forall i: Int :: (0 < i) && (i < len) ==> (c[i].Ref__Integer_value == i + 2))
{
  Ref__loop_main_67(diz, current_thread_id, b, len, a, c)
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(_x: Perm, _y: Perm): Perm
    function minus(_x: Perm, _y: Perm): Perm
    function geq(_x: Perm, _y: Perm): Bool
    function joinable(_x: Perm, _y: Perm): Bool

    function times(_x: Perm, _y: Perm): Perm

    //Auxiliary functions
    function share(_x: Rational): Perm
    function valid_share(_x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall _a: Int, _b: Int :: {biConstr(_a, _b)} biConstr(_a, _b) == share(_a/_b)}


    axiom axValid { forall _x: Rational :: {valid_share(_x)}
        valid_share(_x) <==> (_x >= 0/1 && _x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall _a: Rational, _b: Rational :: { share(_a), share(_b) }
        share(_a) == share(_b) ==> _a == _b
    }
    axiom axPlus { forall _a: Rational, _b: Rational :: { plus(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) ==> plus(share(_a), share(_b)) == share(_a + _b)
    }
    axiom axMinus { forall _a: Rational, _b: Rational :: { minus(share(_a), share(_b)) }
        geq(share(_a), share(_b)) ==> minus(share(_a), share(_b)) == share(_a - _b)
    }
    axiom axCanJoin { forall _a: Rational, _b: Rational :: { joinable(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) <==> valid_share(_a) && valid_share(_b) && valid_share(_a + _b)
    }
    axiom axGeq { forall _a: Rational, _b: Rational :: { geq(share(_a), share(_b)) }
        geq(share(_a), share(_b)) <==> valid_share(_a) && valid_share(_b) && valid_share(_a - _b)
    }
    axiom axMul { forall _a: Rational, _b: Rational :: {times(share(_a), share(_b))} times(share(_a), share(_b)) == share(_a * _b)}

    axiom axJoinComm {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == plus(_q, _p)}
    axiom axJoinAssoc {forall _p: Perm, _q: Perm, _r: Perm :: {plus(plus(_p, _q), _r)} plus(plus(_p, _q), _r) == plus(_p, plus(_q, _r))}
    axiom axJoinCancel { forall _p: Perm, _q: Perm, _x: Perm :: {plus(_p, _x), plus(_q, _x)} plus(_p, _x) == plus(_q, _x) ==> _p == _q}

    axiom axUnitGeq { forall _p: Perm :: {geq(_p, unit())} geq(_p, unit())}
    axiom axUnitGeq2 { forall _p: Perm :: {geq(unit(),_p)} geq(unit(),_p) <==> _p == unit()}
    axiom axFullGeq { forall _p: Perm :: {geq(full(),_p)} geq(full(),_p)}
    axiom axFullGeq2 { forall _p: Perm :: {geq(_p, full())} geq(_p, full()) <==> _p == full()}

    axiom axUnitJoin { forall _p: Perm :: {plus(unit(),_p)} plus(unit(),_p) == _p}
    axiom axUnitJoinable { forall _p: Perm :: {joinable(_p, unit())} joinable(_p, unit())}
    axiom axJoinableComm { forall _p: Perm, _q: Perm :: {joinable(_p, _q)} joinable(_p, _q) == joinable(_q,_p)}
    axiom axTimes0 { forall _p: Perm :: {times(unit(),_p)} times(unit(),_p) == unit()}
    axiom axTimes1 { forall _p: Perm :: {times(full(),_p)} times(unit(),_p) == _p}

    axiom axGeqPlus { forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(_a, _x)}
    axiom axGeqMinus {forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(minus(_a, _y), _x)}
    axiom axMinusUneq { forall _p: Perm, _q: Perm :: {geq(_p, _q)} geq(_p, _q) && _p != _q ==> minus(_p, _q) != unit()}

}
