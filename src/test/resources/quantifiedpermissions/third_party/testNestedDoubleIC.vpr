// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field Ref__Integer_value: Int

function sum_list(i: Int, hi: Int, ar: Seq[Int]): Int
  requires (0 <= i) && (i <= hi)
  requires hi <= |ar|
{
  (i < hi ? ar[i] + sum_list(i + 1, hi, ar) : 0)
}

function sum_array(i: Int, lo: Int, hi: Int, ar: Seq[Ref]): Int
  requires (0 <= lo) && (lo <= i) && (i <= hi)
  requires hi <= |ar|
  requires (forall k: Int :: (lo <= k) && (k < hi) ==> acc(ar[k].Ref__Integer_value, wildcard))
{
  (i < hi ? ar[i].Ref__Integer_value + sum_array(i + 1, lo, hi, ar) : 0)
}

function sum_square(i: Int, lo: Int, hi: Int, step: Int, min: Int, max: Int, ar: Seq[Ref]): Int
  requires (0 <= lo) && (lo <= hi) && (hi <= step) && (step > 0)
  requires (0 <= min) && (min <= i) && (i <= max)
  requires max <= |ar|
  requires (forall k: Int :: (min <= k) && (k < max) && (lo <= k % step) && (k % step < hi) ==> acc(ar[k].Ref__Integer_value, wildcard))
{
  (i < max ? ((lo <= i % step) && (i % step < hi) ? ar[i].Ref__Integer_value : 0) + sum_square(i + 1, lo, hi, step, min, max, ar) : 0)
}

function count_square(i: Int, lo: Int, hi: Int, step: Int, min: Int, max: Int, ar: Seq[Ref], v: Int): Int
  requires (0 <= lo) && (lo <= hi) && (hi <= step) && (step > 0)
  requires (0 <= min) && (min <= i) && (i <= max)
  requires max <= |ar|
  requires (forall k: Int :: (min <= k) && (k < max) && (lo <= k % step) && (k % step < hi) ==> acc(ar[k].Ref__Integer_value, wildcard))
{
  (i < max ? ((lo <= i % step) && (i % step < hi) && (ar[i].Ref__Integer_value == v) ? 1 : 0) + count_square(i + 1, lo, hi, step, min, max, ar, v) : 0)
}

function count_list(i: Int, hi: Int, ar: Seq[Int], v: Int): Int
  requires (0 <= i) && (i <= hi)
  requires hi <= |ar|
{
  (i < hi ? (ar[i] == v ? 1 : 0) + count_list(i + 1, hi, ar, v) : 0)
}

function count_array(i: Int, hi: Int, ar: Seq[Ref], v: Int): Int
  requires (0 <= i) && (i <= hi)
  requires hi <= |ar|
  requires (forall k: Int :: (0 <= k) && (k < hi) ==> acc(ar[k].Ref__Integer_value, wildcard))
{
  (i < hi ? (ar[i].Ref__Integer_value == v ? 1 : 0) + count_array(i + 1, hi, ar, v) : 0)
}

method Ref__loop_main_20(diz: Ref, current_thread_id: Int, ar: Seq[Ref], N: Int, M: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires (0 < M) ==> (M * N == |ar|)
  requires M * N <= |ar|
  requires (forall k: Int :: (0 <= k) && (k < M * N) ==> acc(ar[k].Ref__Integer_value, write))
  ensures (forall k: Int :: (0 <= k) && (k < M * N) ==> acc(ar[k].Ref__Integer_value, write))
  ensures (forall k: Int :: (0 <= k) && (k < M * N) ==> (ar[k].Ref__Integer_value == 0))
{
  inhale false
}

method Ref__loop_main_79(diz: Ref, current_thread_id: Int, ar: Seq[Ref], i: Int, N: Int, M: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires (0 < N) ==> (0 <= i) && (i < M) && (M * N == |ar|)
  requires (i + 1) * N <= |ar|
  requires (forall j: Int :: (i * N <= j) && (j < (i + 1) * N) ==> acc(ar[j].Ref__Integer_value, write))
  ensures (0 < N) ==> (0 <= i) && (i < M) && (M * N == |ar|)
  ensures (forall j: Int :: (i * N <= j) && (j < (i + 1) * N) ==> acc(ar[j].Ref__Integer_value, write))
  ensures (forall j: Int :: (i * N <= j) && (j < (i + 1) * N) ==> (ar[j].Ref__Integer_value == 0))
{
  inhale false
}

method Ref__loop_body_79(diz: Ref, current_thread_id: Int, ar: Seq[Ref], j: Int, i: Int, N: Int, M: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires (0 <= j) && (j < N)
  requires (0 <= i) && (i < M) && (M * N == |ar|)
  requires i * N + j < |ar|
  requires acc(ar[i * N + j].Ref__Integer_value, write)
  ensures (0 <= j) && (j < N)
  ensures (0 <= i) && (i < M) && (M * N == |ar|)
  ensures acc(ar[i * N + j].Ref__Integer_value, write)
  ensures ar[i * N + j].Ref__Integer_value == 0
{
  var __flatten_3: Ref
  var __flatten_4: Int
  __flatten_3 := ar[i * N + j]
  __flatten_4 := 0
  __flatten_3.Ref__Integer_value := __flatten_4
}

method Ref__loop_body_20(diz: Ref, current_thread_id: Int, ar: Seq[Ref], i: Int, N: Int, M: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires (0 <= i) && (i < M)
  requires M * N == |ar|
  requires (i + 1) * N <= |ar|
  requires (forall k: Int :: (i * N <= k) && (k < (i + 1) * N) ==> acc(ar[k].Ref__Integer_value, write))
  ensures (0 <= i) && (i < M)
  ensures (forall k: Int :: (i * N <= k) && (k < (i + 1) * N) ==> acc(ar[k].Ref__Integer_value, write))
  ensures (forall k: Int :: (i * N <= k) && (k < (i + 1) * N) ==> (ar[k].Ref__Integer_value == 0))
{
  Ref__loop_main_79(diz, current_thread_id, ar, i, N, M)
}

method Ref__zero_array(diz: Ref, current_thread_id: Int, ar: Seq[Ref], M: Int, N: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires M > 0
  requires N > 0
  requires M * N == |ar|
  requires (forall k: Int :: (0 <= k) && (k < |ar|) ==> acc(ar[k].Ref__Integer_value, write))
  ensures (forall k: Int :: (0 <= k) && (k < |ar|) ==> acc(ar[k].Ref__Integer_value, write))
  ensures (forall k: Int :: (0 <= k) && (k < |ar|) ==> (ar[k].Ref__Integer_value == 0))
{
  Ref__loop_main_20(diz, current_thread_id, ar, N, M)
}

method Ref__Ref(current_thread_id: Int) returns (sys__result: Ref)
  requires current_thread_id >= 0
  ensures sys__result != null
{
  var diz: Ref
  diz := new(Ref__Integer_value)
  sys__result := diz
  assert sys__result != null
  inhale false
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(_x: Perm, _y: Perm): Perm
    function minus(_x: Perm, _y: Perm): Perm
    function geq(_x: Perm, _y: Perm): Bool
    function joinable(_x: Perm, _y: Perm): Bool

    function times(_x: Perm, _y: Perm): Perm

    //Auxiliary functions
    function share(_x: Rational): Perm
    function valid_share(_x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall _a: Int, _b: Int :: {biConstr(_a, _b)} biConstr(_a, _b) == share(_a/_b)}


    axiom axValid { forall _x: Rational :: {valid_share(_x)}
        valid_share(_x) <==> (_x >= 0/1 && _x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall _a: Rational, _b: Rational :: { share(_a), share(_b) }
        share(_a) == share(_b) ==> _a == _b
    }
    axiom axPlus { forall _a: Rational, _b: Rational :: { plus(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) ==> plus(share(_a), share(_b)) == share(_a + _b)
    }
    axiom axMinus { forall _a: Rational, _b: Rational :: { minus(share(_a), share(_b)) }
        geq(share(_a), share(_b)) ==> minus(share(_a), share(_b)) == share(_a - _b)
    }
    axiom axCanJoin { forall _a: Rational, _b: Rational :: { joinable(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) <==> valid_share(_a) && valid_share(_b) && valid_share(_a + _b)
    }
    axiom axGeq { forall _a: Rational, _b: Rational :: { geq(share(_a), share(_b)) }
        geq(share(_a), share(_b)) <==> valid_share(_a) && valid_share(_b) && valid_share(_a - _b)
    }
    axiom axMul { forall _a: Rational, _b: Rational :: {times(share(_a), share(_b))} times(share(_a), share(_b)) == share(_a * _b)}

    axiom axJoinComm {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == plus(_q, _p)}
    axiom axJoinAssoc {forall _p: Perm, _q: Perm, _r: Perm :: {plus(plus(_p, _q), _r)} plus(plus(_p, _q), _r) == plus(_p, plus(_q, _r))}
    axiom axJoinCancel { forall _p: Perm, _q: Perm, _x: Perm :: {plus(_p, _x), plus(_q, _x)} plus(_p, _x) == plus(_q, _x) ==> _p == _q}

    axiom axUnitGeq { forall _p: Perm :: {geq(_p, unit())} geq(_p, unit())}
    axiom axUnitGeq2 { forall _p: Perm :: {geq(unit(),_p)} geq(unit(),_p) <==> _p == unit()}
    axiom axFullGeq { forall _p: Perm :: {geq(full(),_p)} geq(full(),_p)}
    axiom axFullGeq2 { forall _p: Perm :: {geq(_p, full())} geq(_p, full()) <==> _p == full()}

    axiom axUnitJoin { forall _p: Perm :: {plus(unit(),_p)} plus(unit(),_p) == _p}
    axiom axUnitJoinable { forall _p: Perm :: {joinable(_p, unit())} joinable(_p, unit())}
    axiom axJoinableComm { forall _p: Perm, _q: Perm :: {joinable(_p, _q)} joinable(_p, _q) == joinable(_q,_p)}
    axiom axTimes0 { forall _p: Perm :: {times(unit(),_p)} times(unit(),_p) == unit()}
    axiom axTimes1 { forall _p: Perm :: {times(full(),_p)} times(unit(),_p) == _p}

    axiom axGeqPlus { forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(_a, _x)}
    axiom axGeqMinus {forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(minus(_a, _y), _x)}
    axiom axMinusUneq { forall _p: Perm, _q: Perm :: {geq(_p, _q)} geq(_p, _q) && _p != _q ==> minus(_p, _q) != unit()}

}
