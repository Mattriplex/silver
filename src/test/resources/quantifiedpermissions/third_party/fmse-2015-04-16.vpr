// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

/* Provided by Stefan Blom of Univ. of Twente */

field Exercise4__Integer_value: Int

field Ref__Integer_value: Int

method Exercise4__zip(diz: Ref, a: Seq[Ref], b: Seq[Ref], res: Seq[Ref])
  requires diz != null
  requires |a| == |b|
  requires |res| == 2 * |a|
  requires (forall i: Int :: (i in [0..|a|)) ==> acc(a[i].Ref__Integer_value, write))
  requires (forall i: Int :: (i in [0..|b|)) ==> acc(b[i].Ref__Integer_value, write))
  requires (forall i: Int :: (i in [0..|res|)) ==> acc(res[i].Ref__Integer_value, write))
  ensures |res| == 2 * |a|
  ensures |a| == |b|
  ensures |res| == 2 * |b|
  ensures (forall i: Int :: (i in [0..|a|)) ==> acc(a[i].Ref__Integer_value, write))
  ensures (forall i: Int :: (i in [0..|b|)) ==> acc(b[i].Ref__Integer_value, write))
  ensures (forall i: Int :: (i in [0..|res|)) ==> acc(res[i].Ref__Integer_value, write))
  ensures (forall i: Int :: (i in [0..|a|)) ==> (res[2 * i].Ref__Integer_value == a[i].Ref__Integer_value))
    /* [2015-12-10 Malte]
     * The comment from 2015-11-12 no longer applies because field value functions that
     * are not used as snapshots are no longer partial, and therefore, domain axioms will no
     * longer be generated/
     *
     * [2015-11-12 Malte]
     * Picking triggers for the domain axioms generated for the (quantified) field access
     *   res[2 * i].Ref__Integer_value
     * is difficult because of the multiplication.
     * Currently, the domain axiom
     *   forall i :: res[2 * i] in Domain(Ref__Integer_value, fvf) <==> i in [0..|a|]
     * will be generated, with the *invalid* trigger
     *   {res[2 * i] in Domain(Ref__Integer_value, fvf)}
     * One way of avoiding this problem would be to introduce a new inverse functions
     * and to use the axiom
     *   forall r: Ref :: res[inv(r)] in Domain(Ref__Integer_value, fvf) <==> inv(r) in [0..|a|]
     * together with the trigger
     *   {r in Domain(Ref__Integer_value, fvf)}
     * or maybe even
     *   {r in Domain(Ref__Integer_value, fvf), inv(r)}
     */
  ensures (forall i: Int :: (0 <= i) && (i % 2 == 1) && (i < |res|) ==> (res[i].Ref__Integer_value == b[i \ 2].Ref__Integer_value))
  ensures (forall i: Int :: (i in [0..|b|)) ==> (res[2 * i + 1].Ref__Integer_value == b[i].Ref__Integer_value))
  ensures (forall i: Int :: (0 <= i) && (i % 2 == 0) && (i < |res|) ==> (res[i].Ref__Integer_value == a[i \ 2].Ref__Integer_value))
{
  var k: Int
  var __flatten_1: Int
  var __flatten_2: Int
  var __flatten_3: Int
  var __flatten_4: Int
  var __flatten_5: Ref
  var __flatten_6: Ref
  var __flatten_7: Int
  var __flatten_8: Ref
  var __flatten_9: Ref
  var __flatten_10: Int
  k := 0
  while (k < |res|)
    invariant 0 <= k
    invariant k % 2 == 0
    invariant k <= |res|
    invariant |a| == |b|
    invariant |res| == 2 * |a|
    invariant (forall i: Int :: (i in [0..|a|)) ==> acc(a[i].Ref__Integer_value, write))
    invariant (forall i: Int :: (i in [0..|b|)) ==> acc(b[i].Ref__Integer_value, write))
    invariant (forall i: Int :: (i in [0..|res|)) ==> acc(res[i].Ref__Integer_value, write))
    invariant (forall i: Int :: (0 <= i) && (i % 2 == 0) && (i < k) ==> (res[i].Ref__Integer_value == a[i \ 2].Ref__Integer_value))
    invariant (forall i: Int :: (0 <= i) && (i % 2 == 1) && (i < k) ==> (res[i].Ref__Integer_value == b[i \ 2].Ref__Integer_value))
    invariant (forall i: Int :: (i in [0..k \ 2)) ==> (res[2 * i].Ref__Integer_value == a[i].Ref__Integer_value))
    invariant (forall i: Int :: (i in [0..k \ 2)) ==> (res[2 * i + 1].Ref__Integer_value == b[i].Ref__Integer_value))
  {
    __flatten_5 := a[k \ 2]
    __flatten_4 := __flatten_5.Ref__Integer_value
    __flatten_1 := __flatten_4
    __flatten_6 := res[k]
    __flatten_6.Ref__Integer_value := __flatten_1
    __flatten_8 := b[k \ 2]
    __flatten_7 := __flatten_8.Ref__Integer_value
    __flatten_2 := __flatten_7
    __flatten_9 := res[k + 1]
    __flatten_9.Ref__Integer_value := __flatten_2
    __flatten_10 := k + 2
    __flatten_3 := __flatten_10
    k := __flatten_3
  }
  assert k == |res|
  assert |res| \ 2 == k \ 2
  assert (forall i: Int :: (i in [0..|res| \ 2)) ==> (res[2 * i].Ref__Integer_value == a[i].Ref__Integer_value))
  assert (forall i: Int :: (0 <= i) && (i % 2 == 1) && (i < |res|) ==> (res[i].Ref__Integer_value == b[i \ 2].Ref__Integer_value))
  assert (forall i: Int :: (i in [0..|res| \ 2)) ==> (res[2 * i + 1].Ref__Integer_value == b[i].Ref__Integer_value))
  assert (forall i: Int :: (0 <= i) && (i % 2 == 0) && (i < |res|) ==> (res[i].Ref__Integer_value == a[i \ 2].Ref__Integer_value))
}

method Exercise4__Exercise4() returns (sys__result: Ref)
  ensures sys__result != null
{
  var diz: Ref
  var __flatten_11: Ref
  __flatten_11 := new(Exercise4__Integer_value)
  diz := __flatten_11
  sys__result := diz
  assert sys__result != null
  inhale false
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(_x: Perm, _y: Perm): Perm
    function minus(_x: Perm, _y: Perm): Perm
    function geq(_x: Perm, _y: Perm): Bool
    function joinable(_x: Perm, _y: Perm): Bool

    function times(_x: Perm, _y: Perm): Perm

    //Auxiliary functions
    function share(_x: Rational): Perm
    function valid_share(_x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall _a: Int, _b: Int :: {biConstr(_a, _b)} biConstr(_a, _b) == share(_a/_b)}


    axiom axValid { forall _x: Rational :: {valid_share(_x)}
        valid_share(_x) <==> (_x >= 0/1 && _x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall _a: Rational, _b: Rational :: { share(_a), share(_b) }
        share(_a) == share(_b) ==> _a == _b
    }
    axiom axPlus { forall _a: Rational, _b: Rational :: { plus(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) ==> plus(share(_a), share(_b)) == share(_a + _b)
    }
    axiom axMinus { forall _a: Rational, _b: Rational :: { minus(share(_a), share(_b)) }
        geq(share(_a), share(_b)) ==> minus(share(_a), share(_b)) == share(_a - _b)
    }
    axiom axCanJoin { forall _a: Rational, _b: Rational :: { joinable(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) <==> valid_share(_a) && valid_share(_b) && valid_share(_a + _b)
    }
    axiom axGeq { forall _a: Rational, _b: Rational :: { geq(share(_a), share(_b)) }
        geq(share(_a), share(_b)) <==> valid_share(_a) && valid_share(_b) && valid_share(_a - _b)
    }
    axiom axMul { forall _a: Rational, _b: Rational :: {times(share(_a), share(_b))} times(share(_a), share(_b)) == share(_a * _b)}

    axiom axJoinComm {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == plus(_q, _p)}
    axiom axJoinAssoc {forall _p: Perm, _q: Perm, _r: Perm :: {plus(plus(_p, _q), _r)} plus(plus(_p, _q), _r) == plus(_p, plus(_q, _r))}
    axiom axJoinCancel { forall _p: Perm, _q: Perm, _x: Perm :: {plus(_p, _x), plus(_q, _x)} plus(_p, _x) == plus(_q, _x) ==> _p == _q}

    axiom axUnitGeq { forall _p: Perm :: {geq(_p, unit())} geq(_p, unit())}
    axiom axUnitGeq2 { forall _p: Perm :: {geq(unit(),_p)} geq(unit(),_p) <==> _p == unit()}
    axiom axFullGeq { forall _p: Perm :: {geq(full(),_p)} geq(full(),_p)}
    axiom axFullGeq2 { forall _p: Perm :: {geq(_p, full())} geq(_p, full()) <==> _p == full()}
    axiom axGeqId { forall _p: Perm :: {geq(_p, _p)} geq(_p, _p)}
    axiom axMinusId { forall _p: Perm :: {minus(_p, _p)} minus(_p, _p) == unit()}


    axiom axUnitJoin { forall _p: Perm :: {plus(unit(),_p)} plus(unit(),_p) == _p}
    axiom axUnitJoinable { forall _p: Perm :: {joinable(_p, unit())} joinable(_p, unit())}
    axiom axJoinableComm { forall _p: Perm, _q: Perm :: {joinable(_p, _q)} joinable(_p, _q) == joinable(_q,_p)}
    axiom axTimes0 { forall _p: Perm :: {times(unit(),_p)} times(unit(),_p) == unit()}
    axiom axTimes1 { forall _p: Perm :: {times(full(),_p)} times(full(),_p) == _p}

    axiom axGeqPlus { forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(_a, _x)}
    axiom axGeqMinus {forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(minus(_a, _y), _x)}
    axiom axMinusUneq { forall _p: Perm, _q: Perm :: {geq(_p, _q)} geq(_p, _q) && _p != _q ==> minus(_p, _q) != unit()}

    axiom axPositive {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == unit() ==> _p == unit() && _q == unit()}
    axiom axPlusGeq {forall _p: Perm, _q: Perm :: {geq(plus(_p, _q), _p)} joinable(_p, _q) ==> geq(plus(_p, _q), _p)}
    axiom axMinusCancel {forall _p: Perm, _q: Perm :: {minus(plus(_p, _q), _q)} minus(plus(_p, _q), _q) == _p}

}
