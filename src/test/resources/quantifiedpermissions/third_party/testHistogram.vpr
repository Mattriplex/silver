// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field Ref__Integer_value: Int

function Ref__multidim_index_2(N0: Int, N1: Int, i0: Int, i1: Int): Int
  requires 0 <= i0
  requires i0 < N0
  requires 0 <= N0
  requires 0 <= i1
  requires i1 < N1
  requires 0 <= N1
  ensures 0 <= result
  ensures result < N0 * N1
  ensures result == i0 * N1 + i1
  ensures result % N1 == i1
  ensures result % N1 < N0


function sum_list(i: Int, hi: Int, ar: Seq[Int]): Int
  requires (0 <= i) && (i <= hi)
  requires hi <= |ar|
{
  (i < hi ? ar[i] + sum_list(i + 1, hi, ar) : 0)
}

function sum_array(i: Int, lo: Int, hi: Int, ar: Seq[Ref]): Int
  requires (0 <= lo) && (lo <= i) && (i <= hi)
  requires hi <= |ar|
  requires (forall k: Int :: (lo <= k) && (k < hi) ==> acc(ar[k].Ref__Integer_value, wildcard))
{
  (i < hi ? ar[i].Ref__Integer_value + sum_array(i + 1, lo, hi, ar) : 0)
}

function sum_square(i: Int, lo: Int, hi: Int, step: Int, min: Int, max: Int, ar: Seq[Ref]): Int
  requires (0 <= lo) && (lo <= hi) && (hi <= step) && (step > 0)
  requires (0 <= min) && (min <= i) && (i <= max)
  requires max <= |ar|
  requires (forall k: Int :: (min <= k) && (k < max) && (lo <= k % step) && (k % step < hi) ==> acc(ar[k].Ref__Integer_value, wildcard))
{
  (i < max ? ((lo <= i % step) && (i % step < hi) ? ar[i].Ref__Integer_value : 0) + sum_square(i + 1, lo, hi, step, min, max, ar) : 0)
}

function count_square(i: Int, lo: Int, hi: Int, step: Int, min: Int, max: Int, ar: Seq[Ref], v: Int): Int
  requires (0 <= lo) && (lo <= hi) && (hi <= step) && (step > 0)
  requires (0 <= min) && (min <= i) && (i <= max)
  requires max <= |ar|
  requires (forall k: Int :: (min <= k) && (k < max) && (lo <= k % step) && (k % step < hi) ==> acc(ar[k].Ref__Integer_value, wildcard))
{
  (i < max ? ((lo <= i % step) && (i % step < hi) && (ar[i].Ref__Integer_value == v) ? 1 : 0) + count_square(i + 1, lo, hi, step, min, max, ar, v) : 0)
}

function count_list(i: Int, hi: Int, ar: Seq[Int], v: Int): Int
  requires (0 <= i) && (i <= hi)
  requires hi <= |ar|
{
  (i < hi ? (ar[i] == v ? 1 : 0) + count_list(i + 1, hi, ar, v) : 0)
}

function count_array(i: Int, hi: Int, ar: Seq[Ref], v: Int): Int
  requires (0 <= i) && (i <= hi)
  requires hi <= |ar|
  requires (forall k: Int :: (0 <= k) && (k < hi) ==> acc(ar[k].Ref__Integer_value, wildcard))
{
  (i < hi ? (ar[i].Ref__Integer_value == v ? 1 : 0) + count_array(i + 1, hi, ar, v) : 0)
}

method Ref__loop_main_76(diz: Ref, current_thread_id: Int, P: Int, hist: Seq[Ref])
  requires diz != null
  requires current_thread_id >= 0
  requires P <= |hist|
  requires (forall k: Int :: (0 <= k) && (k < P) ==> acc(hist[k].Ref__Integer_value, write))
  ensures (forall k: Int :: (0 <= k) && (k < P) ==> acc(hist[k].Ref__Integer_value, write))
  ensures (forall k: Int :: (0 <= k) && (k < P) ==> (hist[k].Ref__Integer_value == 0))
{
  inhale false
}

method Ref__loop_body_76(diz: Ref, current_thread_id: Int, k: Int, P: Int, hist: Seq[Ref])
  requires diz != null
  requires current_thread_id >= 0
  requires (0 <= k) && (k < P)
  requires P <= |hist|
  requires acc(hist[k].Ref__Integer_value, write)
  ensures (0 <= k) && (k < P)
  ensures acc(hist[k].Ref__Integer_value, write)
  ensures hist[k].Ref__Integer_value == 0
{
  var __flatten_4: Ref
  var __flatten_5: Int
  __flatten_4 := hist[k]
  __flatten_5 := 0
  __flatten_4.Ref__Integer_value := __flatten_5
}

method Ref__loop_main_96(diz: Ref, current_thread_id: Int, P: Int, N: Int, M: Int, matrix: Seq[Ref], hist: Seq[Ref])
  requires diz != null
  requires current_thread_id >= 0
  requires (M > 0) && (N > 0) && (P > 0)
  requires P <= |hist|
  requires (forall k: Int :: (0 <= k) && (k < P) ==> acc(hist[k].Ref__Integer_value, write))
  requires M * N <= |matrix|
  requires (forall j: Int :: (0 <= j) && (j < M * N) ==> acc(matrix[j].Ref__Integer_value, 1 / 4))
  requires (forall i: Int, j: Int :: (0 <= i) && (i < M) && (0 <= j) && (j < N) ==> Ref__multidim_index_2(M, N, i, j) < |matrix|)
  requires (forall i: Int, j: Int :: (0 <= i) && (i < M) && (0 <= j) && (j < N) ==> (0 <= matrix[Ref__multidim_index_2(M, N, i, j)].Ref__Integer_value) && (matrix[Ref__multidim_index_2(M, N, i, j)].Ref__Integer_value < P))
  ensures (M > 0) && (N > 0) && (P > 0)
  ensures (forall j: Int :: (0 <= j) && (j < M * N) ==> acc(matrix[j].Ref__Integer_value, 1 / 4))
  ensures (forall k: Int :: (0 <= k) && (k < P) ==> acc(hist[k].Ref__Integer_value, write))
  ensures (forall k: Int :: (0 <= k) && (k < P) ==> (hist[k].Ref__Integer_value == old(hist[k].Ref__Integer_value) + count_array(0, M * N, matrix, k)))
{
  inhale false
}

method Ref__loop_body_96(diz: Ref, current_thread_id: Int, matrix: Seq[Ref], j: Int, i: Int, P: Int, hist: Seq[Ref], N: Int, M: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires (M > 0) && (N > 0) && (P > 0)
  requires (0 <= i) && (i < M) && ((0 <= j) && (j < N))
  requires P <= |hist|
  requires (forall k: Int :: (0 <= k) && (k < P) ==> acc(hist[k].Ref__Integer_value, write))
  requires (forall k: Int :: (0 <= k) && (k < P) ==> (hist[k].Ref__Integer_value == 0))
  requires Ref__multidim_index_2(M, N, i, j) < |matrix|
  requires acc(matrix[Ref__multidim_index_2(M, N, i, j)].Ref__Integer_value, 1 / 4)
  requires (0 <= matrix[Ref__multidim_index_2(M, N, i, j)].Ref__Integer_value) && (matrix[Ref__multidim_index_2(M, N, i, j)].Ref__Integer_value < P)
  ensures (M > 0) && (N > 0) && (P > 0)
  ensures (0 <= i) && (i < M) && ((0 <= j) && (j < N))
  ensures acc(matrix[Ref__multidim_index_2(M, N, i, j)].Ref__Integer_value, 1 / 4)
  ensures (forall k: Int :: (0 <= k) && (k < P) ==> acc(hist[k].Ref__Integer_value, write))
  ensures (forall k: Int :: (0 <= k) && (k < P) ==> (hist[k].Ref__Integer_value == (matrix[Ref__multidim_index_2(M, N, i, j)].Ref__Integer_value == k ? 1 : 0)))
{
  var __flatten_1: Int
  var __flatten_6: Int
  var __flatten_7: Ref
  var __flatten_8: Ref
  var __flatten_9: Int
  var __flatten_10: Ref
  var __flatten_11: Ref
  __flatten_6 := Ref__multidim_index_2(M, N, i, j)
  __flatten_1 := __flatten_6
  __flatten_8 := matrix[__flatten_1]
  __flatten_7 := hist[__flatten_8.Ref__Integer_value]
  __flatten_11 := matrix[__flatten_1]
  __flatten_10 := hist[__flatten_11.Ref__Integer_value]
  __flatten_9 := __flatten_10.Ref__Integer_value + 1
  __flatten_7.Ref__Integer_value := __flatten_9
}

method Ref__histogram(diz: Ref, current_thread_id: Int, M: Int, N: Int, matrix: Seq[Ref], P: Int, hist: Seq[Ref])
  requires diz != null
  requires current_thread_id >= 0
  requires (M > 0) && (N > 0) && (P > 0)
  requires M * N <= |matrix|
  requires (forall j1: Int :: (0 <= j1) && (j1 < M * N) ==> acc(matrix[j1].Ref__Integer_value, 1 / 2))
  requires (forall i1: Int, j1: Int :: (0 <= i1) && (i1 < M) && (0 <= j1) && (j1 < N) ==> (0 <= matrix[Ref__multidim_index_2(M, N, i1, j1)].Ref__Integer_value) && (matrix[Ref__multidim_index_2(M, N, i1, j1)].Ref__Integer_value < P))
  requires P <= |hist|
  requires (forall i1: Int :: (0 <= i1) && (i1 < P) ==> acc(hist[i1].Ref__Integer_value, write))
  ensures (forall j1: Int :: (0 <= j1) && (j1 < M * N) ==> acc(matrix[j1].Ref__Integer_value, 1 / 2))
  ensures (forall i1: Int :: (0 <= i1) && (i1 < P) ==> acc(hist[i1].Ref__Integer_value, write))
  ////:: UnexpectedOutput(postcondition.violated:assertion.false, /silicon/issue/280/)
  ensures (forall k: Int :: (0 <= k) && (k < P) ==> (hist[k].Ref__Integer_value == count_array(0, M * N, matrix, k)))
  ensures (forall i1: Int, j1: Int :: (0 <= i1) && (i1 < M) && (0 <= j1) && (j1 < N) ==> (matrix[Ref__multidim_index_2(M, N, i1, j1)].Ref__Integer_value == old(matrix[Ref__multidim_index_2(M, N, i1, j1)].Ref__Integer_value)))
{
  Ref__loop_main_76(diz, current_thread_id, P, hist)
  Ref__loop_main_96(diz, current_thread_id, P, N, M, matrix, hist)
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(_x: Perm, _y: Perm): Perm
    function minus(_x: Perm, _y: Perm): Perm
    function geq(_x: Perm, _y: Perm): Bool
    function joinable(_x: Perm, _y: Perm): Bool

    function times(_x: Perm, _y: Perm): Perm

    //Auxiliary functions
    function share(_x: Rational): Perm
    function valid_share(_x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall _a: Int, _b: Int :: {biConstr(_a, _b)} biConstr(_a, _b) == share(_a/_b)}


    axiom axValid { forall _x: Rational :: {valid_share(_x)}
        valid_share(_x) <==> (_x >= 0/1 && _x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall _a: Rational, _b: Rational :: { share(_a), share(_b) }
        share(_a) == share(_b) ==> _a == _b
    }
    axiom axPlus { forall _a: Rational, _b: Rational :: { plus(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) ==> plus(share(_a), share(_b)) == share(_a + _b)
    }
    axiom axMinus { forall _a: Rational, _b: Rational :: { minus(share(_a), share(_b)) }
        geq(share(_a), share(_b)) ==> minus(share(_a), share(_b)) == share(_a - _b)
    }
    axiom axCanJoin { forall _a: Rational, _b: Rational :: { joinable(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) <==> valid_share(_a) && valid_share(_b) && valid_share(_a + _b)
    }
    axiom axGeq { forall _a: Rational, _b: Rational :: { geq(share(_a), share(_b)) }
        geq(share(_a), share(_b)) <==> valid_share(_a) && valid_share(_b) && valid_share(_a - _b)
    }
    axiom axMul { forall _a: Rational, _b: Rational :: {times(share(_a), share(_b))} times(share(_a), share(_b)) == share(_a * _b)}

    axiom axJoinComm {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == plus(_q, _p)}
    axiom axJoinAssoc {forall _p: Perm, _q: Perm, _r: Perm :: {plus(plus(_p, _q), _r)} plus(plus(_p, _q), _r) == plus(_p, plus(_q, _r))}
    axiom axJoinCancel { forall _p: Perm, _q: Perm, _x: Perm :: {plus(_p, _x), plus(_q, _x)} plus(_p, _x) == plus(_q, _x) ==> _p == _q}

    axiom axUnitGeq { forall _p: Perm :: {geq(_p, unit())} geq(_p, unit())}
    axiom axUnitGeq2 { forall _p: Perm :: {geq(unit(),_p)} geq(unit(),_p) <==> _p == unit()}
    axiom axFullGeq { forall _p: Perm :: {geq(full(),_p)} geq(full(),_p)}
    axiom axFullGeq2 { forall _p: Perm :: {geq(_p, full())} geq(_p, full()) <==> _p == full()}
    axiom axGeqId { forall _p: Perm :: {geq(_p, _p)} geq(_p, _p)}
    axiom axMinusId { forall _p: Perm :: {minus(_p, _p)} minus(_p, _p) == unit()}


    axiom axUnitJoin { forall _p: Perm :: {plus(unit(),_p)} plus(unit(),_p) == _p}
    axiom axUnitJoinable { forall _p: Perm :: {joinable(_p, unit())} joinable(_p, unit())}
    axiom axJoinableComm { forall _p: Perm, _q: Perm :: {joinable(_p, _q)} joinable(_p, _q) == joinable(_q,_p)}
    axiom axTimes0 { forall _p: Perm :: {times(unit(),_p)} times(unit(),_p) == unit()}
    axiom axTimes1 { forall _p: Perm :: {times(full(),_p)} times(full(),_p) == _p}

    axiom axGeqPlus { forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(_a, _x)}
    axiom axGeqMinus {forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(minus(_a, _y), _x)}
    axiom axMinusUneq { forall _p: Perm, _q: Perm :: {geq(_p, _q)} geq(_p, _q) && _p != _q ==> minus(_p, _q) != unit()}

    axiom axPositive {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == unit() ==> _p == unit() && _q == unit()}
    axiom axPlusGeq {forall _p: Perm, _q: Perm :: {geq(plus(_p, _q), _p)} joinable(_p, _q) ==> geq(plus(_p, _q), _p)}
    axiom axMinusCancel {forall _p: Perm, _q: Perm :: {minus(plus(_p, _q), _q)} minus(plus(_p, _q), _q) == _p}

}
