// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

/* This test is due to Stefan Blom. He noticed that the snapshots-as-arrays encoding
 * that Silicon-QP used at some point slowed the verification of this test down
 * quite a lot (from a few seconds to several minutes.)
 */

field Integer_value: Int

method loop_main_54(this: Ref, len: Int, ar: Seq[Ref], br: Seq[Ref], cr: Seq[Ref])
  requires 0 < len /* Added after fixing issue #99  */
  requires |ar| == len
  requires (forall i: Int :: (i in [0..len)) ==> acc(ar[i].Integer_value, 1 / 2))
  requires acc(ar[0].Integer_value, 1 / 2) /* Failed after fixing issue #99 */
  requires (forall i: Int :: (i in [0 + 1..|ar| - 1 + 1)) ==> acc(ar[i].Integer_value, 1 / 2))
  requires |br| == len
  requires (forall i: Int :: (i in [0..len)) ==> acc(br[i].Integer_value, 1 / 2))
  requires |cr| == len
  requires (forall i: Int :: (i in [0..len)) ==> acc(cr[i].Integer_value, write))
  ensures |ar| == len
  ensures (forall i: Int :: (i in [0..len)) ==> acc(ar[i].Integer_value, write))
  ensures |br| == len
  ensures (forall i: Int :: (i in [0..len)) ==> acc(br[i].Integer_value, 1 / 2))
  ensures |cr| == len
  ensures (forall i: Int :: (i in [0..len)) ==> acc(cr[i].Integer_value, write))
{
  inhale false
}

method recv_body_96(this: Ref, ar: Seq[Ref], i: Int)
  requires 0 <= i && i < |ar|
  ensures acc(ar[i].Integer_value, 1 / 2)
{
  inhale false
}

method send_body_106(this: Ref, ar: Seq[Ref], i: Int)
  requires -1 <= i && i+1 < |ar|
  requires acc(ar[i + 1].Integer_value, 1 / 2)
{
  inhale false
}

method loop_body_54(this: Ref, len: Int, ar: Seq[Ref], br: Seq[Ref], i: Int, cr: Seq[Ref])
  requires (0 <= i) && (i < len)
  requires |ar| == len
  requires acc(ar[i].Integer_value, 1 / 2)
  requires (i == 0) ==> acc(ar[i].Integer_value, 1 / 2)
  requires (i < |ar| - 1) ==> acc(ar[i + 1].Integer_value, 1 / 2)
  requires |br| == len
  requires acc(br[i].Integer_value, 1 / 2)
  requires |cr| == len
  requires acc(cr[i].Integer_value, write)
  ensures (0 <= i) && (i < len)
  ensures |ar| == len
  ensures acc(ar[i].Integer_value, write)
  ensures |br| == len
  ensures acc(br[i].Integer_value, 1 / 2)
  ensures |cr| == len
  ensures acc(cr[i].Integer_value, write)
{
  if (i > 0) {
    recv_body_96(this, ar, i)
  }
  ar[i].Integer_value := br[i].Integer_value + 1
  if (i < len - 1) {
    cr[i].Integer_value := ar[i + 1].Integer_value + 2
    send_body_106(this, ar, i)
  }
}

method zero_array(this: Ref, ar: Seq[Ref], br: Seq[Ref], cr: Seq[Ref], len: Int) returns (sys__result: Int)
  requires |ar| == len
  requires (forall i: Int :: (i in [0..len)) ==> acc(ar[i].Integer_value, write))
  requires |br| == len
  requires (forall i: Int :: (i in [0..len)) ==> acc(br[i].Integer_value, 1 / 2))
  requires |cr| == len
  requires (forall i: Int :: (i in [0..len)) ==> acc(cr[i].Integer_value, write))
  ensures |ar| == len
  ensures (forall i: Int :: (i in [0..len)) ==> acc(ar[i].Integer_value, write))
  ensures |br| == len
  ensures (forall i: Int :: (i in [0..len)) ==> acc(br[i].Integer_value, 1 / 2))
  ensures |cr| == len
  ensures (forall i: Int :: (i in [0..len)) ==> acc(cr[i].Integer_value, write))
{
  assert |ar| == len
  assert |br| == len
  assert |cr| == len
  inhale 0 < len /* Added after fixing issue #99  */
  loop_main_54(this, len, ar, br, cr)
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}
}
