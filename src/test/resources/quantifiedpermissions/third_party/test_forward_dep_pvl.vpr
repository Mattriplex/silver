// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field Ref__a: Seq[Ref]

field Ref__b: Seq[Ref]

field Ref__c: Seq[Ref]

field Ref__Integer_value: Int

method Ref__main_main(diz: Ref, current_thread_id: Int, tcount: Int, gsize: Int, tid: Int, gid: Int, lid: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires 0 <= tid
  requires tid < tcount
  requires tid == lid
  requires tcount == gsize
  requires gid == 0
  requires acc(diz.Ref__a, wildcard)
  requires |diz.Ref__a| == tcount
  requires acc(diz.Ref__b, wildcard)
  requires |diz.Ref__b| == tcount
  requires acc(diz.Ref__c, wildcard)
  requires |diz.Ref__c| == tcount
  requires acc(diz.Ref__a[tid].Ref__Integer_value, write)
  requires acc(diz.Ref__b[tid].Ref__Integer_value, 1 / 2)
  requires acc(diz.Ref__c[tid].Ref__Integer_value, write)
  requires diz.Ref__b[tid].Ref__Integer_value == tid
  ensures 0 <= tid
  ensures tid < tcount
  ensures tid == lid
  ensures tcount == gsize
  ensures gid == 0
  ensures acc(diz.Ref__a, wildcard)
  ensures |diz.Ref__a| == tcount
  ensures acc(diz.Ref__b, wildcard)
  ensures |diz.Ref__b| == tcount
  ensures acc(diz.Ref__c, wildcard)
  ensures |diz.Ref__c| == tcount
  ensures diz.Ref__a == old(diz.Ref__a)
  ensures diz.Ref__b == old(diz.Ref__b)
  ensures diz.Ref__c == old(diz.Ref__c)
  ensures acc(diz.Ref__a[tid].Ref__Integer_value, 1 / 2)
  ensures acc(diz.Ref__b[tid].Ref__Integer_value, 1 / 2)
  ensures acc(diz.Ref__c[tid].Ref__Integer_value, write)
  ensures diz.Ref__a[tid].Ref__Integer_value == tid + 1
  ensures diz.Ref__b[tid].Ref__Integer_value == tid
  ensures (tid > 0) ==> (diz.Ref__c[tid].Ref__Integer_value == tid + 2)
{
  var __last_barrier: Int
  var __flatten_1: Int
  var __flatten_2: Ref
  var __flatten_3: Int
  var __flatten_4: Ref
  var __flatten_6: Ref
  var __flatten_7: Int
  var __flatten_8: Ref
  __last_barrier := 0
  __flatten_2 := diz.Ref__a[tid]
  __flatten_4 := diz.Ref__b[tid]
  __flatten_3 := __flatten_4.Ref__Integer_value + 1
  __flatten_2.Ref__Integer_value := __flatten_3
  __flatten_1 := Ref__main_barrier(diz, current_thread_id, tcount, gsize, tid, gid, lid, 1, __last_barrier)
  __last_barrier := __flatten_1
  if (tid > 0) {
    __flatten_6 := diz.Ref__c[tid]
    __flatten_8 := diz.Ref__a[tid - 1]
    __flatten_7 := __flatten_8.Ref__Integer_value + 2
    __flatten_6.Ref__Integer_value := __flatten_7
  }
}

method Ref__main_barrier(diz: Ref, current_thread_id: Int, tcount: Int, gsize: Int, tid: Int, gid: Int, lid: Int, this_barrier: Int, last_barrier: Int) returns (sys__result: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires (this_barrier == 1) ==> false || (last_barrier == 0)
  requires 0 <= tid
  requires tid < tcount
  requires tid == lid
  requires tcount == gsize
  requires gid == 0
  requires acc(diz.Ref__a, wildcard)
  requires |diz.Ref__a| == tcount
  requires acc(diz.Ref__b, wildcard)
  requires |diz.Ref__b| == tcount
  requires acc(diz.Ref__c, wildcard)
  requires |diz.Ref__c| == tcount
  requires (last_barrier == 1) ==> ((tid > 0) ==> acc(diz.Ref__a[tid - 1].Ref__Integer_value, 1 / 2)) && acc(diz.Ref__a[tid].Ref__Integer_value, 1 / 2) && acc(diz.Ref__b[tid].Ref__Integer_value, 1 / 2) && acc(diz.Ref__c[tid].Ref__Integer_value, write)
  requires (last_barrier == 0) ==> acc(diz.Ref__a[tid].Ref__Integer_value, write) && acc(diz.Ref__b[tid].Ref__Integer_value, 1 / 2) && acc(diz.Ref__c[tid].Ref__Integer_value, write)
  requires (this_barrier == 1) ==> (diz.Ref__a[tid].Ref__Integer_value == tid + 1)
  ensures 0 <= tid
  ensures tid < tcount
  ensures tid == lid
  ensures tcount == gsize
  ensures gid == 0
  ensures acc(diz.Ref__a, wildcard)
  ensures |diz.Ref__a| == tcount
  ensures acc(diz.Ref__b, wildcard)
  ensures |diz.Ref__b| == tcount
  ensures acc(diz.Ref__c, wildcard)
  ensures |diz.Ref__c| == tcount
  ensures diz.Ref__a == old(diz.Ref__a)
  ensures diz.Ref__b == old(diz.Ref__b)
  ensures diz.Ref__c == old(diz.Ref__c)
  ensures (sys__result == 1) ==> ((tid > 0) ==> acc(diz.Ref__a[tid - 1].Ref__Integer_value, 1 / 2)) && acc(diz.Ref__a[tid].Ref__Integer_value, 1 / 2) && acc(diz.Ref__b[tid].Ref__Integer_value, 1 / 2) && acc(diz.Ref__c[tid].Ref__Integer_value, write)
  ensures (sys__result == 0) ==> acc(diz.Ref__a[tid].Ref__Integer_value, write) && acc(diz.Ref__b[tid].Ref__Integer_value, 1 / 2) && acc(diz.Ref__c[tid].Ref__Integer_value, write)
  ensures sys__result == this_barrier
  ensures (this_barrier == 1) ==> (tid > 0) ==> (diz.Ref__a[tid - 1].Ref__Integer_value == tid)
  ensures (this_barrier == 1) ==> (diz.Ref__a[tid].Ref__Integer_value == old(diz.Ref__a[tid].Ref__Integer_value))
  ensures (this_barrier == 1) ==> (diz.Ref__b[tid].Ref__Integer_value == old(diz.Ref__b[tid].Ref__Integer_value))
{
  inhale false
}

method Ref__main_resources_of_1(diz: Ref, current_thread_id: Int, tcount: Int, gsize: Int, gid: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires tcount == gsize
  requires gid == 0
  requires acc(diz.Ref__a, wildcard)
  requires |diz.Ref__a| == tcount
  requires acc(diz.Ref__b, wildcard)
  requires |diz.Ref__b| == tcount
  requires acc(diz.Ref__c, wildcard)
  requires |diz.Ref__c| == tcount
  requires (forall tid: Int :: (0 <= tid) && (tid < gsize) ==> acc(diz.Ref__a[tid].Ref__Integer_value, write))
  requires (forall tid: Int :: (0 <= tid) && (tid < gsize) ==> acc(diz.Ref__b[tid].Ref__Integer_value, 1 / 2))
  requires (forall tid: Int :: (0 <= tid) && (tid < gsize) ==> acc(diz.Ref__c[tid].Ref__Integer_value, write))
  ensures tcount == gsize
  ensures gid == 0
  ensures acc(diz.Ref__a, wildcard)
  ensures |diz.Ref__a| == tcount
  ensures acc(diz.Ref__b, wildcard)
  ensures |diz.Ref__b| == tcount
  ensures acc(diz.Ref__c, wildcard)
  ensures |diz.Ref__c| == tcount
  ensures diz.Ref__a == old(diz.Ref__a)
  ensures diz.Ref__b == old(diz.Ref__b)
  ensures diz.Ref__c == old(diz.Ref__c)
  ensures (forall tid: Int :: ((0 <= 0 ? 1 : 0) - 1 <= tid) && (tid < gsize - 1) ==> acc(diz.Ref__a[tid].Ref__Integer_value, 1 / 2))
  ensures (forall tid: Int :: (0 <= tid) && (tid < gsize) ==> acc(diz.Ref__a[tid].Ref__Integer_value, 1 / 2))
  ensures (forall tid: Int :: (0 <= tid) && (tid < gsize) ==> acc(diz.Ref__b[tid].Ref__Integer_value, 1 / 2))
  ensures (forall tid: Int :: (0 <= tid) && (tid < gsize) ==> acc(diz.Ref__c[tid].Ref__Integer_value, write))
{
}

method Ref__main_post_check_1(diz: Ref, current_thread_id: Int, tcount: Int, gsize: Int, tid: Int, gid: Int, lid: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires 0 <= tid
  requires tid < tcount
  requires tid == lid
  requires tcount == gsize
  requires gid == 0
  requires acc(diz.Ref__a, wildcard)
  requires |diz.Ref__a| == tcount
  requires acc(diz.Ref__b, wildcard)
  requires |diz.Ref__b| == tcount
  requires acc(diz.Ref__c, wildcard)
  requires |diz.Ref__c| == tcount
  requires (forall _x_tid: Int :: (0 <= _x_tid) && (_x_tid < gsize) ==> acc(diz.Ref__a[_x_tid].Ref__Integer_value, write))
  requires (forall _x_tid: Int :: (0 <= _x_tid) && (_x_tid < gsize) ==> acc(diz.Ref__b[_x_tid].Ref__Integer_value, 1 / 2))
  requires (forall _x_tid: Int :: (0 <= _x_tid) && (_x_tid < gsize) ==> acc(diz.Ref__c[_x_tid].Ref__Integer_value, write))
  requires (forall _x_tid: Int :: (0 <= _x_tid) && (_x_tid < gsize) ==> (diz.Ref__a[_x_tid].Ref__Integer_value == _x_tid + 1))
  ensures 0 <= tid
  ensures tid < tcount
  ensures tid == lid
  ensures tcount == gsize
  ensures gid == 0
  ensures acc(diz.Ref__a, wildcard)
  ensures |diz.Ref__a| == tcount
  ensures acc(diz.Ref__b, wildcard)
  ensures |diz.Ref__b| == tcount
  ensures acc(diz.Ref__c, wildcard)
  ensures |diz.Ref__c| == tcount
  ensures diz.Ref__a == old(diz.Ref__a)
  ensures diz.Ref__b == old(diz.Ref__b)
  ensures diz.Ref__c == old(diz.Ref__c)
  ensures (tid > 0) ==> acc(diz.Ref__a[tid - 1].Ref__Integer_value, 1 / 2)
  ensures acc(diz.Ref__a[tid].Ref__Integer_value, 1 / 2)
  ensures acc(diz.Ref__b[tid].Ref__Integer_value, 1 / 2)
  ensures acc(diz.Ref__c[tid].Ref__Integer_value, write)
  ensures (tid > 0) ==> (diz.Ref__a[tid - 1].Ref__Integer_value == tid)
  ensures diz.Ref__a[tid].Ref__Integer_value == old(diz.Ref__a[tid].Ref__Integer_value)
  ensures diz.Ref__b[tid].Ref__Integer_value == old(diz.Ref__b[tid].Ref__Integer_value)
{
}
//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}
}
