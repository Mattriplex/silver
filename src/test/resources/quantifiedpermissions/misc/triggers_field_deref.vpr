// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field f: Int
field g: Int

domain Dummy {
  function fun01(x: Ref): Bool
  function fun02(v: Int): Int
}

method test01(x: Ref, y: Ref) {
  inhale forall z: Ref :: z == x || z == y ==> acc(z.f)
  inhale x != null && y != null // TODO: Should not be necessary, see Silicon issue 61
  inhale forall z: Ref :: {z.f} z == x || z == y ==> z.f > 0

  assert x.f > 0
}

method test01b(x: Ref, y: Ref) {
  inhale forall z: Ref :: z == x || z == y ==> acc(z.f)
  inhale forall z: Ref :: z == x || z == y ==> acc(z.g)
  inhale x != null && y != null // TODO: Should not be necessary, see Silicon issue 61
  inhale forall z: Ref :: {z.f} z == x || z == y ==> fun02(z.g) > 0 && fun02(z.f) > 0

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert fun02(x.g) > 0 /* The forall should not be triggered */
}

method test02(x: Ref, y: Ref) {
  inhale forall z: Ref :: z == x || z == y ==> acc(z.f)
  inhale forall z: Ref :: z == x || z == y ==> acc(z.g)
  inhale x != null && y != null // TODO: Should not be necessary, see Silicon issue 61
  inhale forall z: Ref :: {fun01(z), z.f, z.g} z == x || z == y ==> z.f + z.g > 0

  assume fun01(x)
  assert x.f + x.g > 0
}

method test02b(x: Ref, y: Ref) {
  inhale forall z: Ref :: z == x || z == y ==> acc(z.f)
  inhale forall z: Ref :: z == x ==> acc(z.g)
  inhale forall z: Ref :: z == y ==> acc(z.g)
  inhale x != null && y != null // TODO: Should not be necessary, see Silicon issue 61
  inhale forall z: Ref :: {fun01(z), z.f, z.g} z == x || z == y ==> z.f + z.g > 0

  assume fun01(x)
  assert x.f + x.g > 0
}

method test02c(x: Ref, y: Ref) {
  inhale forall z: Ref :: z == x ==> acc(z.f)
  inhale forall z: Ref :: z == y ==> acc(z.f)
  inhale forall z: Ref :: z == x ==> acc(z.g)
  inhale forall z: Ref :: z == y ==> acc(z.g)

  inhale x != null && y != null // TODO: Should not be necessary, see Silicon issue 61
  inhale forall z: Ref :: {fun01(z), z.f, z.g} z == x || z == y ==> z.f + z.g > 0

  assume fun01(x)
  assert x.f + x.g > 0
}

method test03(x: Ref, y: Ref) {
  inhale forall z: Ref :: z == x ==> acc(z.f)
  inhale forall z: Ref :: z == y ==> acc(z.f)
  inhale forall z: Ref :: z == x ==> acc(z.g)
  inhale forall z: Ref :: z == y ==> acc(z.g)

  inhale x != null && y != null // TODO: Should not be necessary, see Silicon issue 61
  inhale forall z: Ref :: {fun01(z), z.f, z.g} z == x || z == y ==> z.f + z.g + z.f > 0

  assume fun01(x)
  assert 2 * x.f + x.g > 0
}

method test04(x: Ref, y: Ref) {
  inhale forall z: Ref :: z == x || z == y ==> acc(z.f)
  inhale x != null && y != null // TODO: Should not be necessary, see Silicon issue 61
  inhale forall z: Ref :: {fun02(z.f)} z == x || z == y ==> fun02(z.f) == 0

  assert fun02(x.f) >= 0
}

function inv(v: Int): Bool { v == 0 }

method test04b(x: Ref, y: Ref) {
  inhale forall z: Ref :: z == x || z == y ==> acc(z.f)
  inhale x != null && y != null // TODO: Should not be necessary, see Silicon issue 61
  inhale forall z: Ref :: {inv(z.f)} z == x || z == y ==> inv(z.f)

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert x.f == 0 /* The forall should not be triggered */
}

method test04c(x: Ref, y: Ref) {
  inhale forall z: Ref :: z == x || z == y ==> acc(z.f)
  inhale x != null && y != null // TODO: Should not be necessary, see Silicon issue 61
  inhale forall z: Ref :: {z.f} z == x || z == y ==> inv(z.f)

  assert x.f == 0
}

method test05(x: Ref, y: Ref) {
  inhale forall z: Ref :: z == x ==> acc(z.f)
  inhale forall z: Ref :: z == y ==> acc(z.f)
  inhale forall z: Ref :: z == x ==> acc(z.g)
  inhale forall z: Ref :: z == y ==> acc(z.g)

  inhale x != null && y != null // TODO: Should not be necessary, see Silicon issue 61
  inhale forall z: Ref :: {fun01(z), z.f, z.g} z == x || z == y ==> z.f + z.g + z.f > 0

  assume fun01(x)
  assert 2 * x.f + x.g > 0
}

method test06(x: Ref, y: Ref) {
  inhale forall z: Ref :: z == x ==> acc(z.f)
  inhale forall z: Ref :: z == y ==> acc(z.f)
  inhale forall z: Ref :: z == x ==> acc(z.g)
  inhale forall z: Ref :: z == y ==> acc(z.g)
  inhale x != null && y != null // TODO: Should not be necessary, see Silicon issue 61
  inhale forall z: Ref :: {z.f, z.g} z == x || z == y ==> z.f > 0 && z.g > 0

  assume fun02(y.f) == 42
  assert y.g > 0
}

method test06b(x: Ref, y: Ref) {
  inhale forall z: Ref :: z == x ==> acc(z.f)
  inhale forall z: Ref :: z == y ==> acc(z.f)
  inhale forall z: Ref :: z == x ==> acc(z.g)
  inhale forall z: Ref :: z == y ==> acc(z.g)
  inhale x != null && y != null // TODO: Should not be necessary, see Silicon issue 61
  inhale forall z: Ref :: {z.f, z.g} z == x || z == y ==> z.f > 0 && z.g > 0

  assume fun02(x.f) == 42
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert y.g > 0 /* The forall should not be triggered */
}

method test07a(xs: Seq[Ref]) {
  inhale (forall x: Int :: x in [0..|xs|) ==> acc(xs[x].f))

  inhale (forall x: Int :: {xs[x].f} (0 <= x) && (x < |xs|) ==> (xs[x].f == 0))
  assert (forall x: Int :: {xs[x].f} (0 <= x) && (x < |xs|) ==> (xs[x].f == 0))
}

method test07b(xs: Seq[Ref]) {
  inhale (forall x: Int :: x in [0..|xs|) ==> acc(xs[x].f))

  inhale (forall x: Int :: (0 <= x) && (x < |xs|) ==> (xs[x].f == 0))
  assert (forall x: Int :: (0 <= x) && (x < |xs|) ==> (xs[x].f == 0))
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axUnitJoinable { forall p: Perm :: {joinable(p, unit())} joinable(p, unit())}
    axiom axJoinableComm { forall p: Perm, q: Perm :: {joinable(p, q)} joinable(p, q) == joinable(q, p)}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}

    axiom axGeqPlus { forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(a, x)}
    axiom axGeqMinus {forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) <==> geq(minus(a, y), x)}

}
