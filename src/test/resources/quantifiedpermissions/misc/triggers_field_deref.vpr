// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field f: Int
field g: Int

domain Dummy {
  function fun01(x: Ref): Bool
  function fun02(v: Int): Int
}

method test01(x: Ref, y: Ref) {
  inhale forall z: Ref :: z == x || z == y ==> acc(z.f)
  inhale x != null && y != null // TODO: Should not be necessary, see Silicon issue 61
  inhale forall z: Ref :: {z.f} z == x || z == y ==> z.f > 0

  assert x.f > 0
}

method test01b(x: Ref, y: Ref) {
  inhale forall z: Ref :: z == x || z == y ==> acc(z.f)
  inhale forall z: Ref :: z == x || z == y ==> acc(z.g)
  inhale x != null && y != null // TODO: Should not be necessary, see Silicon issue 61
  inhale forall z: Ref :: {z.f} z == x || z == y ==> fun02(z.g) > 0 && fun02(z.f) > 0

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert fun02(x.g) > 0 /* The forall should not be triggered */
}

method test02(x: Ref, y: Ref) {
  inhale forall z: Ref :: z == x || z == y ==> acc(z.f)
  inhale forall z: Ref :: z == x || z == y ==> acc(z.g)
  inhale x != null && y != null // TODO: Should not be necessary, see Silicon issue 61
  inhale forall z: Ref :: {fun01(z), z.f, z.g} z == x || z == y ==> z.f + z.g > 0

  assume fun01(x)
  assert x.f + x.g > 0
}

method test02b(x: Ref, y: Ref) {
  inhale forall z: Ref :: z == x || z == y ==> acc(z.f)
  inhale forall z: Ref :: z == x ==> acc(z.g)
  inhale forall z: Ref :: z == y ==> acc(z.g)
  inhale x != null && y != null // TODO: Should not be necessary, see Silicon issue 61
  inhale forall z: Ref :: {fun01(z), z.f, z.g} z == x || z == y ==> z.f + z.g > 0

  assume fun01(x)
  assert x.f + x.g > 0
}

method test02c(x: Ref, y: Ref) {
  inhale forall z: Ref :: z == x ==> acc(z.f)
  inhale forall z: Ref :: z == y ==> acc(z.f)
  inhale forall z: Ref :: z == x ==> acc(z.g)
  inhale forall z: Ref :: z == y ==> acc(z.g)

  inhale x != null && y != null // TODO: Should not be necessary, see Silicon issue 61
  inhale forall z: Ref :: {fun01(z), z.f, z.g} z == x || z == y ==> z.f + z.g > 0

  assume fun01(x)
  assert x.f + x.g > 0
}

method test03(x: Ref, y: Ref) {
  inhale forall z: Ref :: z == x ==> acc(z.f)
  inhale forall z: Ref :: z == y ==> acc(z.f)
  inhale forall z: Ref :: z == x ==> acc(z.g)
  inhale forall z: Ref :: z == y ==> acc(z.g)

  inhale x != null && y != null // TODO: Should not be necessary, see Silicon issue 61
  inhale forall z: Ref :: {fun01(z), z.f, z.g} z == x || z == y ==> z.f + z.g + z.f > 0

  assume fun01(x)
  assert 2 * x.f + x.g > 0
}

method test04(x: Ref, y: Ref) {
  inhale forall z: Ref :: z == x || z == y ==> acc(z.f)
  inhale x != null && y != null // TODO: Should not be necessary, see Silicon issue 61
  inhale forall z: Ref :: {fun02(z.f)} z == x || z == y ==> fun02(z.f) == 0

  assert fun02(x.f) >= 0
}

function inv(v: Int): Bool { v == 0 }

method test04b(x: Ref, y: Ref) {
  inhale forall z: Ref :: z == x || z == y ==> acc(z.f)
  inhale x != null && y != null // TODO: Should not be necessary, see Silicon issue 61
  inhale forall z: Ref :: {inv(z.f)} z == x || z == y ==> inv(z.f)

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert x.f == 0 /* The forall should not be triggered */
}

method test04c(x: Ref, y: Ref) {
  inhale forall z: Ref :: z == x || z == y ==> acc(z.f)
  inhale x != null && y != null // TODO: Should not be necessary, see Silicon issue 61
  inhale forall z: Ref :: {z.f} z == x || z == y ==> inv(z.f)

  assert x.f == 0
}

method test05(x: Ref, y: Ref) {
  inhale forall z: Ref :: z == x ==> acc(z.f)
  inhale forall z: Ref :: z == y ==> acc(z.f)
  inhale forall z: Ref :: z == x ==> acc(z.g)
  inhale forall z: Ref :: z == y ==> acc(z.g)

  inhale x != null && y != null // TODO: Should not be necessary, see Silicon issue 61
  inhale forall z: Ref :: {fun01(z), z.f, z.g} z == x || z == y ==> z.f + z.g + z.f > 0

  assume fun01(x)
  assert 2 * x.f + x.g > 0
}

method test06(x: Ref, y: Ref) {
  inhale forall z: Ref :: z == x ==> acc(z.f)
  inhale forall z: Ref :: z == y ==> acc(z.f)
  inhale forall z: Ref :: z == x ==> acc(z.g)
  inhale forall z: Ref :: z == y ==> acc(z.g)
  inhale x != null && y != null // TODO: Should not be necessary, see Silicon issue 61
  inhale forall z: Ref :: {z.f, z.g} z == x || z == y ==> z.f > 0 && z.g > 0

  assume fun02(y.f) == 42
  assert y.g > 0
}

method test06b(x: Ref, y: Ref) {
  inhale forall z: Ref :: z == x ==> acc(z.f)
  inhale forall z: Ref :: z == y ==> acc(z.f)
  inhale forall z: Ref :: z == x ==> acc(z.g)
  inhale forall z: Ref :: z == y ==> acc(z.g)
  inhale x != null && y != null // TODO: Should not be necessary, see Silicon issue 61
  inhale forall z: Ref :: {z.f, z.g} z == x || z == y ==> z.f > 0 && z.g > 0

  assume fun02(x.f) == 42
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert y.g > 0 /* The forall should not be triggered */
}

method test07a(xs: Seq[Ref]) {
  inhale (forall x: Int :: x in [0..|xs|) ==> acc(xs[x].f))

  inhale (forall x: Int :: {xs[x].f} (0 <= x) && (x < |xs|) ==> (xs[x].f == 0))
  assert (forall x: Int :: {xs[x].f} (0 <= x) && (x < |xs|) ==> (xs[x].f == 0))
}

method test07b(xs: Seq[Ref]) {
  inhale (forall x: Int :: x in [0..|xs|) ==> acc(xs[x].f))

  inhale (forall x: Int :: (0 <= x) && (x < |xs|) ==> (xs[x].f == 0))
  assert (forall x: Int :: (0 <= x) && (x < |xs|) ==> (xs[x].f == 0))
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(_x: Perm, _y: Perm): Perm
    function minus(_x: Perm, _y: Perm): Perm
    function geq(_x: Perm, _y: Perm): Bool
    function joinable(_x: Perm, _y: Perm): Bool

    function times(_x: Perm, _y: Perm): Perm

    //Auxiliary functions
    function share(_x: Rational): Perm
    function valid_share(_x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall _a: Int, _b: Int :: {biConstr(_a, _b)} biConstr(_a, _b) == share(_a/_b)}


    axiom axValid { forall _x: Rational :: {valid_share(_x)}
        valid_share(_x) <==> (_x >= 0/1 && _x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall _a: Rational, _b: Rational :: { share(_a), share(_b) }
        share(_a) == share(_b) ==> _a == _b
    }
    axiom axPlus { forall _a: Rational, _b: Rational :: { plus(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) ==> plus(share(_a), share(_b)) == share(_a + _b)
    }
    axiom axMinus { forall _a: Rational, _b: Rational :: { minus(share(_a), share(_b)) }
        geq(share(_a), share(_b)) ==> minus(share(_a), share(_b)) == share(_a - _b)
    }
    axiom axCanJoin { forall _a: Rational, _b: Rational :: { joinable(share(_a), share(_b)) }
        joinable(share(_a), share(_b)) <==> valid_share(_a) && valid_share(_b) && valid_share(_a + _b)
    }
    axiom axGeq { forall _a: Rational, _b: Rational :: { geq(share(_a), share(_b)) }
        geq(share(_a), share(_b)) <==> valid_share(_a) && valid_share(_b) && valid_share(_a - _b)
    }
    axiom axMul { forall _a: Rational, _b: Rational :: {times(share(_a), share(_b))} times(share(_a), share(_b)) == share(_a * _b)}

    axiom axJoinComm {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == plus(_q, _p)}
    axiom axJoinAssoc {forall _p: Perm, _q: Perm, _r: Perm :: {plus(plus(_p, _q), _r)} plus(plus(_p, _q), _r) == plus(_p, plus(_q, _r))}
    axiom axJoinCancel { forall _p: Perm, _q: Perm, _x: Perm :: {plus(_p, _x), plus(_q, _x)} plus(_p, _x) == plus(_q, _x) ==> _p == _q}

    axiom axUnitGeq { forall _p: Perm :: {geq(_p, unit())} geq(_p, unit())}
    axiom axUnitGeq2 { forall _p: Perm :: {geq(unit(),_p)} geq(unit(),_p) <==> _p == unit()}
    axiom axFullGeq { forall _p: Perm :: {geq(full(),_p)} geq(full(),_p)}
    axiom axFullGeq2 { forall _p: Perm :: {geq(_p, full())} geq(_p, full()) <==> _p == full()}
    axiom axGeqId { forall _p: Perm :: {geq(_p, _p)} geq(_p, _p)}
    axiom axMinusId { forall _p: Perm :: {minus(_p, _p)} minus(_p, _p) == unit()}


    axiom axUnitJoin { forall _p: Perm :: {plus(unit(),_p)} plus(unit(),_p) == _p}
    axiom axUnitJoinable { forall _p: Perm :: {joinable(_p, unit())} joinable(_p, unit())}
    axiom axJoinableComm { forall _p: Perm, _q: Perm :: {joinable(_p, _q)} joinable(_p, _q) == joinable(_q,_p)}
    axiom axTimes0 { forall _p: Perm :: {times(unit(),_p)} times(unit(),_p) == unit()}
    axiom axTimes1 { forall _p: Perm :: {times(full(),_p)} times(full(),_p) == _p}

    axiom axGeqPlus { forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(_a, _x)}
    axiom axGeqMinus {forall _a: Perm, _x: Perm, _y: Perm :: {geq(_a, plus(_x, _y))} geq(_a, plus(_x, _y)) ==> geq(minus(_a, _y), _x)}
    axiom axMinusUneq { forall _p: Perm, _q: Perm :: {geq(_p, _q)} geq(_p, _q) && _p != _q ==> minus(_p, _q) != unit()}

    axiom axPositive {forall _p: Perm, _q: Perm :: {plus(_p, _q)} plus(_p, _q) == unit() ==> _p == unit() && _q == unit()}
    axiom axPlusGeq {forall _p: Perm, _q: Perm :: {geq(plus(_p, _q), _p)} joinable(_p, _q) ==> geq(plus(_p, _q), _p)}
    axiom axMinusCancel {forall _p: Perm, _q: Perm :: {minus(plus(_p, _q), _q)} minus(plus(_p, _q), _q) == _p}

}
