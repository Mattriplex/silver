// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field val: Int

domain IArray {
  function loc(a: IArray, i: Int): Ref
  function loc_limited(a: IArray, i: Int): Ref
  function len(a: IArray): Int
  function first(r: Ref): IArray
  function second(r: Ref): Int

  axiom limited {
    forall a: IArray, i: Int :: {loc(a, i)}
      loc(a,i) == loc_limited(a,i)
  } 
  
  axiom all_diff {
    forall a: IArray, i: Int :: {loc(a, i)}
      first(loc(a, i)) == a && second(loc(a, i)) == i
  }

  axiom length_nonneg {
    forall a: IArray :: len(a) >= 0
  }
}

method test01(a: IArray, n: Int)
  requires n > 5
  requires forall i: Int :: i in [0..n) ==> acc(loc(a, i).val)
  ensures  forall i: Int :: i in [0..n) ==> acc(loc(a, i).val)
  ensures  loc(a, 1).val == loc(a, 0).val + old(loc(a, 1).val)
{
  loc(a, 1).val := loc(a, 0).val + loc(a, 1).val
}

method test02(a1: IArray, a2: IArray, n: Int)
  requires a1 != a2
  requires forall i: Int :: i in [0..n) ==> acc(loc(a1, i).val, 1/3)
  requires forall i: Int :: i in [0..n) ==> acc(loc(a2, i).val, 1/3)
{
  assert forall i: Int :: i in [0..n) ==> loc(a1, i) != loc(a2, i)
}

method test03(a: IArray, left: Int, right: Int, pw1: Seq[Int], pw2: Seq[Int]) {
  inhale left == 0
  inhale right <= len(a)

  inhale 0 <= left && left < right && right < len(a)

  inhale forall i: Int :: i in [left..right+1) ==> acc(loc_limited(a, i).val)

  inhale |pw1| == |pw2| && |pw2| == right + 1 - left
  inhale forall i: Int :: 0 <= i && i < |pw1| ==> left <= pw1[i] && pw1[i] <= right
  inhale forall i: Int :: 0 <= i && i < |pw2| ==> left <= pw2[i] && pw2[i] <= right

  // ad hoc triggering to avoid matching loops - this should be revisited (or perhaps dropped from the example)
  inhale forall j: Int :: {loc(a,j).val} 0 <= j - left && j - left < |pw1| ==> loc(a, j).val == loc_limited(a, pw1[j - left]).val
  inhale forall j: Int :: {loc(a, pw2[j])} 0 <= j && j < |pw2| ==> loc_limited(a, j + left).val == loc(a, pw2[j]).val

  assert forall j: Int :: {loc(a, pw1[j])} 0 <= j && j < |pw1| ==> loc(a, j + left).val == loc(a, pw1[j]).val
  // ! Note that even the current trigger has a matching loop (which seems difficult to avoid) ! This works essentially only if this is the last line of the test file...
  assert forall k: Int :: {loc(a,k)} 0 <= k - left && k - left < |pw2| ==> loc_limited(a, k).val == loc(a, pw2[k - left]).val
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axUnitJoinable { forall p: Perm :: {joinable(p, unit())} joinable(p, unit())}
    axiom axJoinableComm { forall p: Perm, q: Perm :: {joinable(p, q)} joinable(p, q) == joinable(q, p)}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}

    axiom axGeqPlus { forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(a, x)}
    axiom axGeqMinus {forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(minus(a, y), x)}
    axiom axMinusUneq { forall p: Perm, q: Perm :: {geq(p, q)} geq(p, q) && p != q ==> minus(p, q) != unit()}

}
