// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

define RED 0
define WHITE 1
define BLUE 2

define ordered(a,i,j) loc(a,i).val <= loc(a,j).val

define access(a) forall i: Int :: 0 <= i && i < length(a) ==> acc(loc(a,i).val)

method DutchFlag(a: Array)
  requires access(a)
  requires forall i : Int :: 0 <= i && i < length(a) ==> loc(a,i).val == RED || loc(a,i).val == WHITE || loc(a,i).val == BLUE
  ensures access(a)
  ensures forall i:Int, j: Int :: 0 <= i && i < j && j < length(a) ==> ordered(a,i,j)
{
  var unsorted : Int := 0
  var white : Int := 0
  var blue : Int := length(a)

  while (unsorted < blue)
  invariant access(a)
  invariant 0 <= white && white <= unsorted && unsorted <= blue && blue <= length(a)
  invariant forall i : Int :: 0 <= i && i < length(a) ==> loc(a,i).val == RED || loc(a,i).val == WHITE || loc(a,i).val == BLUE
  invariant forall i : Int :: 0<= i && i < white ==> loc(a,i).val == RED
  invariant forall i : Int :: white<= i && i < unsorted ==> loc(a,i).val == WHITE
  invariant forall i : Int :: blue<= i && i < length(a) ==> loc(a,i).val == BLUE
  {
    var tmp : Int := loc(a,unsorted).val
    if(tmp == WHITE) {
      unsorted := unsorted + 1
    } elseif(tmp == RED) {
      loc(a,unsorted).val := loc(a,white).val
      loc(a,white).val := tmp
      white := white + 1
      unsorted := unsorted + 1
    } else {
      loc(a,unsorted).val := loc(a,blue - 1).val
      blue := blue - 1
      loc(a,blue).val := tmp
    }
  }
}

field val: Int // array slot value
domain Array {
  function loc(a: Array, i: Int): Ref
  function length(a: Array): Int
  function inverse_first(r: Ref): Array // array this slot belongs to
  function inverse_second(r: Ref): Int // index of this array slot

  axiom all_diff {
    forall a: Array, i: Int :: {loc(a, i)}
      inverse_first(loc(a, i)) == a && inverse_second(loc(a, i)) == i
  }

  axiom length_nonneg {
    forall a: Array :: length(a) >= 0
  }
}
//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axUnitJoinable { forall p: Perm :: {joinable(p, unit())} joinable(p, unit())}
    axiom axJoinableComm { forall p: Perm, q: Perm :: {joinable(p, q)} joinable(p, q) == joinable(q, p)}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}

    axiom axGeqPlus { forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(a, x)}
    axiom axGeqMinus {forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) && joinable(x, y) <==> geq(minus(a, y), x) && geq(a, y)}

}
