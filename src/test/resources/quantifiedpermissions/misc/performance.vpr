// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field f: Int

method init(xs: Seq[Ref])
  ensures forall i: Int :: i in [0..|xs|) ==> acc(xs[i].f)
{
  inhale forall i: Int :: i in [0..|xs|) ==> acc(xs[i].f)
}

method leak(xs: Seq[Ref], p: Perm)
  requires p >= none
  requires forall i: Int :: i in [0..|xs|) ==> acc(xs[i].f, p)
{}

method split(xs: Seq[Ref], p: Perm, q: Perm)
  requires p == 2*q
  requires p >= none
  requires forall i: Int :: i in [0..|xs|) ==> acc(xs[i].f, p)
  ensures forall i: Int :: i in [0..|xs|) ==> acc(xs[i].f, q)
  ensures forall i: Int :: i in [0..|xs|) ==> acc(xs[i].f, q)
{}

/* Inspired by Stefan Blom's test case fwd.vpr, this test boils down to lots of
 * inhales and exhales of quantified permissions (over sequences) to the same
 * field. Hence, the permission terms stored in the quantified chunks grow
 * exponentially in the worst case.
 *
 * The test is meant to stress-test both the verifier's and the prover's
 * performance. For example, Silicon could grind to a halt because the
 * permission terms got so large that it essentially could no longer emit them
 * to Z3. If the permission terms get emitted, then Z3 still has to do quite
 * some work to discharge the proof obligations in which these terms occur, for
 * example, that sufficiently many permissions are available.
 */
method test01() {
  var xs1: Seq[Ref]; init(xs1)
  var xs2: Seq[Ref]; init(xs2)
  var xs3: Seq[Ref]; init(xs3)

  split(xs1, write, 1/2)
  split(xs2, 1/2, 1/4)
  split(xs3, write, 1/2)

  leak(xs1, 1/2)
  leak(xs2, 1/2)
  leak(xs3, 1/3)

  // xs1 # 1/2,  xs2 # 1/2,  xs3 # 2/3

  split(xs1, 1/2, 1/4)
  leak(xs1, 1/4)
  leak(xs3, 1/3)

  // xs1 # 1/4,  xs2 # 1/2,  xs3 # 1/3

  split(xs2, 1/2, 1/4)
  leak(xs1, 1/4)

  // xs2 # 1/2,  xs3 # 1/3

  leak(xs3, 1/3)
  leak(xs2, 1/2)
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axUnitJoinable { forall p: Perm :: {joinable(p, unit())} joinable(p, unit())}
    axiom axJoinableComm { forall p: Perm, q: Perm :: {joinable(p, q)} joinable(p, q) == joinable(q, p)}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}

    axiom axGeqPlus { forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(a, x)}
    axiom axGeqMinus {forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) && joinable(x, y) <==> geq(minus(a, y), x) && geq(a, y)}

}
