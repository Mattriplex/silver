// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/
import <decreases/int.vpr>

method m(x: Int)
    decreases x
{
    var y: Int := x
    while(y >= 0)
        decreases y
        invariant y <= x
    {
        y := y - 1
        m(y)
    }
}

method m_e(x: Int)
    decreases x
{
    var y: Int := x
    while(y >= 0)
    //:: ExpectedOutput(termination.failed:tuple.false)
        decreases y
    {
        y := y - 1
        y := y + 1
    }
}

method m_e2(x: Int)
    decreases x
{
    var y: Int := x
    while(y >= 0)
        decreases y
    {
        y := y - 1
    //:: ExpectedOutput(termination.failed:tuple.false)
        m_e2(y)
    }
}


field v: Int

method m2(r: Ref)
    requires acc(r.v)
    decreases r.v
    ensures acc(r.v, write)
    ensures r.v <= old(r.v)
{
    while(r.v >= 0)
        invariant acc(r.v)
        decreases r.v
        invariant r.v <= old(r.v)
    {
        r.v := r.v - 1
        m2(r)
    }
}

method m2_e(r: Ref)
    requires acc(r.v)
    decreases r.v
    ensures acc(r.v, write)
    ensures r.v <= old(r.v)
{
    while(r.v >= 0)
        invariant acc(r.v)
        decreases r.v
        invariant r.v <= old(r.v)
    {
        //:: ExpectedOutput(termination.failed:tuple.false)
        m2_e(r)
        r.v := r.v - 1
    }
}

// nested loops
method m3(r: Ref)
    requires acc(r.v)
    decreases r.v
    ensures acc(r.v, write)
{
    while(r.v >= 0)
        invariant acc(r.v)
        decreases r.v
        invariant r.v <= old(r.v)
    {
        var y: Int := r.v
        while(y >= 0)
            decreases y
        {
            y := y - 1
        }

        r.v := r.v - 1
    }
}

method m3_e(r: Ref)
    requires acc(r.v)
    decreases r.v
    ensures acc(r.v, write)
{
    while(r.v >= 0)
        invariant acc(r.v)
        decreases r.v
        invariant r.v <= old(r.v)
    {
        var y: Int := r.v
        while(y >= 0)
        //:: ExpectedOutput(termination.failed:tuple.false)
            decreases y
        {
            y := y
        }

        r.v := r.v - 1
    }
}

// termination condition
method m4(r: Ref)
    requires acc(r.v)
    decreases r.v
    ensures acc(r.v, write)
{
    var y: Int := r.v
    while(y >= 0)
        invariant acc(r.v)
        decreases y if y >= 0
        invariant y <= old(r.v)
    {
        y := y - 1
    }
}

method m4_e(r: Ref)
    requires acc(r.v)
    decreases r.v
    ensures acc(r.v, write)
{
    var y: Int := r.v
    // if y == 0 then the loop is entered but possibly does not terminate
    //:: ExpectedOutput(termination.failed:termination.condition.false)
    while(y >= 0)
        invariant acc(r.v)
        decreases y if y > 0
        invariant y <= old(r.v)
    {
        y := -1
    }
}

method m4_e2(r: Ref)
    requires acc(r.v)
    ensures acc(r.v, write)
{
    var y: Int := r.v
    while(y >= 0)
        invariant acc(r.v)
    //:: ExpectedOutput(termination.failed:tuple.condition.false)
        decreases y if y > 0
        invariant y <= old(r.v)
    {
        y := y - 2
    // if old[loopStart](y == 2) then tuple decreasing is proven but not anymore for the next iteration
    // note that a next iteration would happen because y == 0
    }
}
//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axUnitJoinable { forall p: Perm :: {joinable(p, unit())} joinable(p, unit())}
    axiom axJoinableComm { forall p: Perm, q: Perm :: {joinable(p, q)} joinable(p, q) == joinable(q, p)}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}

    axiom axGeqPlus { forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(a, x)}
    axiom axGeqMinus {forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) <==> geq(minus(a, y), x)}

}
