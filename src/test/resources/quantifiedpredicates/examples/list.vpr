// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field val:Int
field next:Ref

predicate list(r: Ref, i:Int)
{
    i > 0 ==> acc(r.val) && acc(r.next) && acc(list(r.next, i-1))
}


function allSet(r: Ref, i: Int, v:Int): Bool
  requires acc(list(r, i))
  //ensures acc(list(r, i))
{
  (i <= 0) ? true :
                unfolding acc(list(r, i)) in (
                    (r.val == v) && allSet(r.next, i-1, v)
                )
}

method m1(lists: Set[Ref], length:Int, v:Int)
requires length > 0
requires forall r: Ref :: r in lists ==> acc(list(r, length))
ensures forall r: Ref :: r in lists ==> acc(list(r, length)) && allSet(r, length, v)
{
    var s: Set[Ref] := lists
    var sNext: Set[Ref] := Set[Ref]()
    while (|s| > 0)
    invariant forall r: Ref :: r in s ==> acc(list(r, length))
    invariant forall r: Ref :: r in lists && !(r in s) ==> acc(r.next)
    invariant forall r: Ref :: r in sNext ==> acc(list(r, length-1))
    invariant forall r: Ref :: r in lists && !(r in s) ==> acc(r.val) && r.val == v
    invariant forall r: Ref :: r in lists && !(r in s) ==> r.next in sNext
    invariant forall r1: Ref, r2: Ref :: r1 in lists && !(r1 in s) && r2 in lists && !(r2 in s) && r1 != r2 ==> r1.next != r2.next
    {
        var l:Ref
        assume l in s
        unfold list(l, length)
        assume forall r: Ref :: r in lists && !(r in s) ==> r.next != l.next

        s := s setminus Set(l)
        sNext := sNext union Set(l.next)
        l.val := v
    }
    if (length -1 > 0) {
        m1(sNext, length-1, v)
    }
    s := lists
    while (|s| > 0)
        invariant forall r: Ref :: r in lists && !(r in s) ==> acc(list(r, length)) //&& unfolding list(r, length) in (r.val == v)
        invariant forall r: Ref :: r in lists && !(r in s) ==>  allSet(r, length, v)
        invariant forall r: Ref :: r in s ==> acc(r.val) && r.val == v && acc(r.next)
        invariant forall r1: Ref, r2: Ref :: r1 in s && r2 in s && r1 != r2 ==> r1.next != r2.next
        invariant forall r: Ref :: r in s ==>  acc(list(r.next, length-1))
        invariant forall r: Ref :: r in s ==>  allSet(r.next, length-1, v)
        {
            var l2:Ref
            assume l2 in s
            fold list(l2, length)
            s := s setminus Set(l2)
        }
}
//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axUnitJoinable { forall p: Perm :: {joinable(p, unit())} joinable(p, unit())}
    axiom axJoinableComm { forall p: Perm, q: Perm :: {joinable(p, q)} joinable(p, q) == joinable(q, p)}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}

    axiom axGeqPlus { forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(a, x)}
    axiom axGeqMinus {forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(minus(a, y), x)}
    axiom axMinusUneq { forall p: Perm, q: Perm :: {geq(p, q)} geq(p, q) && p != q ==> minus(p, q) != unit()}

}
