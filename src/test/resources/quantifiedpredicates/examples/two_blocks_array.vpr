// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

//:: IgnoreFile(/silicon/issue/266/)

predicate access(a:IArray, i:Int) {
    (i % 2 == 0)  ==> acc(loc(a, i).val) && acc(loc(a, i+1).val)
}


method readTwo(a:IArray, i:Int) returns (sum:Int)
requires acc(access(a, i)) && (i%2 == 0)
{
    unfold access(a,i)
    sum := loc(a, i).val + loc(a, i+1).val
}


method totalSum(a:IArray, i:Int) returns (sum:Int)
requires i >= 0 && i + 1 < len(a)
requires i % 2 == 0
requires forall j:Int :: (j >= 0 && j < len(a) && (j%2 ==0)) ==> acc(access(a,j))
ensures i >= 0 && i <= len(a)
ensures forall j:Int :: j >= 0 && j < len(a) && (j%2 ==0) ==> acc(access(a,j))
{
    if (i + 3 < len(a)) {
        sum:= totalSum(a, i+2)
        unfold access(a, i)
        sum := sum + loc(a, i).val + loc(a, i+1).val
        fold access(a, i)
    } else {
        unfold access(a, i)
        sum := loc(a, i).val + loc(a, i+1).val
        fold access(a, i)
    }

}


method setVal(a:IArray, i:Int, newVal:Int)
requires i >= 0 && i < len(a)
requires i % 2 == 0
requires len(a)%2 == 0
requires forall j:Int :: j >= 0 && j < len(a) && (j%2 ==0) ==> acc(access(a,j))
ensures i >= 0 && i < len(a)
ensures len(a)%2 == old(len(a)%2)
ensures forall j:Int :: j >= 0 && j < len(a) && (j%2 ==0) ==> acc(access(a,j))
{
    unfold access(a,i)
    loc(a,i).val := newVal
	loc(a,i+1).val := newVal
	fold access(a,i)
	assert (unfolding acc(access(a,i)) in  (loc(a, i).val == newVal)) && (unfolding acc(access(a,i)) in  (loc(a, i+1).val == newVal))

    if (i + 2 < len(a)) {
             setVal(a, i+2, newVal)
    }
}


method setVal2(a:IArray, i:Int, newVal:Int)
requires i >= 0 && i < len(a)
requires forall j:Int :: j >= 0 && j < len(a) ==> acc(loc(a,j).val)
ensures i >= 0 && i < len(a)
ensures forall j:Int :: j >= 0 && j < len(a) ==> acc(loc(a,j).val)
ensures forall j:Int :: j >= 0 && j < len(a) && j < i ==> old(loc(a, j).val) == loc(a, j).val
{
    var k:Int
    assume k >= 0 && k < len(a) && (k%2 == 0) && k!= i
    loc(a,i).val := newVal

	if (i + 2 < len(a)) {
        setVal2(a, i+1, newVal)
    }

}

/* Encoding of arrays */

field val: Int

domain IArray {
  function loc(a: IArray, i: Int): Ref
  function len(a: IArray): Int
  function first(r: Ref): IArray
  function second(r: Ref): Int

  axiom all_diff {
    forall a: IArray, i: Int :: {loc(a, i)}
      first(loc(a, i)) == a && second(loc(a, i)) == i
  }

  axiom len_nonneg {
    forall a: IArray :: len(a) >= 0
  }
}

//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axUnitJoinable { forall p: Perm :: {joinable(p, unit())} joinable(p, unit())}
    axiom axJoinableComm { forall p: Perm, q: Perm :: {joinable(p, q)} joinable(p, q) == joinable(q, p)}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}

    axiom axGeqPlus { forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) ==> geq(a, x)}
    axiom axGeqMinus {forall a: Perm, x: Perm, y: Perm :: {geq(a, plus(x, y))} geq(a, plus(x, y)) <==> geq(minus(a, y), x)}

}
