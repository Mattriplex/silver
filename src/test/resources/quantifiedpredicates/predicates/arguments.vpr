// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/


field f: Int
field g: Int
field unrelatedField: Int

method unrelated(this: Ref)
    requires acc(this.unrelatedField, write)
    ensures acc(this.unrelatedField, write)
{}

predicate valid(this: Ref, b: Bool) {
    b ? acc(this.f, write) : acc(this.g, write)
}

method t1_1(this: Ref, xs : Seq[Ref], b: Bool)
    requires this in xs
    requires forall x: Ref :: x in xs ==> acc(x.unrelatedField, write)
    requires acc(valid(this, b), write)
    ensures acc(valid(this, b), write)
{
    unfold acc(valid(this, b), write)
    if (b) {
        this.f := 1
    } else {
        this.g := 2
    }
    fold acc(valid(this, b), write)
    unrelated(this)
}

method t1_2(this: Ref, xs : Seq[Ref], b: Bool)
    requires this in xs
    requires forall x: Ref :: x in xs ==> acc(x.unrelatedField, write)
    requires forall x: Ref :: x in xs ==> acc(valid(x, b), write)
    ensures acc(valid(this, b), write)
{
    unfold acc(valid(this, b), write)
    if (b) {
        this.f := 1
    } else {
        this.g := 2
    }
    fold acc(valid(this, b), write)
    unrelated(this)
}

method t1_3(this: Ref, xs : Seq[Ref], b: Bool)
    requires this in xs
    requires forall x: Ref :: x in xs ==> acc(x.unrelatedField, write)
    requires forall x: Ref :: x in xs ==> acc(valid(x, b), write)
    ensures forall x: Ref :: x in xs ==> acc(valid(x, b), write)
{
    unfold acc(valid(this, b), write)
    if (b) {
        this.f := 1
    } else {
        this.g := 2
    }
    fold acc(valid(this, b), write)
    unrelated(this)
}

method t1_4(this: Ref, xs : Seq[Ref], b: Bool)
    requires this in xs
    requires acc(this.unrelatedField, write)
    requires forall x: Ref :: x in xs ==> acc(valid(x, b), write)
    ensures acc(valid(this, b), write)
{
    unfold acc(valid(this, b), write)
    if (b) {
        this.f := 1
    } else {
        this.g := 2
    }
    fold acc(valid(this, b), write)
    unrelated(this)
}

method t2(x1: Ref, x2:Ref)
    requires acc(x1.unrelatedField, write)
    requires x1 != x2
    requires forall x:Ref :: x in Set(x1, x2) ==> acc(x.f, write)
    ensures forall x:Ref :: x in Set(x1, x2) ==> acc(valid(x, true), write)
{
    fold acc(valid(x1, true), write)
    fold acc(valid(x2, true), write)
    unrelated(x1)
}

method t2_b(x1: Ref, x2:Ref)
    requires acc(x1.unrelatedField, write)
    requires forall x:Ref :: x in Set(x1, x2) ==> acc(x.f, write)
    ensures forall x:Ref :: x in Set(x1, x2) ==> acc(valid(x, true), write)
{
    //:: ExpectedOutput(fold.failed:insufficient.permission)
    fold acc(valid(x2, false), write)
}

method t3_1(this: Ref, xs: Seq[Ref], b: Bool)
    requires this in xs
    requires acc(this.unrelatedField, write)
    requires forall x: Ref :: x in xs ==> acc(valid(x, b), write)
    requires forall x: Ref :: x in xs ==> acc(valid(x, !b), write)
    requires (unfolding acc(valid(this, false), write) in ((this.g) == 2))
    ensures acc(valid(this, b), write)
    ensures acc(valid(this, !b), write)
    ensures (unfolding acc(valid(this, false), write) in ((this.g) == 2))
{
    unfold acc(valid(this, true), write)
    this.f := 1
    fold acc(valid(this, true), write)
}

method t3a(this: Ref, xs:Seq[Ref], b: Bool)
    requires this in xs
    requires acc(this.unrelatedField, write)
    requires forall x: Ref :: x in xs ==> acc(valid(x, b), write)
    requires forall x: Ref :: x in xs ==> acc(valid(x, !b), write)
    requires (unfolding acc(valid(this, false), write) in ((this.g) == 2))
    ensures acc(valid(this, b), write)
    ensures acc(valid(this, !b), write)
    ensures (unfolding acc(valid(this, false), write) in ((this.g) == 2))
{
    unfold acc(valid(this, true), write)
    this.f := 1
    fold acc(valid(this, true), write)
    unrelated(this)
}

method t3b(this: Ref, xs: Seq[Ref], b: Bool)
    requires this in xs
    requires forall x: Ref :: x in xs ==> acc(valid(x, b), write)
    requires forall x: Ref :: x in xs ==> acc(valid(x, !b), write)
{
    unfold acc(valid(this, true), write)
    this.f := 1
    //:: ExpectedOutput(assignment.failed:insufficient.permission)
    this.g := 1
}
//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}
}
