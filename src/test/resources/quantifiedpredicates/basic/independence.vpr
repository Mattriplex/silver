// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

//:: IgnoreFile(/carbon/issue/216/)
field f: Int
field g: Int

predicate p1(a:Ref) {
	acc(a.f)
}

predicate p2(a:Ref, b:Int) {
	acc(a.g)
}

//independent field
method m1(r:Ref)
{
	var c:Int := 2
	inhale forall x:Int :: x > 0 ==> acc(p2(r, x))
	assert(c == 2)
	exhale forall x:Int :: x > 0 ==> acc(p2(r, x))
	assert (c == 2)
}

//independent predicates
//same predicate, different fix parameter
method m2(r:Ref, r2:Ref, i:Int)
requires r!= r2
requires acc(p2(r2, i))
ensures acc(p2(r2, i))
{
	inhale forall x:Int :: x > 0 ==> acc(p2(r, x))
	unfold p2(r2, i)
	fold p2(r2, i)
	exhale forall x:Int :: x > 0 ==> acc(p2(r, x))
	unfold p2(r2, i)
	fold p2(r2, i)
}

//same predicate, same fix parameter, not in condition
method m3(r:Ref, r2:Ref, i:Int)
requires r!= r2
requires acc(p2(r, -1))
ensures acc(p2(r, -1))
{
	inhale forall x:Int :: x > 0 ==> acc(p2(r, x))
	unfold p2(r, -1)
	fold p2(r, -1)
	exhale forall x:Int :: x > 0 ==> acc(p2(r, x))
	unfold p2(r, -1)
	fold p2(r, -1)
}

//different predicate
method m4(r:Ref, i:Int)
 requires acc(p1(r))
 ensures acc(p1(r))
 {
 	inhale forall x:Int :: x > 0 ==> acc(p2(r, x))
 	unfold p1(r)
 	fold p1(r)
 	exhale forall x:Int :: x > 0 ==> acc(p2(r, x))
 	unfold p1(r)
 	fold p1(r)
 }

method m5(r:Ref, r2:Ref, i:Int)
 requires acc(r.f)
 requires acc(r2.f)
 requires acc(r2.f) --* r2 != null && acc(r2.g) && r2.g == i
 requires acc(r.f) --* r != null && acc(r.g) && r.g == i
 {

    inhale forall x:Int :: (x != i) ==> acc(p2(r, x))
    apply acc(r.f) --* r != null && acc(r.g) && r.g == i
    assert(r.g == i)
    package acc(r.f) --* r != null && acc(r.g) && r.g == i
    exhale forall x:Int :: (x != i) ==> acc(p2(r, x))
    apply  acc(r2.f) --* r2 != null && acc(r2.g) && r2.g == i
    assert (r2.g == i)
    package  acc(r2.f) --* r2 != null && acc(r2.g) && r2.g == i
 }


//APPENDED PERMISSION MODEL

domain _Perm {
    function unit(): Perm 
    function full(): Perm
    function plus(x: Perm, y: Perm): Perm
    function minus(x: Perm, y: Perm): Perm
    function geq(x: Perm, y: Perm): Bool
    function joinable(x: Perm, y: Perm): Bool

    function times(x: Perm, y: Perm): Perm

    //Auxiliary functions
    function share(x: Rational): Perm
    function valid_share(x: Rational): Bool
    function biConstr(Int, Int): Perm

    //Axioms
    axiom axBiConstr {forall a: Int, b: Int :: {biConstr(a, b)} biConstr(a, b) == share(a/b)}


    axiom axValid { forall x: Rational :: {valid_share(x)}
        valid_share(x) <==> (x >= 0/1 && x <= 1/1)
    }
    axiom axUnit { unit() == share(0/1) }
    axiom axFull { full() == share(1/1) }
    axiom axInj { forall a: Rational, b: Rational :: { share(a), share(b) }
        share(a) == share(b) ==> a == b
    }
    axiom axPlus { forall a: Rational, b: Rational :: { plus(share(a), share(b)) }
        joinable(share(a), share(b)) ==> plus(share(a), share(b)) == share(a + b)
    }
    axiom axMinus { forall a: Rational, b: Rational :: { minus(share(a), share(b)) }
        geq(share(a), share(b)) ==> minus(share(a), share(b)) == share(a - b)
    }
    axiom axCanJoin { forall a: Rational, b: Rational :: { joinable(share(a), share(b)) }
        joinable(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a + b)
    }
    axiom axGeq { forall a: Rational, b: Rational :: { geq(share(a), share(b)) }
        geq(share(a), share(b)) <==> valid_share(a) && valid_share(b) && valid_share(a - b)
    }
    axiom axMul { forall a: Rational, b: Rational :: {times(share(a), share(b))} times(share(a), share(b)) == share(a * b)}

    axiom axJoinComm {forall p: Perm, q: Perm :: {plus(p, q)} plus(p, q) == plus(q, p)}
    axiom axJoinAssoc {forall p: Perm, q: Perm, r: Perm :: {plus(plus(p, q), r)} plus(plus(p, q), r) == plus(p, plus(q, r))}
    axiom axJoinCancel { forall p : Perm, q: Perm, x: Perm :: {plus(p, x), plus(q, x)} plus(p, x) == plus(q, x) ==> p == q}

    axiom axUnitGeq { forall p: Perm :: {geq(p, unit())} geq(p, unit())}
    axiom axUnitGeq2 { forall p: Perm :: {geq(unit(), p)} geq(unit(), p) <==> p == unit()}
    axiom axFullGeq { forall p: Perm :: {geq(full(), p)} geq(full(), p)}
    axiom axFullGeq2 { forall p: Perm :: {geq(p, full())} geq(p, full()) <==> p == full()}

    axiom axUnitJoin { forall p: Perm :: {plus(unit(), p)} plus(unit(), p) == p}
    axiom axTimes0 { forall p: Perm :: {times(unit(), p)} times(unit(), p) == unit()}
    axiom axTimes1 { forall p: Perm :: {times(full(), p)} times(unit(), p) == p}
}
